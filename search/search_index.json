{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"An image loading library for Android backed by Kotlin Coroutines. Coil is: Fast : Coil performs a number of optimizations including memory and disk caching, downsampling the image in memory, re-using bitmaps, automatically pausing/cancelling requests, and more. Lightweight : Coil adds ~2000 methods to your APK (for apps that already use OkHttp and Coroutines), which is comparable to Picasso and significantly less than Glide and Fresco. Easy to use : Coil's API leverages Kotlin's language features for simplicity and minimal boilerplate. Modern : Coil is Kotlin-first and uses modern libraries including Coroutines, OkHttp, Okio, and AndroidX Lifecycles. Coil is an acronym for: Co routine I mage L oader. Made with \u2764\ufe0f at Instacart . Translations: \ud55c\uad6d\uc5b4 , \u4e2d\u6587 Download Coil is available on mavenCentral() . implementation ( io.coil-kt:coil:1.2.0 ) Quick Start To load an image into an ImageView , use the load extension function: // URL imageView . load ( https://www.example.com/image.jpg ) // Resource imageView . load ( R . drawable . image ) // File imageView . load ( File ( /path/to/image.jpg )) // And more... Requests can be configured with an optional trailing lambda: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } Image Loaders imageView.load uses the singleton ImageLoader to enqueue an ImageRequest . The singleton ImageLoader can be accessed using an extension function: val imageLoader = context . imageLoader Optionally, you can create your own ImageLoader instance(s) and inject them with dependency injection: val imageLoader = ImageLoader ( context ) If you do not want the singleton ImageLoader , depend on io.coil-kt:coil-base . Requests To load an image into a custom target, enqueue an ImageRequest : val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . target { drawable - // Handle the result. } . build () val disposable = imageLoader . enqueue ( request ) To load an image imperatively, execute an ImageRequest : val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . build () val drawable = imageLoader . execute ( request ). drawable Requirements AndroidX Min SDK 14+ Java 8+ R8 / Proguard Coil is fully compatible with R8 out of the box and doesn't require adding any extra rules. If you use Proguard, you may need to add rules for Coroutines , OkHttp and Okio . License Copyright 2021 Coil Contributors Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"Overview"},{"location":"#download","text":"Coil is available on mavenCentral() . implementation ( io.coil-kt:coil:1.2.0 )","title":"Download"},{"location":"#quick-start","text":"To load an image into an ImageView , use the load extension function: // URL imageView . load ( https://www.example.com/image.jpg ) // Resource imageView . load ( R . drawable . image ) // File imageView . load ( File ( /path/to/image.jpg )) // And more... Requests can be configured with an optional trailing lambda: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) }","title":"Quick Start"},{"location":"#image-loaders","text":"imageView.load uses the singleton ImageLoader to enqueue an ImageRequest . The singleton ImageLoader can be accessed using an extension function: val imageLoader = context . imageLoader Optionally, you can create your own ImageLoader instance(s) and inject them with dependency injection: val imageLoader = ImageLoader ( context ) If you do not want the singleton ImageLoader , depend on io.coil-kt:coil-base .","title":"Image Loaders"},{"location":"#requests","text":"To load an image into a custom target, enqueue an ImageRequest : val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . target { drawable - // Handle the result. } . build () val disposable = imageLoader . enqueue ( request ) To load an image imperatively, execute an ImageRequest : val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . build () val drawable = imageLoader . execute ( request ). drawable","title":"Requests"},{"location":"#requirements","text":"AndroidX Min SDK 14+ Java 8+","title":"Requirements"},{"location":"#r8-proguard","text":"Coil is fully compatible with R8 out of the box and doesn't require adding any extra rules. If you use Proguard, you may need to add rules for Coroutines , OkHttp and Okio .","title":"R8 / Proguard"},{"location":"#license","text":"Copyright 2021 Coil Contributors Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"README-ko/","text":"Coil\uc740 Kotlin Coroutines\uc73c\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 Android \ubc31\uc564\ub4dc \uc774\ubbf8\uc9c0 \ub85c\ub529 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. Coil \uc740: \ube60\ub974\ub2e4 : Coil\uc740 \uba54\ubaa8\ub9ac\uc640 \ub514\uc2a4\ud06c\uc758 \uce90\uc2f1, \uba54\ubaa8\ub9ac\uc758 \uc774\ubbf8\uc9c0 \ub2e4\uc6b4 \uc0d8\ud50c\ub9c1, Bitmap \uc7ac\uc0ac\uc6a9, \uc77c\uc2dc\uc815\uc9c0/\ucde8\uc18c\uc758 \uc790\ub3d9\ud654 \ub4f1\ub4f1 \uc218 \ub9ce\uc740 \ucd5c\uc801\ud654 \uc791\uc5c5\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \uac00\ubccd\ub2e4 : Coil\uc740 \ucd5c\ub300 2000\uac1c\uc758 method\ub4e4\uc744 APK\uc5d0 \ucd94\uac00\ud569\ub2c8\ub2e4(\uc774\ubbf8 OkHttp\uc640 Coroutines\uc744 \uc0ac\uc6a9\uc911\uc778 \uc571\uc5d0 \ud55c\ud558\uc5ec), \uc774\ub294 Picasso \ube44\uc2b7\ud55c \uc218\uc900\uc774\uba70 Glide\uc640 Fresco\ubcf4\ub2e4\ub294 \uc801\uc2b5\ub2c8\ub2e4. \uc0ac\uc6a9\ud558\uae30 \uc27d\ub2e4 : Coil API\ub294 \uc2ec\ud50c\ud568\uacfc \ucd5c\uc18c\ud55c\uc758 boilerplate\ub97c \uc704\ud558\uc5ec Kotlin\uc758 \uae30\ub2a5\uc744 \ud65c\uc6a9\ud569\ub2c8\ub2e4. \ud604\ub300\uc801\uc774\ub2e4 : Coil\uc740 Kotlin \uc6b0\uc120\uc774\uba70 Coroutines, OkHttp, Okio, AndroidX Lifecycles\ub4f1\uc758 \ucd5c\uc2e0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. Coil\uc740: Co routine I mage L oader\uc758 \uc57d\uc790\uc785\ub2c8\ub2e4. \u2764\ufe0f Instacart \uc5d0\uc11c \u2764\ufe0f\uc73c\ub85c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. \ub2e4\uc6b4\ub85c\ub4dc Coil\uc740 mavenCentral() \ub85c \uc774\uc6a9 \uac00\ub2a5\ud569\ub2c8\ub2e4. implementation ( io.coil-kt:coil:1.2.0 ) \ube60\ub978 \uc2dc\uc791 ImageView \ub85c \uc774\ubbf8\uc9c0\ub97c \ubd88\ub7ec\uc624\uae30 \uc704\ud574, load \ud655\uc7a5 \ud568\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. // URL imageView . load ( https://www.example.com/image.jpg ) // Resource imageView . load ( R . drawable . image ) // File imageView . load ( File ( /path/to/image.jpg )) // And more... Requests\ub294 trailing lambda \uc2dd\uc744 \uc774\uc6a9\ud558\uc5ec \ucd94\uac00 \uc124\uc815\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } \uc5ec\uae30\uc11c Coil\uc758 \uc804\uccb4 \ubb38\uc11c \ub97c \ud655\uc778\ud558\uc138\uc694. \uc694\uad6c\uc0ac\ud56d AndroidX Min SDK 14+ Java 8+ R8 / Proguard Coil\uc740 \ubcc4\ub3c4\uc758 \uc124\uc815 \uc5c6\uc774 R8\uacfc \uc644\ubcbd\ud558\uac8c \ud638\ud658 \uac00\ub2a5\ud558\uba70 \ucd94\uac00 \uaddc\uce59\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Proguard\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0, Coroutines , OkHttp , Okio \uc5d0 \uaddc\uce59\uc744 \ucd94\uac00\ud560 \ud544\uc694\uac00 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub77c\uc774\uc120\uc2a4 Copyright 2021 Coil Contributors Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"README ko"},{"location":"README-ko/#_1","text":"Coil\uc740 mavenCentral() \ub85c \uc774\uc6a9 \uac00\ub2a5\ud569\ub2c8\ub2e4. implementation ( io.coil-kt:coil:1.2.0 )","title":"\ub2e4\uc6b4\ub85c\ub4dc"},{"location":"README-ko/#_2","text":"ImageView \ub85c \uc774\ubbf8\uc9c0\ub97c \ubd88\ub7ec\uc624\uae30 \uc704\ud574, load \ud655\uc7a5 \ud568\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. // URL imageView . load ( https://www.example.com/image.jpg ) // Resource imageView . load ( R . drawable . image ) // File imageView . load ( File ( /path/to/image.jpg )) // And more... Requests\ub294 trailing lambda \uc2dd\uc744 \uc774\uc6a9\ud558\uc5ec \ucd94\uac00 \uc124\uc815\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } \uc5ec\uae30\uc11c Coil\uc758 \uc804\uccb4 \ubb38\uc11c \ub97c \ud655\uc778\ud558\uc138\uc694.","title":"\ube60\ub978 \uc2dc\uc791"},{"location":"README-ko/#_3","text":"AndroidX Min SDK 14+ Java 8+","title":"\uc694\uad6c\uc0ac\ud56d"},{"location":"README-ko/#r8-proguard","text":"Coil\uc740 \ubcc4\ub3c4\uc758 \uc124\uc815 \uc5c6\uc774 R8\uacfc \uc644\ubcbd\ud558\uac8c \ud638\ud658 \uac00\ub2a5\ud558\uba70 \ucd94\uac00 \uaddc\uce59\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Proguard\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0, Coroutines , OkHttp , Okio \uc5d0 \uaddc\uce59\uc744 \ucd94\uac00\ud560 \ud544\uc694\uac00 \uc788\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"R8 / Proguard"},{"location":"README-ko/#_4","text":"Copyright 2021 Coil Contributors Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"\ub77c\uc774\uc120\uc2a4"},{"location":"README-zh/","text":"Coil \u662f\u4e00\u4e2a Android \u56fe\u7247\u52a0\u8f7d\u5e93\uff0c\u901a\u8fc7 Kotlin \u534f\u7a0b\u7684\u65b9\u5f0f\u52a0\u8f7d\u56fe\u7247\u3002\u7279\u70b9\u5982\u4e0b\uff1a \u66f4\u5feb : Coil \u5728\u6027\u80fd\u4e0a\u6709\u5f88\u591a\u4f18\u5316\uff0c\u5305\u62ec\u5185\u5b58\u7f13\u5b58\u548c\u78c1\u76d8\u7f13\u5b58\uff0c\u628a\u7f29\u7565\u56fe\u5b58\u4fdd\u5b58\u5728\u5185\u5b58\u4e2d\uff0c\u5faa\u73af\u5229\u7528 bitmap\uff0c\u81ea\u52a8\u6682\u505c\u548c\u53d6\u6d88\u56fe\u7247\u7f51\u7edc\u8bf7\u6c42\u7b49\u3002 \u66f4\u8f7b\u91cf\u7ea7 : Coil \u53ea\u67092000\u4e2a\u65b9\u6cd5\uff08\u524d\u63d0\u662f\u4f60\u7684 APP \u91cc\u9762\u96c6\u6210\u4e86 OkHttp \u548c Coroutines\uff09\uff0cCoil \u548c Picasso \u7684\u65b9\u6cd5\u6570\u5dee\u4e0d\u591a\uff0c\u76f8\u6bd4 Glide \u548c Fresco \u8981\u8f7b\u91cf\u5f88\u591a\u3002 \u66f4\u5bb9\u6613\u4f7f\u7528 : Coil \u7684 API \u5145\u5206\u5229\u7528\u4e86 Kotlin \u8bed\u8a00\u7684\u65b0\u7279\u6027\uff0c\u7b80\u5316\u548c\u51cf\u5c11\u4e86\u5f88\u591a\u6837\u677f\u4ee3\u7801\u3002 \u66f4\u6d41\u884c : Coil \u9996\u9009 Kotlin \u8bed\u8a00\u5f00\u53d1\u5e76\u4e14\u4f7f\u7528\u5305\u542b Coroutines, OkHttp, Okio \u548c AndroidX Lifecycles \u5728\u5185\u6700\u6d41\u884c\u7684\u5f00\u6e90\u5e93\u3002 Coil \u540d\u5b57\u7684\u7531\u6765\uff1a\u53d6 Co routine I mage L oader \u9996\u5b57\u6bcd\u5f97\u6765\u3002 \u5728 Instacart \u7528\u2764\ufe0f\u6253\u9020\u3002 \u4e0b\u8f7d Coil \u53ef\u4ee5\u5728 mavenCentral() \u4e0b\u8f7d implementation ( io.coil-kt:coil:1.2.0 ) \u5feb\u901f\u4e0a\u624b \u53ef\u4ee5\u4f7f\u7528 ImageView \u7684\u6269\u5c55\u51fd\u6570 load \u52a0\u8f7d\u4e00\u5f20\u56fe\u7247\uff1a // URL imageView . load ( https://www.example.com/image.jpg ) // Resource imageView . load ( R . drawable . image ) // File imageView . load ( File ( /path/to/image.jpg )) // And more... \u53ef\u4ee5\u4f7f\u7528 lambda \u8bed\u6cd5\u8f7b\u677e\u914d\u7f6e\u8bf7\u6c42\u9009\u9879\uff1a imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } \u4e5f\u53ef\u4ee5\u67e5\u770b Coil \u7684 \u5b8c\u6574\u6587\u6863 \u83b7\u5f97\u66f4\u591a\u4fe1\u606f\u3002 \u73af\u5883\u8981\u6c42 AndroidX Min SDK 14+ Java 8+ R8 / Proguard Coil \u517c\u5bb9 R8 \u6df7\u6dc6\uff0c\u60a8\u65e0\u9700\u518d\u6dfb\u52a0\u5176\u4ed6\u7684\u89c4\u5219 \u5982\u679c\u60a8\u9700\u8981\u6df7\u6dc6\u4ee3\u7801\uff0c\u53ef\u80fd\u9700\u8981\u6dfb\u52a0\u5bf9\u5e94\u7684\u6df7\u6dc6\u89c4\u5219\uff1a Coroutines , OkHttp , Okio \u3002 License Copyright 2021 Coil Contributors Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"README zh"},{"location":"README-zh/#_1","text":"Coil \u53ef\u4ee5\u5728 mavenCentral() \u4e0b\u8f7d implementation ( io.coil-kt:coil:1.2.0 )","title":"\u4e0b\u8f7d"},{"location":"README-zh/#_2","text":"\u53ef\u4ee5\u4f7f\u7528 ImageView \u7684\u6269\u5c55\u51fd\u6570 load \u52a0\u8f7d\u4e00\u5f20\u56fe\u7247\uff1a // URL imageView . load ( https://www.example.com/image.jpg ) // Resource imageView . load ( R . drawable . image ) // File imageView . load ( File ( /path/to/image.jpg )) // And more... \u53ef\u4ee5\u4f7f\u7528 lambda \u8bed\u6cd5\u8f7b\u677e\u914d\u7f6e\u8bf7\u6c42\u9009\u9879\uff1a imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } \u4e5f\u53ef\u4ee5\u67e5\u770b Coil \u7684 \u5b8c\u6574\u6587\u6863 \u83b7\u5f97\u66f4\u591a\u4fe1\u606f\u3002","title":"\u5feb\u901f\u4e0a\u624b"},{"location":"README-zh/#_3","text":"AndroidX Min SDK 14+ Java 8+","title":"\u73af\u5883\u8981\u6c42"},{"location":"README-zh/#r8-proguard","text":"Coil \u517c\u5bb9 R8 \u6df7\u6dc6\uff0c\u60a8\u65e0\u9700\u518d\u6dfb\u52a0\u5176\u4ed6\u7684\u89c4\u5219 \u5982\u679c\u60a8\u9700\u8981\u6df7\u6dc6\u4ee3\u7801\uff0c\u53ef\u80fd\u9700\u8981\u6dfb\u52a0\u5bf9\u5e94\u7684\u6df7\u6dc6\u89c4\u5219\uff1a Coroutines , OkHttp , Okio \u3002","title":"R8 / Proguard"},{"location":"README-zh/#license","text":"Copyright 2021 Coil Contributors Licensed under the Apache License, Version 2.0 (the License ); you may not use this file except in compliance with the License. You may obtain a copy of the License at https://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an AS IS BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"changelog/","text":"Changelog [1.2.0] - April 12, 2021 Important : Use an SVG's view bounds to calculate its aspect ratio in SvgDecoder . ( #688 ) Previously, SvgDecoder used an SVG's width / height elements to determine its aspect ratio, however this doesn't correctly follow the SVG specification. To revert to the old behaviour set useViewBoundsAsIntrinsicSize = false when constructing your SvgDecoder . New : Add VideoFrameDecoder to support decoding video frames from any source. ( #689 ) New : Support automatic SVG detection using the source's contents instead of just the MIME type. ( #654 ) New : Support sharing resources using ImageLoader.newBuilder() . ( #653 ) Importantly, this enables sharing memory caches between ImageLoader instances. New : Add support for animated image transformations using AnimatedTransformation . ( #659 ) New : Add support for start/end callbacks for animated drawables. ( #676 ) Fix parsing EXIF data for HEIF/HEIC files. ( #664 ) Fix not using the EmptyBitmapPool implementation if bitmap pooling is disabled. ( #638 ) Without this fix bitmap pooling was still disabled properly, however it used a more heavyweight BitmapPool implementation. Fix case where MovieDrawable.getOpacity would incorrectly return transparent. ( #682 ) Guard against the default temporary directory not existing. ( #683 ) Build using the JVM IR backend. ( #670 ) Update Kotlin (1.4.32). Update Coroutines (1.4.3). Update OkHttp (3.12.13). Update androidx.lifecycle:lifecycle-common-java8 to 2.3.1. [1.1.1] - January 11, 2021 Fix a case where ViewSizeResolver.size could throw an IllegalStateException due to resuming a coroutine more than once. Fix HttpFetcher blocking forever if called from the main thread. Requests that are forced to execute on the main thread using ImageRequest.dispatcher(Dispatchers.Main.immediate) will fail with a NetworkOnMainThreadException unless ImageRequest.networkCachePolicy is set to CachePolicy.DISABLED or CachePolicy.WRITE_ONLY . Rotate video frames from VideoFrameFetcher if the video has rotation metadata. Update Kotlin (1.4.21). Update Coroutines (1.4.2). Update Okio (2.10.0). Update androidx.exifinterface:exifinterface (1.3.2). [1.1.0] - November 24, 2020 Important : Change the CENTER and MATRIX ImageView scale types to resolve to OriginalSize . ( #587 ) This change only affects the implicit size resolution algorithm when the request's size isn't specified explicitly. This change was made to ensure that the visual result of an image request is consistent with ImageView.setImageResource / ImageView.setImageURI . To revert to the old behaviour set a ViewSizeResolver when constructing your request. Important : Return the display size from ViewSizeResolver if the view's layout param is WRAP_CONTENT . ( #562 ) Previously, we would only return the display size if the view has been fully laid out. This change makes the typical behaviour more consistent and intuitive. Add the ability to control alpha pre-multiplication. ( #569 ) Support preferring exact intrinsic size in CrossfadeDrawable . ( #585 ) Check for the full GIF header including version. ( #564 ) Add an empty bitmap pool implementation. ( #561 ) Make EventListener.Factory a functional interface. ( #575 ) Stabilize EventListener . ( #574 ) Add String overload for ImageRequest.Builder.placeholderMemoryCacheKey . Add @JvmOverloads to the ViewSizeResolver constructor. Fix: Mutate start/end drawables in CrossfadeDrawable . ( #572 ) Fix: Fix GIF not playing on second load. ( #577 ) Update Kotlin (1.4.20) and migrate to the kotlin-parcelize plugin. Update Coroutines (1.4.1). [1.0.0] - October 22, 2020 Changes since 0.13.0 : - Add Context.imageLoader extension function. ( #534 ) - Add ImageLoader.executeBlocking extension function. ( #537 ) - Don't shutdown previous singleton image loader if replaced. ( #533 ) Changes since 1.0.0-rc3 : - Fix: Guard against missing/invalid ActivityManager. ( #541 ) - Fix: Allow OkHttp to cache unsuccessful responses. ( #551 ) - Update Kotlin to 1.4.10. - Update Okio to 2.9.0. - Update androidx.exifinterface:exifinterface to 1.3.1. [1.0.0-rc3] - September 21, 2020 Revert using the -Xjvm-default=all compiler flag due to instability. This is a source compatible, but binary incompatible change from previous release candidate versions. Add Context.imageLoader extension function. ( #534 ) Add ImageLoader.executeBlocking extension function. ( #537 ) Don't shutdown previous singleton image loader if replaced. ( #533 ) Update AndroidX dependencies: androidx.exifinterface:exifinterface - 1.3.0 [1.0.0-rc2] - September 3, 2020 This release requires Kotlin 1.4.0 or above. All the changes present in 0.13.0 . Depend on the base Kotlin stdlib instead of stdlib-jdk8 . [0.13.0] - September 3, 2020 Important : Launch the Interceptor chain on the main thread by default. ( #513 ) This largely restores the behaviour from 0.11.0 and below where the memory cache would be checked synchronously on the main thread. To revert to using the same behaviour as 0.12.0 where the memory cache is checked on ImageRequest.dispatcher , set ImageLoader.Builder.launchInterceptorChainOnMainThread(false) . See launchInterceptorChainOnMainThread for more information. Fix: Fix potential memory leak if request is started on a ViewTarget in a detached fragment. ( #518 ) Fix: Use ImageRequest.context to load resource URIs. ( #517 ) Fix: Fix race condition that could cause subsequent requests to not be saved to the disk cache. ( #510 ) Fix: Use blockCountLong and blockSizeLong on API 18. Make ImageLoaderFactory a fun interface. Add ImageLoader.Builder.addLastModifiedToFileCacheKey which allows you to enable/disable adding the last modified timestamp to the memory cache key for an image loaded from a File . Update Kotlin to 1.4.0. Update Coroutines to 1.3.9. Update Okio to 2.8.0. [1.0.0-rc1] - August 18, 2020 This release requires Kotlin 1.4.0 or above. Update Kotlin to 1.4.0 and enable -Xjvm-default=all . See here for how to enable -Xjvm-default=all in your build file. This generates Java 8 default methods for default Kotlin interface methods. Remove all existing deprecated methods in 0.12.0. Update Coroutines to 1.3.9. [0.12.0] - August 18, 2020 Breaking : LoadRequest and GetRequest have been replaced with ImageRequest : ImageLoader.execute(LoadRequest) - ImageLoader.enqueue(ImageRequest) ImageLoader.execute(GetRequest) - ImageLoader.execute(ImageRequest) ImageRequest implements equals / hashCode . Breaking : A number of classes were renamed and/or changed package: coil.request.RequestResult - coil.request.ImageResult coil.request.RequestDisposable - coil.request.Disposable coil.bitmappool.BitmapPool - coil.bitmap.BitmapPool coil.DefaultRequestOptions - coil.request.DefaultRequestOptions Breaking : SparseIntArraySet has been removed from the public API. Breaking : TransitionTarget no longer implements ViewTarget . Breaking : ImageRequest.Listener.onSuccess 's signature has changed to return an ImageResult.Metadata instead of just a DataSource . Breaking : Remove support for LoadRequest.aliasKeys . This API is better handled with direct read/write access to the memory cache. Important : Values in the memory cache are no longer resolved synchronously (if called from the main thread). This change was also necessary to support executing Interceptor s on a background dispatcher. This change also moves more work off the main thread, improving performance. Important : Mappers are now executed on a background dispatcher. As a side effect, automatic bitmap sampling is no longer automatically supported. To achieve the same effect, use the MemoryCache.Key of a previous request as the placeholderMemoryCacheKey of the subsequent request. See here for an example . The placeholderMemoryCacheKey API offers more freedom as you can \"link\" two image requests with different data (e.g. different URLs for small/large images). Important : Coil's ImageView extension functions have been moved from the coil.api package to the coil package. Use find + replace to refactor import coil.api.load - import coil.load . Unfortunately, it's not possible to use Kotlin's ReplaceWith functionality to replace imports. Important : Use standard crossfade if drawables are not the same image. Important : Prefer immutable bitmaps on API 24+. Important : MeasuredMapper has been deprecated in favour of the new Interceptor interface. See here for an example of how to convert a MeasuredMapper into an Interceptor . Interceptor is a much less restrictive API that allows for a wider range of custom logic. Important : ImageRequest.data is now not null. If you create an ImageRequest without setting its data it will return NullRequestData as its data. New : Add support for direct read/write access to an ImageLoader 's MemoryCache . See the docs for more information. New : Add support for Interceptor s. See the docs for more information. Coil's Interceptor design is heavily inspired by OkHttp 's! New : Add the ability to enable/disable bitmap pooling using ImageLoader.Builder.bitmapPoolingEnabled . Bitmap pooling is most effective on API 23 and below, but may still be benificial on API 24 and up (by eagerly calling Bitmap.recycle ). New : Support thread interruption while decoding. Fix parsing multiple segments in content-type header. Rework bitmap reference counting to be more robust. Fix WebP decoding on API 19 devices. Expose FetchResult and DecodeResult in the EventListener API. Compile with SDK 30. Update Coroutines to 1.3.8. Update OkHttp to 3.12.12. Update Okio to 2.7.0. Update AndroidX dependencies: androidx.appcompat:appcompat-resources - 1.2.0 androidx.core:core-ktx - 1.3.1 [0.11.0] - May 14, 2020 Breaking : This version removes all existing deprecated functions. This enables removing Coil's ContentProvider so it doesn't run any code at app startup. Breaking : Convert SparseIntArraySet.size to a val. ( #380 ) Breaking : Move Parameters.count() to an extension function. ( #403 ) Breaking : Make BitmapPool.maxSize an Int. ( #404 ) Important : Make ImageLoader.shutdown() optional (similar to OkHttpClient ). ( #385 ) Fix: Fix AGP 4.1 compatibility. ( #386 ) Fix: Fix measuring GONE views. ( #397 ) Reduce the default memory cache size to 20%. ( #390 ) To restore the existing behaviour set ImageLoaderBuilder.availableMemoryPercentage(0.25) when creating your ImageLoader . Update Coroutines to 1.3.6. Update OkHttp to 3.12.11. [0.10.1] - April 26, 2020 Fix OOM when decoding large PNGs on API 23 and below. ( #372 ). This disables decoding EXIF orientation for PNG files. PNG EXIF orientation is very rarely used and reading PNG EXIF data (even if it's empty) requires buffering the entire file into memory, which is bad for performance. Minor Java compatibility improvements to SparseIntArraySet . Update Okio to 2.6.0. [0.10.0] - April 20, 2020 Highlights This version deprecates most of the DSL API in favour of using the builders directly. Here's what the change looks like: // 0.9.5 (old) val imageLoader = ImageLoader ( context ) { bitmapPoolPercentage ( 0.5 ) crossfade ( true ) } val disposable = imageLoader . load ( context , https://www.example.com/image.jpg ) { target ( imageView ) } val drawable = imageLoader . get ( https://www.example.com/image.jpg ) { size ( 512 , 512 ) } // 0.10.0 (new) val imageLoader = ImageLoader . Builder ( context ) . bitmapPoolPercentage ( 0.5 ) . crossfade ( true ) . build () val request = LoadRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . target ( imageView ) . build () val disposable = imageLoader . execute ( request ) val request = GetRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . size ( 512 , 512 ) . build () val drawable = imageLoader . execute ( request ). drawable If you're using the io.coil-kt:coil artifact, you can call Coil.execute(request) to execute the request with the singleton ImageLoader . ImageLoader s now have a weak reference memory cache that tracks weak references to images once they're evicted from the strong reference memory cache. This means an image will always be returned from an ImageLoader 's memory cache if there's still a strong reference to it. Generally, this should make the memory cache much more predictable and increase its hit rate. This behaviour can be enabled/disabled with ImageLoaderBuilder.trackWeakReferences . Add a new artifact, io.coil-kt:coil-video , to decode specific frames from a video file. Read more here . Add a new EventListener API for tracking metrics. Add ImageLoaderFactory which can be implemented by your Application to simplify singleton initialization. Full Release Notes Important : Deprecate DSL syntax in favour of builder syntax. ( #267 ) Important : Deprecate Coil and ImageLoader extension functions. ( #322 ) Breaking : Return sealed RequestResult type from ImageLoader.execute(GetRequest) . ( #349 ) Breaking : Rename ExperimentalCoil to ExperimentalCoilApi . Migrate from @Experimental to @RequiresOptIn . ( #306 ) Breaking : Replace CoilLogger with Logger interface. ( #316 ) Breaking : Rename destWidth/destHeight to dstWidth/dstHeight. ( #275 ) Breaking : Re-arrange MovieDrawable 's constructor params. ( #272 ) Breaking : Request.Listener 's methods now receive the full Request object instead of just its data. Breaking : GetRequestBuilder now requires a Context in its constructor. Breaking : Several properties on Request are now nullable. Behaviour change : Include parameter values in the cache key by default. ( #319 ) Behaviour change : Slightly adjust Request.Listener.onStart() timing to be called immediately after Target.onStart() . ( #348 ) New : Add WeakMemoryCache implementation. ( #295 ) New : Add coil-video to support decoding video frames. ( #122 ) New : Introduce EventListener . ( #314 ) New : Introduce ImageLoaderFactory . ( #311 ) New : Support animated HEIF image sequences on Android 11. ( #297 ) New : Improve Java compatibility. ( #262 ) New : Support setting a default CachePolicy . ( #307 ) New : Support setting a default Bitmap.Config . ( #342 ) New : Add ImageLoader.invalidate(key) to clear a single memory cache item ( #55 ) New : Add debug logs to explain why a cached image is not reused. ( #346 ) New : Support error and fallback drawables for get requests. Fix: Fix memory cache miss when Transformation reduces input bitmap's size. ( #357 ) Fix: Ensure radius is below RenderScript max in BlurTransformation. ( #291 ) Fix: Fix decoding high colour depth images. ( #358 ) Fix: Disable ImageDecoderDecoder crash work-around on Android 11 and above. ( #298 ) Fix: Fix failing to read EXIF data on pre-API 23. ( #331 ) Fix: Fix incompatibility with Android R SDK. ( #337 ) Fix: Only enable inexact size if ImageView has a matching SizeResolver . ( #344 ) Fix: Allow cached images to be at most one pixel off requested size. ( #360 ) Fix: Skip crossfade transition if view is not visible. ( #361 ) Deprecate CoilContentProvider . ( #293 ) Annotate several ImageLoader methods with @MainThread . Avoid creating a LifecycleCoroutineDispatcher if the lifecycle is currently started. ( #356 ) Use full package name for OriginalSize.toString() . Preallocate when decoding software bitmap. ( #354 ) Update Kotlin to 1.3.72. Update Coroutines to 1.3.5. Update OkHttp to 3.12.10. Update Okio to 2.5.0. Update AndroidX dependencies: androidx.exifinterface:exifinterface - 1.2.0 [0.9.5] - February 6, 2020 Fix: Ensure a view is attached before checking if it is hardware accelerated. This fixes a case where requesting a hardware bitmap could miss the memory cache. Update AndroidX dependencies: androidx.core:core-ktx - 1.2.0 [0.9.4] - February 3, 2020 Fix: Respect aspect ratio when downsampling in ImageDecoderDecoder. Thanks @zhanghai. Previously bitmaps would be returned from the memory cache as long as their config was greater than or equal to the config specified in the request. For example, if you requested an ARGB_8888 bitmap, it would be possible to have a RGBA_F16 bitmap returned to you from the memory cache. Now, the cached config and the requested config must be equal. Make scale and durationMillis public in CrossfadeDrawable and CrossfadeTransition . [0.9.3] - February 1, 2020 Fix: Translate child drawable inside ScaleDrawable to ensure it is centered. Fix: Fix case where GIFs and SVGs would not fill bounds completely. Defer calling HttpUrl.get() to background thread. Improve BitmapFactory null bitmap error message. Add 3 devices to hardware bitmap blacklist. ( #264 ) Update AndroidX dependencies: androidx.lifecycle:lifecycle-common-java8 - 2.2.0 [0.9.2] - January 19, 2020 Fix: Fix decoding GIFs on pre-API 19. Thanks @mario. Fix: Fix rasterized vector drawables not being marked as sampled. Fix: Throw exception if Movie dimensions are = 0. Fix: Fix CrossfadeTransition not being resumed for a memory cache event. Fix: Prevent returning hardware bitmaps to all target methods if disallowed. Fix: Fix MovieDrawable not positioning itself in the center of its bounds. Remove automatic scaling from CrossfadeDrawable. Make BitmapPool.trimMemory public. Wrap AnimatedImageDrawable in a ScaleDrawable to ensure it fills its bounds. Add @JvmOverloads to RequestBuilder.setParameter. Set an SVG's view box to its size if the view box is not set. Pass state and level changes to CrossfadeDrawable children. Update OkHttp to 3.12.8. [0.9.1] - December 30, 2019 Fix: Fix crash when calling LoadRequestBuilder.crossfade(false) . [0.9.0] - December 30, 2019 Breaking : Transformation.transform now includes a Size parameter. This is to support transformations that change the size of the output Bitmap based on the size of the Target . Requests with transformations are now also exempt from image sampling . Breaking : Transformation s are now applied to any type of Drawable . Before, Transformation s would be skipped if the input Drawable was not a BitmapDrawable . Now, Drawable s are rendered to a Bitmap before applying the Transformation s. Breaking : Passing null data to ImageLoader.load is now treated as an error and calls Target.onError and Request.Listener.onError with a NullRequestDataException . This change was made to support setting a fallback drawable if data is null . Previously the request was silently ignored. Breaking : RequestDisposable.isDisposed is now a val . New : Support for custom transitions. See here for more info . Transitions are marked as experimental as the API is incubating. New : Add RequestDisposable.await to support suspending while a LoadRequest is in progress. New : Support setting a fallback drawable when request data is null. New : Add Precision . This makes the size of the output Drawable exact while enabling scaling optimizations for targets that support scaling (e.g. ImageViewTarget ). See its documentation for more information. New : Add RequestBuilder.aliasKeys to support matching multiple cache keys. Fix: Make RequestDisposable thread safe. Fix: RoundedCornersTransformation now crops to the size of the target then rounds the corners. Fix: CircleCropTransformation now crops from the center. Fix: Add several devices to the hardware bitmap blacklist . Fix: Preserve aspect ratio when converting a Drawable to a Bitmap. Fix: Fix possible memory cache miss with Scale.FIT . Fix: Ensure Parameters iteration order is deterministic. Fix: Defensive copy when creating Parameters and ComponentRegistry. Fix: Ensure RealBitmapPool's maxSize = 0. Fix: Show the start drawable if CrossfadeDrawable is not animating or done. Fix: Adjust CrossfadeDrawable to account for children with undefined intrinsic size. Fix: Fix MovieDrawable not scaling properly. Update Kotlin to 1.3.61. Update Kotlin Coroutines to 1.3.3. Update Okio to 2.4.3. Update AndroidX dependencies: androidx.exifinterface:exifinterface - 1.1.0 [0.8.0] - October 22, 2019 Breaking : SvgDrawable has been removed. Instead, SVGs are now prerendered to BitmapDrawable s by SvgDecoder . This makes SVGs significantly less expensive to render on the main thread . Also SvgDecoder now requires a Context in its constructor. Breaking : SparseIntArraySet extension functions have moved to the coil.extension package. New : Support setting per-request network headers. See here for more info . New : Add new Parameters API to support passing custom data through the image pipeline. New : Support individual corner radii in RoundedCornersTransformation. Thanks @khatv911. New : Add ImageView.clear() to support proactively freeing resources. New : Support loading resources from other packages. New : Add subtractPadding attribute to ViewSizeResolver to enable/disable subtracting a view's padding when measuring. New : Improve HttpUrlFetcher MIME type detection. New : Add Animatable2Compat support to MovieDrawable and CrossfadeDrawable. New : Add RequestBuilder * .repeatCount to set the repeat count for a GIF. New : Add BitmapPool creation to the public API. New : Annotate Request.Listener methods with @MainThread . Fix: Make CoilContentProvider visible for testing. Fix: Include night mode in the resource cache key. Fix: Work around ImageDecoder native crash by temporarily writing the source to disk. Fix: Correctly handle contact display photo uris. Fix: Pass tint to CrossfadeDrawable's children. Fix: Fix several instances of not closing sources. Fix: Add a blacklist of devices with broken/incomplete hardware bitmap implementations. Compile against SDK 29. Update Kotlin Coroutines to 1.3.2. Update OkHttp to 3.12.6. Update Okio to 2.4.1. Change appcompat-resources from compileOnly to implementation for coil-base . [0.7.0] - September 8, 2019 Breaking : ImageLoaderBuilder.okHttpClient(OkHttpClient.Builder.() - Unit) is now ImageLoaderBuilder.okHttpClient(() - OkHttpClient) . The initializer is also now called lazily on a background thread. If you set a custom OkHttpClient you must set OkHttpClient.cache to enable disk caching. If you don't set a custom OkHttpClient , Coil will create the default OkHttpClient which has disk caching enabled. The default Coil cache can be created using CoilUtils.createDefaultCache(context) . e.g.: val imageLoader = ImageLoader ( context ) { okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( context )) . build () } } Breaking : Fetcher.key no longer has a default implementation. Breaking : Previously, only the first applicable Mapper would be called. Now, all applicable Mapper s will be called. No API changes. Breaking : Minor named parameter renaming: url - uri , factory - initializer . New : coil-svg artifact, which has an SvgDecoder that supports automatically decoding SVGs. Powered by AndroidSVG . Thanks @rharter. New : load(String) and get(String) now accept any of the supported Uri schemes. e.g. You can now do imageView.load(\"file:///path/to/file.jpg\") . New : Refactor ImageLoader to use Call.Factory instead of OkHttpClient . This allows lazy initialization of the networking resources using ImageLoaderBuilder.okHttpClient { OkHttpClient() } . Thanks @ZacSweers. New : RequestBuilder.decoder to explicitly set the decoder for a request. New : ImageLoaderBuilder.allowHardware to enable/disable hardware bitmaps by default for an ImageLoader. New : Support software rendering in ImageDecoderDecoder. Fix: Multiple bugs with loading vector drawables. Fix: Support WRAP_CONTENT View dimensions. Fix: Support parsing EXIF data longer than 8192 bytes. Fix: Don't stretch drawables with different aspect ratios when crossfading. Fix: Guard against network observer failing to register due to exception. Fix: Fix divide by zero error in MovieDrawable. Thanks @R12rus. Fix: Support nested Android asset files. Thanks @JaCzekanski. Fix: Guard against running out of file descriptors on Android O and O_MR1. Fix: Don't crash when disabling memory cache. Thanks @hansenji. Fix: Ensure Target.cancel is always called from the main thread. Update Kotlin to 1.3.50. Update Kotlin Coroutines to 1.3.0. Update OkHttp to 3.12.4. Update Okio to 2.4.0. Update AndroidX dependencies to the latest stable versions: androidx.appcompat:appcompat - 1.1.0 androidx.core:core-ktx - 1.1.0 androidx.lifecycle:lifecycle-common-java8 - 2.1.0 Replace appcompat with appcompat-resources as an optional compileOnly dependency. appcompat-resources is a much smaller artifact. [0.6.1] - August 16, 2019 New: Add transformations(List Transformation ) to RequestBuilder. Fix: Add the last modified date to the cache key for file uris. Fix: Ensure View dimensions are evaluated to at least 1px. Fix: Clear MovieDrawable's canvas between frames. Fix: Open assets correctly. [0.6.0] - August 12, 2019 Initial release.","title":"Change Log"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#120-april-12-2021","text":"Important : Use an SVG's view bounds to calculate its aspect ratio in SvgDecoder . ( #688 ) Previously, SvgDecoder used an SVG's width / height elements to determine its aspect ratio, however this doesn't correctly follow the SVG specification. To revert to the old behaviour set useViewBoundsAsIntrinsicSize = false when constructing your SvgDecoder . New : Add VideoFrameDecoder to support decoding video frames from any source. ( #689 ) New : Support automatic SVG detection using the source's contents instead of just the MIME type. ( #654 ) New : Support sharing resources using ImageLoader.newBuilder() . ( #653 ) Importantly, this enables sharing memory caches between ImageLoader instances. New : Add support for animated image transformations using AnimatedTransformation . ( #659 ) New : Add support for start/end callbacks for animated drawables. ( #676 ) Fix parsing EXIF data for HEIF/HEIC files. ( #664 ) Fix not using the EmptyBitmapPool implementation if bitmap pooling is disabled. ( #638 ) Without this fix bitmap pooling was still disabled properly, however it used a more heavyweight BitmapPool implementation. Fix case where MovieDrawable.getOpacity would incorrectly return transparent. ( #682 ) Guard against the default temporary directory not existing. ( #683 ) Build using the JVM IR backend. ( #670 ) Update Kotlin (1.4.32). Update Coroutines (1.4.3). Update OkHttp (3.12.13). Update androidx.lifecycle:lifecycle-common-java8 to 2.3.1.","title":"[1.2.0] - April 12, 2021"},{"location":"changelog/#111-january-11-2021","text":"Fix a case where ViewSizeResolver.size could throw an IllegalStateException due to resuming a coroutine more than once. Fix HttpFetcher blocking forever if called from the main thread. Requests that are forced to execute on the main thread using ImageRequest.dispatcher(Dispatchers.Main.immediate) will fail with a NetworkOnMainThreadException unless ImageRequest.networkCachePolicy is set to CachePolicy.DISABLED or CachePolicy.WRITE_ONLY . Rotate video frames from VideoFrameFetcher if the video has rotation metadata. Update Kotlin (1.4.21). Update Coroutines (1.4.2). Update Okio (2.10.0). Update androidx.exifinterface:exifinterface (1.3.2).","title":"[1.1.1] - January 11, 2021"},{"location":"changelog/#110-november-24-2020","text":"Important : Change the CENTER and MATRIX ImageView scale types to resolve to OriginalSize . ( #587 ) This change only affects the implicit size resolution algorithm when the request's size isn't specified explicitly. This change was made to ensure that the visual result of an image request is consistent with ImageView.setImageResource / ImageView.setImageURI . To revert to the old behaviour set a ViewSizeResolver when constructing your request. Important : Return the display size from ViewSizeResolver if the view's layout param is WRAP_CONTENT . ( #562 ) Previously, we would only return the display size if the view has been fully laid out. This change makes the typical behaviour more consistent and intuitive. Add the ability to control alpha pre-multiplication. ( #569 ) Support preferring exact intrinsic size in CrossfadeDrawable . ( #585 ) Check for the full GIF header including version. ( #564 ) Add an empty bitmap pool implementation. ( #561 ) Make EventListener.Factory a functional interface. ( #575 ) Stabilize EventListener . ( #574 ) Add String overload for ImageRequest.Builder.placeholderMemoryCacheKey . Add @JvmOverloads to the ViewSizeResolver constructor. Fix: Mutate start/end drawables in CrossfadeDrawable . ( #572 ) Fix: Fix GIF not playing on second load. ( #577 ) Update Kotlin (1.4.20) and migrate to the kotlin-parcelize plugin. Update Coroutines (1.4.1).","title":"[1.1.0] - November 24, 2020"},{"location":"changelog/#100-october-22-2020","text":"Changes since 0.13.0 : - Add Context.imageLoader extension function. ( #534 ) - Add ImageLoader.executeBlocking extension function. ( #537 ) - Don't shutdown previous singleton image loader if replaced. ( #533 ) Changes since 1.0.0-rc3 : - Fix: Guard against missing/invalid ActivityManager. ( #541 ) - Fix: Allow OkHttp to cache unsuccessful responses. ( #551 ) - Update Kotlin to 1.4.10. - Update Okio to 2.9.0. - Update androidx.exifinterface:exifinterface to 1.3.1.","title":"[1.0.0] - October 22, 2020"},{"location":"changelog/#100-rc3-september-21-2020","text":"Revert using the -Xjvm-default=all compiler flag due to instability. This is a source compatible, but binary incompatible change from previous release candidate versions. Add Context.imageLoader extension function. ( #534 ) Add ImageLoader.executeBlocking extension function. ( #537 ) Don't shutdown previous singleton image loader if replaced. ( #533 ) Update AndroidX dependencies: androidx.exifinterface:exifinterface - 1.3.0","title":"[1.0.0-rc3] - September 21, 2020"},{"location":"changelog/#100-rc2-september-3-2020","text":"This release requires Kotlin 1.4.0 or above. All the changes present in 0.13.0 . Depend on the base Kotlin stdlib instead of stdlib-jdk8 .","title":"[1.0.0-rc2] - September 3, 2020"},{"location":"changelog/#0130-september-3-2020","text":"Important : Launch the Interceptor chain on the main thread by default. ( #513 ) This largely restores the behaviour from 0.11.0 and below where the memory cache would be checked synchronously on the main thread. To revert to using the same behaviour as 0.12.0 where the memory cache is checked on ImageRequest.dispatcher , set ImageLoader.Builder.launchInterceptorChainOnMainThread(false) . See launchInterceptorChainOnMainThread for more information. Fix: Fix potential memory leak if request is started on a ViewTarget in a detached fragment. ( #518 ) Fix: Use ImageRequest.context to load resource URIs. ( #517 ) Fix: Fix race condition that could cause subsequent requests to not be saved to the disk cache. ( #510 ) Fix: Use blockCountLong and blockSizeLong on API 18. Make ImageLoaderFactory a fun interface. Add ImageLoader.Builder.addLastModifiedToFileCacheKey which allows you to enable/disable adding the last modified timestamp to the memory cache key for an image loaded from a File . Update Kotlin to 1.4.0. Update Coroutines to 1.3.9. Update Okio to 2.8.0.","title":"[0.13.0] - September 3, 2020"},{"location":"changelog/#100-rc1-august-18-2020","text":"This release requires Kotlin 1.4.0 or above. Update Kotlin to 1.4.0 and enable -Xjvm-default=all . See here for how to enable -Xjvm-default=all in your build file. This generates Java 8 default methods for default Kotlin interface methods. Remove all existing deprecated methods in 0.12.0. Update Coroutines to 1.3.9.","title":"[1.0.0-rc1] - August 18, 2020"},{"location":"changelog/#0120-august-18-2020","text":"Breaking : LoadRequest and GetRequest have been replaced with ImageRequest : ImageLoader.execute(LoadRequest) - ImageLoader.enqueue(ImageRequest) ImageLoader.execute(GetRequest) - ImageLoader.execute(ImageRequest) ImageRequest implements equals / hashCode . Breaking : A number of classes were renamed and/or changed package: coil.request.RequestResult - coil.request.ImageResult coil.request.RequestDisposable - coil.request.Disposable coil.bitmappool.BitmapPool - coil.bitmap.BitmapPool coil.DefaultRequestOptions - coil.request.DefaultRequestOptions Breaking : SparseIntArraySet has been removed from the public API. Breaking : TransitionTarget no longer implements ViewTarget . Breaking : ImageRequest.Listener.onSuccess 's signature has changed to return an ImageResult.Metadata instead of just a DataSource . Breaking : Remove support for LoadRequest.aliasKeys . This API is better handled with direct read/write access to the memory cache. Important : Values in the memory cache are no longer resolved synchronously (if called from the main thread). This change was also necessary to support executing Interceptor s on a background dispatcher. This change also moves more work off the main thread, improving performance. Important : Mappers are now executed on a background dispatcher. As a side effect, automatic bitmap sampling is no longer automatically supported. To achieve the same effect, use the MemoryCache.Key of a previous request as the placeholderMemoryCacheKey of the subsequent request. See here for an example . The placeholderMemoryCacheKey API offers more freedom as you can \"link\" two image requests with different data (e.g. different URLs for small/large images). Important : Coil's ImageView extension functions have been moved from the coil.api package to the coil package. Use find + replace to refactor import coil.api.load - import coil.load . Unfortunately, it's not possible to use Kotlin's ReplaceWith functionality to replace imports. Important : Use standard crossfade if drawables are not the same image. Important : Prefer immutable bitmaps on API 24+. Important : MeasuredMapper has been deprecated in favour of the new Interceptor interface. See here for an example of how to convert a MeasuredMapper into an Interceptor . Interceptor is a much less restrictive API that allows for a wider range of custom logic. Important : ImageRequest.data is now not null. If you create an ImageRequest without setting its data it will return NullRequestData as its data. New : Add support for direct read/write access to an ImageLoader 's MemoryCache . See the docs for more information. New : Add support for Interceptor s. See the docs for more information. Coil's Interceptor design is heavily inspired by OkHttp 's! New : Add the ability to enable/disable bitmap pooling using ImageLoader.Builder.bitmapPoolingEnabled . Bitmap pooling is most effective on API 23 and below, but may still be benificial on API 24 and up (by eagerly calling Bitmap.recycle ). New : Support thread interruption while decoding. Fix parsing multiple segments in content-type header. Rework bitmap reference counting to be more robust. Fix WebP decoding on API 19 devices. Expose FetchResult and DecodeResult in the EventListener API. Compile with SDK 30. Update Coroutines to 1.3.8. Update OkHttp to 3.12.12. Update Okio to 2.7.0. Update AndroidX dependencies: androidx.appcompat:appcompat-resources - 1.2.0 androidx.core:core-ktx - 1.3.1","title":"[0.12.0] - August 18, 2020"},{"location":"changelog/#0110-may-14-2020","text":"Breaking : This version removes all existing deprecated functions. This enables removing Coil's ContentProvider so it doesn't run any code at app startup. Breaking : Convert SparseIntArraySet.size to a val. ( #380 ) Breaking : Move Parameters.count() to an extension function. ( #403 ) Breaking : Make BitmapPool.maxSize an Int. ( #404 ) Important : Make ImageLoader.shutdown() optional (similar to OkHttpClient ). ( #385 ) Fix: Fix AGP 4.1 compatibility. ( #386 ) Fix: Fix measuring GONE views. ( #397 ) Reduce the default memory cache size to 20%. ( #390 ) To restore the existing behaviour set ImageLoaderBuilder.availableMemoryPercentage(0.25) when creating your ImageLoader . Update Coroutines to 1.3.6. Update OkHttp to 3.12.11.","title":"[0.11.0] - May 14, 2020"},{"location":"changelog/#0101-april-26-2020","text":"Fix OOM when decoding large PNGs on API 23 and below. ( #372 ). This disables decoding EXIF orientation for PNG files. PNG EXIF orientation is very rarely used and reading PNG EXIF data (even if it's empty) requires buffering the entire file into memory, which is bad for performance. Minor Java compatibility improvements to SparseIntArraySet . Update Okio to 2.6.0.","title":"[0.10.1] - April 26, 2020"},{"location":"changelog/#0100-april-20-2020","text":"","title":"[0.10.0] - April 20, 2020"},{"location":"changelog/#highlights","text":"This version deprecates most of the DSL API in favour of using the builders directly. Here's what the change looks like: // 0.9.5 (old) val imageLoader = ImageLoader ( context ) { bitmapPoolPercentage ( 0.5 ) crossfade ( true ) } val disposable = imageLoader . load ( context , https://www.example.com/image.jpg ) { target ( imageView ) } val drawable = imageLoader . get ( https://www.example.com/image.jpg ) { size ( 512 , 512 ) } // 0.10.0 (new) val imageLoader = ImageLoader . Builder ( context ) . bitmapPoolPercentage ( 0.5 ) . crossfade ( true ) . build () val request = LoadRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . target ( imageView ) . build () val disposable = imageLoader . execute ( request ) val request = GetRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . size ( 512 , 512 ) . build () val drawable = imageLoader . execute ( request ). drawable If you're using the io.coil-kt:coil artifact, you can call Coil.execute(request) to execute the request with the singleton ImageLoader . ImageLoader s now have a weak reference memory cache that tracks weak references to images once they're evicted from the strong reference memory cache. This means an image will always be returned from an ImageLoader 's memory cache if there's still a strong reference to it. Generally, this should make the memory cache much more predictable and increase its hit rate. This behaviour can be enabled/disabled with ImageLoaderBuilder.trackWeakReferences . Add a new artifact, io.coil-kt:coil-video , to decode specific frames from a video file. Read more here . Add a new EventListener API for tracking metrics. Add ImageLoaderFactory which can be implemented by your Application to simplify singleton initialization.","title":"Highlights"},{"location":"changelog/#full-release-notes","text":"Important : Deprecate DSL syntax in favour of builder syntax. ( #267 ) Important : Deprecate Coil and ImageLoader extension functions. ( #322 ) Breaking : Return sealed RequestResult type from ImageLoader.execute(GetRequest) . ( #349 ) Breaking : Rename ExperimentalCoil to ExperimentalCoilApi . Migrate from @Experimental to @RequiresOptIn . ( #306 ) Breaking : Replace CoilLogger with Logger interface. ( #316 ) Breaking : Rename destWidth/destHeight to dstWidth/dstHeight. ( #275 ) Breaking : Re-arrange MovieDrawable 's constructor params. ( #272 ) Breaking : Request.Listener 's methods now receive the full Request object instead of just its data. Breaking : GetRequestBuilder now requires a Context in its constructor. Breaking : Several properties on Request are now nullable. Behaviour change : Include parameter values in the cache key by default. ( #319 ) Behaviour change : Slightly adjust Request.Listener.onStart() timing to be called immediately after Target.onStart() . ( #348 ) New : Add WeakMemoryCache implementation. ( #295 ) New : Add coil-video to support decoding video frames. ( #122 ) New : Introduce EventListener . ( #314 ) New : Introduce ImageLoaderFactory . ( #311 ) New : Support animated HEIF image sequences on Android 11. ( #297 ) New : Improve Java compatibility. ( #262 ) New : Support setting a default CachePolicy . ( #307 ) New : Support setting a default Bitmap.Config . ( #342 ) New : Add ImageLoader.invalidate(key) to clear a single memory cache item ( #55 ) New : Add debug logs to explain why a cached image is not reused. ( #346 ) New : Support error and fallback drawables for get requests. Fix: Fix memory cache miss when Transformation reduces input bitmap's size. ( #357 ) Fix: Ensure radius is below RenderScript max in BlurTransformation. ( #291 ) Fix: Fix decoding high colour depth images. ( #358 ) Fix: Disable ImageDecoderDecoder crash work-around on Android 11 and above. ( #298 ) Fix: Fix failing to read EXIF data on pre-API 23. ( #331 ) Fix: Fix incompatibility with Android R SDK. ( #337 ) Fix: Only enable inexact size if ImageView has a matching SizeResolver . ( #344 ) Fix: Allow cached images to be at most one pixel off requested size. ( #360 ) Fix: Skip crossfade transition if view is not visible. ( #361 ) Deprecate CoilContentProvider . ( #293 ) Annotate several ImageLoader methods with @MainThread . Avoid creating a LifecycleCoroutineDispatcher if the lifecycle is currently started. ( #356 ) Use full package name for OriginalSize.toString() . Preallocate when decoding software bitmap. ( #354 ) Update Kotlin to 1.3.72. Update Coroutines to 1.3.5. Update OkHttp to 3.12.10. Update Okio to 2.5.0. Update AndroidX dependencies: androidx.exifinterface:exifinterface - 1.2.0","title":"Full Release Notes"},{"location":"changelog/#095-february-6-2020","text":"Fix: Ensure a view is attached before checking if it is hardware accelerated. This fixes a case where requesting a hardware bitmap could miss the memory cache. Update AndroidX dependencies: androidx.core:core-ktx - 1.2.0","title":"[0.9.5] - February 6, 2020"},{"location":"changelog/#094-february-3-2020","text":"Fix: Respect aspect ratio when downsampling in ImageDecoderDecoder. Thanks @zhanghai. Previously bitmaps would be returned from the memory cache as long as their config was greater than or equal to the config specified in the request. For example, if you requested an ARGB_8888 bitmap, it would be possible to have a RGBA_F16 bitmap returned to you from the memory cache. Now, the cached config and the requested config must be equal. Make scale and durationMillis public in CrossfadeDrawable and CrossfadeTransition .","title":"[0.9.4] - February 3, 2020"},{"location":"changelog/#093-february-1-2020","text":"Fix: Translate child drawable inside ScaleDrawable to ensure it is centered. Fix: Fix case where GIFs and SVGs would not fill bounds completely. Defer calling HttpUrl.get() to background thread. Improve BitmapFactory null bitmap error message. Add 3 devices to hardware bitmap blacklist. ( #264 ) Update AndroidX dependencies: androidx.lifecycle:lifecycle-common-java8 - 2.2.0","title":"[0.9.3] - February 1, 2020"},{"location":"changelog/#092-january-19-2020","text":"Fix: Fix decoding GIFs on pre-API 19. Thanks @mario. Fix: Fix rasterized vector drawables not being marked as sampled. Fix: Throw exception if Movie dimensions are = 0. Fix: Fix CrossfadeTransition not being resumed for a memory cache event. Fix: Prevent returning hardware bitmaps to all target methods if disallowed. Fix: Fix MovieDrawable not positioning itself in the center of its bounds. Remove automatic scaling from CrossfadeDrawable. Make BitmapPool.trimMemory public. Wrap AnimatedImageDrawable in a ScaleDrawable to ensure it fills its bounds. Add @JvmOverloads to RequestBuilder.setParameter. Set an SVG's view box to its size if the view box is not set. Pass state and level changes to CrossfadeDrawable children. Update OkHttp to 3.12.8.","title":"[0.9.2] - January 19, 2020"},{"location":"changelog/#091-december-30-2019","text":"Fix: Fix crash when calling LoadRequestBuilder.crossfade(false) .","title":"[0.9.1] - December 30, 2019"},{"location":"changelog/#090-december-30-2019","text":"Breaking : Transformation.transform now includes a Size parameter. This is to support transformations that change the size of the output Bitmap based on the size of the Target . Requests with transformations are now also exempt from image sampling . Breaking : Transformation s are now applied to any type of Drawable . Before, Transformation s would be skipped if the input Drawable was not a BitmapDrawable . Now, Drawable s are rendered to a Bitmap before applying the Transformation s. Breaking : Passing null data to ImageLoader.load is now treated as an error and calls Target.onError and Request.Listener.onError with a NullRequestDataException . This change was made to support setting a fallback drawable if data is null . Previously the request was silently ignored. Breaking : RequestDisposable.isDisposed is now a val . New : Support for custom transitions. See here for more info . Transitions are marked as experimental as the API is incubating. New : Add RequestDisposable.await to support suspending while a LoadRequest is in progress. New : Support setting a fallback drawable when request data is null. New : Add Precision . This makes the size of the output Drawable exact while enabling scaling optimizations for targets that support scaling (e.g. ImageViewTarget ). See its documentation for more information. New : Add RequestBuilder.aliasKeys to support matching multiple cache keys. Fix: Make RequestDisposable thread safe. Fix: RoundedCornersTransformation now crops to the size of the target then rounds the corners. Fix: CircleCropTransformation now crops from the center. Fix: Add several devices to the hardware bitmap blacklist . Fix: Preserve aspect ratio when converting a Drawable to a Bitmap. Fix: Fix possible memory cache miss with Scale.FIT . Fix: Ensure Parameters iteration order is deterministic. Fix: Defensive copy when creating Parameters and ComponentRegistry. Fix: Ensure RealBitmapPool's maxSize = 0. Fix: Show the start drawable if CrossfadeDrawable is not animating or done. Fix: Adjust CrossfadeDrawable to account for children with undefined intrinsic size. Fix: Fix MovieDrawable not scaling properly. Update Kotlin to 1.3.61. Update Kotlin Coroutines to 1.3.3. Update Okio to 2.4.3. Update AndroidX dependencies: androidx.exifinterface:exifinterface - 1.1.0","title":"[0.9.0] - December 30, 2019"},{"location":"changelog/#080-october-22-2019","text":"Breaking : SvgDrawable has been removed. Instead, SVGs are now prerendered to BitmapDrawable s by SvgDecoder . This makes SVGs significantly less expensive to render on the main thread . Also SvgDecoder now requires a Context in its constructor. Breaking : SparseIntArraySet extension functions have moved to the coil.extension package. New : Support setting per-request network headers. See here for more info . New : Add new Parameters API to support passing custom data through the image pipeline. New : Support individual corner radii in RoundedCornersTransformation. Thanks @khatv911. New : Add ImageView.clear() to support proactively freeing resources. New : Support loading resources from other packages. New : Add subtractPadding attribute to ViewSizeResolver to enable/disable subtracting a view's padding when measuring. New : Improve HttpUrlFetcher MIME type detection. New : Add Animatable2Compat support to MovieDrawable and CrossfadeDrawable. New : Add RequestBuilder * .repeatCount to set the repeat count for a GIF. New : Add BitmapPool creation to the public API. New : Annotate Request.Listener methods with @MainThread . Fix: Make CoilContentProvider visible for testing. Fix: Include night mode in the resource cache key. Fix: Work around ImageDecoder native crash by temporarily writing the source to disk. Fix: Correctly handle contact display photo uris. Fix: Pass tint to CrossfadeDrawable's children. Fix: Fix several instances of not closing sources. Fix: Add a blacklist of devices with broken/incomplete hardware bitmap implementations. Compile against SDK 29. Update Kotlin Coroutines to 1.3.2. Update OkHttp to 3.12.6. Update Okio to 2.4.1. Change appcompat-resources from compileOnly to implementation for coil-base .","title":"[0.8.0] - October 22, 2019"},{"location":"changelog/#070-september-8-2019","text":"Breaking : ImageLoaderBuilder.okHttpClient(OkHttpClient.Builder.() - Unit) is now ImageLoaderBuilder.okHttpClient(() - OkHttpClient) . The initializer is also now called lazily on a background thread. If you set a custom OkHttpClient you must set OkHttpClient.cache to enable disk caching. If you don't set a custom OkHttpClient , Coil will create the default OkHttpClient which has disk caching enabled. The default Coil cache can be created using CoilUtils.createDefaultCache(context) . e.g.: val imageLoader = ImageLoader ( context ) { okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( context )) . build () } } Breaking : Fetcher.key no longer has a default implementation. Breaking : Previously, only the first applicable Mapper would be called. Now, all applicable Mapper s will be called. No API changes. Breaking : Minor named parameter renaming: url - uri , factory - initializer . New : coil-svg artifact, which has an SvgDecoder that supports automatically decoding SVGs. Powered by AndroidSVG . Thanks @rharter. New : load(String) and get(String) now accept any of the supported Uri schemes. e.g. You can now do imageView.load(\"file:///path/to/file.jpg\") . New : Refactor ImageLoader to use Call.Factory instead of OkHttpClient . This allows lazy initialization of the networking resources using ImageLoaderBuilder.okHttpClient { OkHttpClient() } . Thanks @ZacSweers. New : RequestBuilder.decoder to explicitly set the decoder for a request. New : ImageLoaderBuilder.allowHardware to enable/disable hardware bitmaps by default for an ImageLoader. New : Support software rendering in ImageDecoderDecoder. Fix: Multiple bugs with loading vector drawables. Fix: Support WRAP_CONTENT View dimensions. Fix: Support parsing EXIF data longer than 8192 bytes. Fix: Don't stretch drawables with different aspect ratios when crossfading. Fix: Guard against network observer failing to register due to exception. Fix: Fix divide by zero error in MovieDrawable. Thanks @R12rus. Fix: Support nested Android asset files. Thanks @JaCzekanski. Fix: Guard against running out of file descriptors on Android O and O_MR1. Fix: Don't crash when disabling memory cache. Thanks @hansenji. Fix: Ensure Target.cancel is always called from the main thread. Update Kotlin to 1.3.50. Update Kotlin Coroutines to 1.3.0. Update OkHttp to 3.12.4. Update Okio to 2.4.0. Update AndroidX dependencies to the latest stable versions: androidx.appcompat:appcompat - 1.1.0 androidx.core:core-ktx - 1.1.0 androidx.lifecycle:lifecycle-common-java8 - 2.1.0 Replace appcompat with appcompat-resources as an optional compileOnly dependency. appcompat-resources is a much smaller artifact.","title":"[0.7.0] - September 8, 2019"},{"location":"changelog/#061-august-16-2019","text":"New: Add transformations(List Transformation ) to RequestBuilder. Fix: Add the last modified date to the cache key for file uris. Fix: Ensure View dimensions are evaluated to at least 1px. Fix: Clear MovieDrawable's canvas between frames. Fix: Open assets correctly.","title":"[0.6.1] - August 16, 2019"},{"location":"changelog/#060-august-12-2019","text":"Initial release.","title":"[0.6.0] - August 12, 2019"},{"location":"code_of_conduct/","text":"Code of Conduct Our Pledge In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation. Our Standards Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting Our Responsibilities Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful. Scope This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers. Enforcement Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at colin at colinwhite.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership. Attribution This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Code of Conduct"},{"location":"code_of_conduct/#code-of-conduct","text":"","title":"Code of Conduct"},{"location":"code_of_conduct/#our-pledge","text":"In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.","title":"Our Pledge"},{"location":"code_of_conduct/#our-standards","text":"Examples of behavior that contributes to creating a positive environment include: Using welcoming and inclusive language Being respectful of differing viewpoints and experiences Gracefully accepting constructive criticism Focusing on what is best for the community Showing empathy towards other community members Examples of unacceptable behavior by participants include: The use of sexualized language or imagery and unwelcome sexual attention or advances Trolling, insulting/derogatory comments, and personal or political attacks Public or private harassment Publishing others' private information, such as a physical or electronic address, without explicit permission Other conduct which could reasonably be considered inappropriate in a professional setting","title":"Our Standards"},{"location":"code_of_conduct/#our-responsibilities","text":"Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior. Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.","title":"Our Responsibilities"},{"location":"code_of_conduct/#scope","text":"This Code of Conduct applies within all project spaces, and it also applies when an individual is representing the project or its community in public spaces. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.","title":"Scope"},{"location":"code_of_conduct/#enforcement","text":"Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at colin at colinwhite.me. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately. Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.","title":"Enforcement"},{"location":"code_of_conduct/#attribution","text":"This Code of Conduct is adapted from the Contributor Covenant , version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html For answers to common questions about this code of conduct, see https://www.contributor-covenant.org/faq","title":"Attribution"},{"location":"contributing/","text":"Contributing In an effort to keep the library small and stable, please keep contributions limited to bug fixes, documentation improvements, and test improvements. Issues that are tagged as help wanted are great issues to get started contributing to Coil. If you have a new feature idea, please create an enhancement request so it can be discussed or build it in an external library. If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it. If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code passes all tests by running ./test.sh . Modified from OkHttp's Contributing section.","title":"Contributing"},{"location":"contributing/#contributing","text":"In an effort to keep the library small and stable, please keep contributions limited to bug fixes, documentation improvements, and test improvements. Issues that are tagged as help wanted are great issues to get started contributing to Coil. If you have a new feature idea, please create an enhancement request so it can be discussed or build it in an external library. If you\u2019ve found a bug, please contribute a failing test case so we can study and fix it. If you would like to contribute code you can do so through GitHub by forking the repository and sending a pull request. When submitting code, please make every effort to follow existing conventions and style in order to keep the code as readable as possible. Please also make sure your code passes all tests by running ./test.sh . Modified from OkHttp's Contributing section.","title":"Contributing"},{"location":"faq/","text":"FAQ Have a question that isn't part of the FAQ? Check StackOverflow with the tag #coil or search our Github issues . Can Coil be used with Java projects or mixed Kotlin/Java projects? Yes! Read here . How do I preload an image? Read here . How do I set up disk caching? Read here . How do I enable logging? Set logger(DebugLogger()) when constructing your ImageLoader . Note DebugLogger should only be used in debug builds. How do I get development snapshots? Add the snapshots repository to your list of repositories: Gradle ( .gradle ): allprojects { repositories { maven { url https://oss.sonatype.org/content/repositories/snapshots/ } } } Gradle Kotlin DSL ( .gradle.kts ): allprojects { repositories { maven ( https://oss.sonatype.org/content/repositories/snapshots ) } } Then depend on the same artifacts with the latest snapshot version . Note Snapshots are deployed for each new commit on master that passes CI. They can potentially contain breaking changes or may be unstable. Use at your own risk.","title":"FAQ"},{"location":"faq/#faq","text":"Have a question that isn't part of the FAQ? Check StackOverflow with the tag #coil or search our Github issues .","title":"FAQ"},{"location":"faq/#can-coil-be-used-with-java-projects-or-mixed-kotlinjava-projects","text":"Yes! Read here .","title":"Can Coil be used with Java projects or mixed Kotlin/Java projects?"},{"location":"faq/#how-do-i-preload-an-image","text":"Read here .","title":"How do I preload an image?"},{"location":"faq/#how-do-i-set-up-disk-caching","text":"Read here .","title":"How do I set up disk caching?"},{"location":"faq/#how-do-i-enable-logging","text":"Set logger(DebugLogger()) when constructing your ImageLoader . Note DebugLogger should only be used in debug builds.","title":"How do I enable logging?"},{"location":"faq/#how-do-i-get-development-snapshots","text":"Add the snapshots repository to your list of repositories: Gradle ( .gradle ): allprojects { repositories { maven { url https://oss.sonatype.org/content/repositories/snapshots/ } } } Gradle Kotlin DSL ( .gradle.kts ): allprojects { repositories { maven ( https://oss.sonatype.org/content/repositories/snapshots ) } } Then depend on the same artifacts with the latest snapshot version . Note Snapshots are deployed for each new commit on master that passes CI. They can potentially contain breaking changes or may be unstable. Use at your own risk.","title":"How do I get development snapshots?"},{"location":"getting_started/","text":"Getting Started Artifacts Coil has 5 artifacts published to mavenCentral() : io.coil-kt:coil : The default artifact which depends on io.coil-kt:coil-base and includes the Coil singleton and the ImageView extension functions. io.coil-kt:coil-base : The base artifact which does not include the Coil singleton and the ImageView extension functions. io.coil-kt:coil-gif : Includes two decoders to support decoding GIFs. See GIFs for more details. io.coil-kt:coil-svg : Includes a decoder to support decoding SVGs. See SVGs for more details. io.coil-kt:coil-video : Includes two fetchers to support fetching and decoding frames from any of Android's supported video formats . See videos for more details. You should depend on io.coil-kt:coil-base and not io.coil-kt:coil if either of the following is true: You are writing a library that depends on Coil. This is to avoid opting your users into the singleton. You want to use dependency injection to inject your ImageLoader instance(s). If you need transformations that aren't part of the base Coil artifact, check out the third-party coil-transformations library hosted here . Java 8 Coil requires Java 8 bytecode . To enable this feature add the following to your Gradle build script: Gradle ( .gradle ): android { compileOptions { sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } kotlinOptions { jvmTarget = 1.8 } } Gradle Kotlin DSL ( .gradle.kts ): android { compileOptions { sourceCompatibility = JavaVersion . VERSION_1_8 targetCompatibility = JavaVersion . VERSION_1_8 } kotlinOptions { jvmTarget = 1.8 } } Image Loaders ImageLoader s are service classes that execute ImageRequest s. ImageLoader s handle caching, data fetching, image decoding, request management, bitmap pooling, memory management, and more. New instances can be created and configured using a builder: val imageLoader = ImageLoader . Builder ( context ) . availableMemoryPercentage ( 0.25 ) . crossfade ( true ) . build () Coil performs best when you create a single ImageLoader and share it throughout your app. This is because each ImageLoader has its own memory cache, bitmap pool, and network observer. It's recommended, though not required, to call shutdown when you've finished using an image loader. Calling shutdown preemptively frees its memory and cleans up any observers. If you only create and use a single ImageLoader , you do not need to shut it down as it will be freed when your app is killed. Image Requests ImageRequest s are value classes that are executed by ImageLoader s. They describe where an image should be loaded from, how it should be loaded, and any extra parameters. An ImageLoader has two methods that can execute a request: enqueue : Enqueues the ImageRequest to be executed asynchronously on a background thread. execute : Executes the ImageRequest in the current coroutine and returns an ImageResult . All requests should set data (i.e. url, uri, file, drawable resource, etc.). This is what the ImageLoader will use to decide where to fetch the image data from. If you do not set data , it will default to NullRequestData . Additionally, you likely want to set a target when enqueuing a request. It's optional, but the target is what will receive the loaded placeholder/success/error drawables. Executed requests return an ImageResult which has the success/error drawable. Here's an example: // enqueue val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . target ( imageView ) . build () val disposable = imageLoader . enqueue ( request ) // execute val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . build () val result = imageLoader . execute ( request ) Singleton If you are using the io.coil-kt:coil artifact, you can set the singleton ImageLoader instance by either: Implementing ImageLoaderFactory on your Application class (prefer this method): class MyApplication : Application (), ImageLoaderFactory { override fun newImageLoader (): ImageLoader { return ImageLoader . Builder ( applicationContext ) . crossfade ( true ) . okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( applicationContext )) . build () } . build () } } Or calling Coil.setImageLoader : val imageLoader = ImageLoader . Builder ( context ) . crossfade ( true ) . okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( context )) . build () } . build () Coil . setImageLoader ( imageLoader ) The singleton ImageLoader can be retrieved using the Context.imageLoader extension function: val imageLoader = context . imageLoader Setting the singleton ImageLoader is optional. If you don't set one, Coil will lazily create an ImageLoader with the default values. If you're using the io.coil-kt:coil-base artifact, you should create your own ImageLoader instance(s) and inject them throughout your app with dependency injection. Read more about dependency injection here . Note If you set a custom OkHttpClient , you must set a cache implementation or the ImageLoader will have no disk cache. A default Coil cache instance can be created using CoilUtils.createDefaultCache . ImageView Extension Functions The io.coil-kt:coil artifact provides a set of type-safe ImageView extension functions. Here's an example for loading a URL into an ImageView : imageView . load ( https://www.example.com/image.jpg ) The above call is equivalent to: val imageLoader = imageView . context . imageLoader val request = ImageRequest . Builder ( imageView . context ) . data ( https://www.example.com/image.jpg ) . target ( imageView ) . build () imageLoader . enqueue ( request ) ImageView.load calls can be configured with an optional trailing lambda parameter: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } See the docs here and here for more information. Supported Data Types The base data types that are supported by all ImageLoader instances are: String (mapped to a Uri) HttpUrl Uri ( android.resource , content , file , http , and https schemes only) File @DrawableRes Int Drawable Bitmap Preloading To preload an image into memory, enqueue or execute an ImageRequest without a Target : val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) // Optional, but setting a ViewSizeResolver will conserve memory by limiting the size the image should be preloaded into memory at. . size ( ViewSizeResolver ( imageView )) . build () imageLoader . enqueue ( request ) To preload a network image only into the disk cache, disable the memory cache for the request: val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . memoryCachePolicy ( CachePolicy . DISABLED ) . build () imageLoader . enqueue ( request ) Cancelling Requests ImageRequest s will be automatically cancelled in the following cases: request.lifecycle reaches the DESTROYED state. request.target is a ViewTarget and its View is detached. Additionally, ImageLoader.enqueue returns a Disposable , which can be used to dispose the request (which cancels it and frees its associated resources): val disposable = imageView . load ( https://www.example.com/image.jpg ) // Cancel the request. disposable . dispose () Memory Cache Each ImageLoader has its own MemoryCache of recently loaded images. To read/write a Bitmap to the memory cache, you need a MemoryCache.Key . There are two ways to get a MemoryCache.Key : Create a MemoryCache.Key using its String constructor: MemoryCache.Key(\"my_cache_key\") Get the MemoryCache.Key from an executed request: // If using the ImageLoader singleton val memoryCacheKey = imageView . metadata . memoryCacheKey // Enqueue val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . target ( imageView ) . listener { _ , metadata - val memoryCacheKey = metadata . memoryCacheKey } . build () imageLoader . enqueue ( request ) // Execute val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . build () val result = imageLoader . execute ( request ) as SuccessResult val memoryCacheKey = result . metadata . memoryCacheKey Once you have the memory cache key, you can read/write to the memory cache synchronously: // Get val bitmap : Bitmap ? = imageLoader . memoryCache [ memoryCacheKey ] // Set imageLoader . memoryCache [ memoryCacheKey ] = bitmap","title":"Getting Started"},{"location":"getting_started/#getting-started","text":"","title":"Getting Started"},{"location":"getting_started/#artifacts","text":"Coil has 5 artifacts published to mavenCentral() : io.coil-kt:coil : The default artifact which depends on io.coil-kt:coil-base and includes the Coil singleton and the ImageView extension functions. io.coil-kt:coil-base : The base artifact which does not include the Coil singleton and the ImageView extension functions. io.coil-kt:coil-gif : Includes two decoders to support decoding GIFs. See GIFs for more details. io.coil-kt:coil-svg : Includes a decoder to support decoding SVGs. See SVGs for more details. io.coil-kt:coil-video : Includes two fetchers to support fetching and decoding frames from any of Android's supported video formats . See videos for more details. You should depend on io.coil-kt:coil-base and not io.coil-kt:coil if either of the following is true: You are writing a library that depends on Coil. This is to avoid opting your users into the singleton. You want to use dependency injection to inject your ImageLoader instance(s). If you need transformations that aren't part of the base Coil artifact, check out the third-party coil-transformations library hosted here .","title":"Artifacts"},{"location":"getting_started/#java-8","text":"Coil requires Java 8 bytecode . To enable this feature add the following to your Gradle build script: Gradle ( .gradle ): android { compileOptions { sourceCompatibility JavaVersion . VERSION_1_8 targetCompatibility JavaVersion . VERSION_1_8 } kotlinOptions { jvmTarget = 1.8 } } Gradle Kotlin DSL ( .gradle.kts ): android { compileOptions { sourceCompatibility = JavaVersion . VERSION_1_8 targetCompatibility = JavaVersion . VERSION_1_8 } kotlinOptions { jvmTarget = 1.8 } }","title":"Java 8"},{"location":"getting_started/#image-loaders","text":"ImageLoader s are service classes that execute ImageRequest s. ImageLoader s handle caching, data fetching, image decoding, request management, bitmap pooling, memory management, and more. New instances can be created and configured using a builder: val imageLoader = ImageLoader . Builder ( context ) . availableMemoryPercentage ( 0.25 ) . crossfade ( true ) . build () Coil performs best when you create a single ImageLoader and share it throughout your app. This is because each ImageLoader has its own memory cache, bitmap pool, and network observer. It's recommended, though not required, to call shutdown when you've finished using an image loader. Calling shutdown preemptively frees its memory and cleans up any observers. If you only create and use a single ImageLoader , you do not need to shut it down as it will be freed when your app is killed.","title":"Image Loaders"},{"location":"getting_started/#image-requests","text":"ImageRequest s are value classes that are executed by ImageLoader s. They describe where an image should be loaded from, how it should be loaded, and any extra parameters. An ImageLoader has two methods that can execute a request: enqueue : Enqueues the ImageRequest to be executed asynchronously on a background thread. execute : Executes the ImageRequest in the current coroutine and returns an ImageResult . All requests should set data (i.e. url, uri, file, drawable resource, etc.). This is what the ImageLoader will use to decide where to fetch the image data from. If you do not set data , it will default to NullRequestData . Additionally, you likely want to set a target when enqueuing a request. It's optional, but the target is what will receive the loaded placeholder/success/error drawables. Executed requests return an ImageResult which has the success/error drawable. Here's an example: // enqueue val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . target ( imageView ) . build () val disposable = imageLoader . enqueue ( request ) // execute val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . build () val result = imageLoader . execute ( request )","title":"Image Requests"},{"location":"getting_started/#singleton","text":"If you are using the io.coil-kt:coil artifact, you can set the singleton ImageLoader instance by either: Implementing ImageLoaderFactory on your Application class (prefer this method): class MyApplication : Application (), ImageLoaderFactory { override fun newImageLoader (): ImageLoader { return ImageLoader . Builder ( applicationContext ) . crossfade ( true ) . okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( applicationContext )) . build () } . build () } } Or calling Coil.setImageLoader : val imageLoader = ImageLoader . Builder ( context ) . crossfade ( true ) . okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( context )) . build () } . build () Coil . setImageLoader ( imageLoader ) The singleton ImageLoader can be retrieved using the Context.imageLoader extension function: val imageLoader = context . imageLoader Setting the singleton ImageLoader is optional. If you don't set one, Coil will lazily create an ImageLoader with the default values. If you're using the io.coil-kt:coil-base artifact, you should create your own ImageLoader instance(s) and inject them throughout your app with dependency injection. Read more about dependency injection here . Note If you set a custom OkHttpClient , you must set a cache implementation or the ImageLoader will have no disk cache. A default Coil cache instance can be created using CoilUtils.createDefaultCache .","title":"Singleton"},{"location":"getting_started/#imageview-extension-functions","text":"The io.coil-kt:coil artifact provides a set of type-safe ImageView extension functions. Here's an example for loading a URL into an ImageView : imageView . load ( https://www.example.com/image.jpg ) The above call is equivalent to: val imageLoader = imageView . context . imageLoader val request = ImageRequest . Builder ( imageView . context ) . data ( https://www.example.com/image.jpg ) . target ( imageView ) . build () imageLoader . enqueue ( request ) ImageView.load calls can be configured with an optional trailing lambda parameter: imageView . load ( https://www.example.com/image.jpg ) { crossfade ( true ) placeholder ( R . drawable . image ) transformations ( CircleCropTransformation ()) } See the docs here and here for more information.","title":"ImageView Extension Functions"},{"location":"getting_started/#supported-data-types","text":"The base data types that are supported by all ImageLoader instances are: String (mapped to a Uri) HttpUrl Uri ( android.resource , content , file , http , and https schemes only) File @DrawableRes Int Drawable Bitmap","title":"Supported Data Types"},{"location":"getting_started/#preloading","text":"To preload an image into memory, enqueue or execute an ImageRequest without a Target : val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) // Optional, but setting a ViewSizeResolver will conserve memory by limiting the size the image should be preloaded into memory at. . size ( ViewSizeResolver ( imageView )) . build () imageLoader . enqueue ( request ) To preload a network image only into the disk cache, disable the memory cache for the request: val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . memoryCachePolicy ( CachePolicy . DISABLED ) . build () imageLoader . enqueue ( request )","title":"Preloading"},{"location":"getting_started/#cancelling-requests","text":"ImageRequest s will be automatically cancelled in the following cases: request.lifecycle reaches the DESTROYED state. request.target is a ViewTarget and its View is detached. Additionally, ImageLoader.enqueue returns a Disposable , which can be used to dispose the request (which cancels it and frees its associated resources): val disposable = imageView . load ( https://www.example.com/image.jpg ) // Cancel the request. disposable . dispose ()","title":"Cancelling Requests"},{"location":"getting_started/#memory-cache","text":"Each ImageLoader has its own MemoryCache of recently loaded images. To read/write a Bitmap to the memory cache, you need a MemoryCache.Key . There are two ways to get a MemoryCache.Key : Create a MemoryCache.Key using its String constructor: MemoryCache.Key(\"my_cache_key\") Get the MemoryCache.Key from an executed request: // If using the ImageLoader singleton val memoryCacheKey = imageView . metadata . memoryCacheKey // Enqueue val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . target ( imageView ) . listener { _ , metadata - val memoryCacheKey = metadata . memoryCacheKey } . build () imageLoader . enqueue ( request ) // Execute val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . build () val result = imageLoader . execute ( request ) as SuccessResult val memoryCacheKey = result . metadata . memoryCacheKey Once you have the memory cache key, you can read/write to the memory cache synchronously: // Get val bitmap : Bitmap ? = imageLoader . memoryCache [ memoryCacheKey ] // Set imageLoader . memoryCache [ memoryCacheKey ] = bitmap","title":"Memory Cache"},{"location":"gifs/","text":"Gifs Unlike Glide, GIFs are not supported by default. However, Coil has an extension library to support them. To add GIF support, import the extension library: implementation ( io.coil-kt:coil-gif:1.2.0 ) And add the decoders to your component registry when constructing your ImageLoader : val imageLoader = ImageLoader . Builder ( context ) . componentRegistry { if ( SDK_INT = 28 ) { add ( ImageDecoderDecoder ( context )) } else { add ( GifDecoder ()) } } . build () And that's it! The ImageLoader will automatically detect any GIFs using their file headers and decode them correctly. To transform the pixel data of each frame of a GIF, see AnimatedTransformation . Note Coil includes two separate decoders to support decoding GIFs. GifDecoder supports all API levels, but is slower. ImageDecoderDecoder is powered by Android's new ImageDecoder API which is only available on API 28 and above. ImageDecoderDecoder is faster than GifDecoder and supports decoding animated WebP images and animated HEIF image sequences.","title":"GIFs"},{"location":"gifs/#gifs","text":"Unlike Glide, GIFs are not supported by default. However, Coil has an extension library to support them. To add GIF support, import the extension library: implementation ( io.coil-kt:coil-gif:1.2.0 ) And add the decoders to your component registry when constructing your ImageLoader : val imageLoader = ImageLoader . Builder ( context ) . componentRegistry { if ( SDK_INT = 28 ) { add ( ImageDecoderDecoder ( context )) } else { add ( GifDecoder ()) } } . build () And that's it! The ImageLoader will automatically detect any GIFs using their file headers and decode them correctly. To transform the pixel data of each frame of a GIF, see AnimatedTransformation . Note Coil includes two separate decoders to support decoding GIFs. GifDecoder supports all API levels, but is slower. ImageDecoderDecoder is powered by Android's new ImageDecoder API which is only available on API 28 and above. ImageDecoderDecoder is faster than GifDecoder and supports decoding animated WebP images and animated HEIF image sequences.","title":"Gifs"},{"location":"image_loaders/","text":"Image Loaders ImageLoader s are service objects that execute ImageRequest s. They handle caching, data fetching, image decoding, request management, bitmap pooling, memory management, and more. New instances can be created and configured using a builder: val imageLoader = ImageLoader . Builder ( context ) . availableMemoryPercentage ( 0.25 ) . crossfade ( true ) . build () Coil performs best when you create a single ImageLoader and share it throughout your app. This is because each ImageLoader has its own memory cache, bitmap pool, and network observer. It's recommended, though not required, to call shutdown when you've finished using an image loader. This preemptively frees its memory and cleans up any observers. If you only create and use one ImageLoader , you do not need to shut it down as it will be freed when your app is killed. Caching Each ImageLoader keeps a memory cache of recently decoded Bitmap s as well as a reusable pool of Bitmap s to decode into. ImageLoader s rely on an OkHttpClient to handle disk caching. By default, every ImageLoader is already set up for disk caching and will set a max cache size of between 10-250MB depending on the remaining space on the user's device. However, if you set a custom OkHttpClient , you'll need to add the disk cache yourself. To get a Cache instance that's optimized for Coil, you can use CoilUtils.createDefaultCache . Optionally, you can create your own Cache instance with a different size + location. Here's an example: val imageLoader = ImageLoader . Builder ( context ) . okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( context )) . build () } . build () Singleton vs. Dependency Injection Coil performs best when you create a single ImageLoader and share it throughout your app. This is because each ImageLoader has its own memory cache and bitmap pool. If you use a dependency injector like Dagger , then you should create a single ImageLoader instance and inject it throughout your app. However, if you'd prefer a singleton the io.coil-kt:coil artifact provides a singleton ImageLoader instance that can be accessed using the Context.imageLoader extension function. Read here for how to initialize the singleton ImageLoader instance. Note Use the io.coil-kt:coil-base artifact if you are using dependency injection. Testing ImageLoader is an interface, which you can replace with a fake implementation. For instance, you could inject a fake ImageLoader implementation which always returns the same Drawable synchronously: val fakeImageLoader = object : ImageLoader { private val drawable = ColorDrawable ( Color . BLACK ) private val disposable = object : Disposable { override val isDisposed get () = true override fun dispose () {} override suspend fun await () {} } override val defaults = DefaultRequestOptions () // Optionally, you can add a custom fake memory cache implementation. override val memoryCache get () = throw UnsupportedOperationException () override val bitmapPool = BitmapPool ( 0 ) override fun enqueue ( request : ImageRequest ): Disposable { // Always call onStart before onSuccess. request . target ?. onStart ( drawable ) request . target ?. onSuccess ( drawable ) return disposable } override suspend fun execute ( request : ImageRequest ): ImageResult { return SuccessResult ( drawable = drawable , request = request , metadata = ImageResult . Metadata ( memoryCacheKey = MemoryCache . Key ( ), isSampled = false , dataSource = DataSource . MEMORY_CACHE , isPlaceholderMemoryCacheKeyPresent = false ) ) } override fun shutdown () {} override fun newBuilder () = ImageLoader . Builder ( context ) } This is perfect for screenshot and instrumentation tests where you want consistent rendering behavior.","title":"Image Loaders"},{"location":"image_loaders/#image-loaders","text":"ImageLoader s are service objects that execute ImageRequest s. They handle caching, data fetching, image decoding, request management, bitmap pooling, memory management, and more. New instances can be created and configured using a builder: val imageLoader = ImageLoader . Builder ( context ) . availableMemoryPercentage ( 0.25 ) . crossfade ( true ) . build () Coil performs best when you create a single ImageLoader and share it throughout your app. This is because each ImageLoader has its own memory cache, bitmap pool, and network observer. It's recommended, though not required, to call shutdown when you've finished using an image loader. This preemptively frees its memory and cleans up any observers. If you only create and use one ImageLoader , you do not need to shut it down as it will be freed when your app is killed.","title":"Image Loaders"},{"location":"image_loaders/#caching","text":"Each ImageLoader keeps a memory cache of recently decoded Bitmap s as well as a reusable pool of Bitmap s to decode into. ImageLoader s rely on an OkHttpClient to handle disk caching. By default, every ImageLoader is already set up for disk caching and will set a max cache size of between 10-250MB depending on the remaining space on the user's device. However, if you set a custom OkHttpClient , you'll need to add the disk cache yourself. To get a Cache instance that's optimized for Coil, you can use CoilUtils.createDefaultCache . Optionally, you can create your own Cache instance with a different size + location. Here's an example: val imageLoader = ImageLoader . Builder ( context ) . okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( context )) . build () } . build ()","title":"Caching"},{"location":"image_loaders/#singleton-vs-dependency-injection","text":"Coil performs best when you create a single ImageLoader and share it throughout your app. This is because each ImageLoader has its own memory cache and bitmap pool. If you use a dependency injector like Dagger , then you should create a single ImageLoader instance and inject it throughout your app. However, if you'd prefer a singleton the io.coil-kt:coil artifact provides a singleton ImageLoader instance that can be accessed using the Context.imageLoader extension function. Read here for how to initialize the singleton ImageLoader instance. Note Use the io.coil-kt:coil-base artifact if you are using dependency injection.","title":"Singleton vs. Dependency Injection"},{"location":"image_loaders/#testing","text":"ImageLoader is an interface, which you can replace with a fake implementation. For instance, you could inject a fake ImageLoader implementation which always returns the same Drawable synchronously: val fakeImageLoader = object : ImageLoader { private val drawable = ColorDrawable ( Color . BLACK ) private val disposable = object : Disposable { override val isDisposed get () = true override fun dispose () {} override suspend fun await () {} } override val defaults = DefaultRequestOptions () // Optionally, you can add a custom fake memory cache implementation. override val memoryCache get () = throw UnsupportedOperationException () override val bitmapPool = BitmapPool ( 0 ) override fun enqueue ( request : ImageRequest ): Disposable { // Always call onStart before onSuccess. request . target ?. onStart ( drawable ) request . target ?. onSuccess ( drawable ) return disposable } override suspend fun execute ( request : ImageRequest ): ImageResult { return SuccessResult ( drawable = drawable , request = request , metadata = ImageResult . Metadata ( memoryCacheKey = MemoryCache . Key ( ), isSampled = false , dataSource = DataSource . MEMORY_CACHE , isPlaceholderMemoryCacheKeyPresent = false ) ) } override fun shutdown () {} override fun newBuilder () = ImageLoader . Builder ( context ) } This is perfect for screenshot and instrumentation tests where you want consistent rendering behavior.","title":"Testing"},{"location":"image_pipeline/","text":"Extending the Image Pipeline Android supports many image formats out of the box, however there are also plenty of formats it does not (e.g. GIF, SVG, TIFF, etc.) Fortunately, ImageLoader s support pluggable components to add new cache layers, new data types, new fetching behavior, new image encodings, or otherwise overwrite the base image loading behavior. Coil's image pipeline consists of four main parts: Interceptors , Mappers , Fetchers , and Decoders . Custom components must be added to the ImageLoader when constructing it through its ComponentRegistry : val imageLoader = ImageLoader . Builder ( context ) . componentRegistry { add ( CustomCacheInterceptor ()) add ( ItemMapper ()) add ( CronetFetcher ()) add ( GifDecoder ()) } . build () Interceptors Interceptors allow you to observe, transform, short circuit, or retry requests to an ImageLoader 's image engine. For example, you can add a custom cache layer like so: class CustomCacheInterceptor ( private val context : Context , private val cache : LruCache String , Drawable ) : Interceptor { override suspend fun intercept ( chain : Interceptor . Chain ): ImageResult { val value = cache . get ( chain . request . data . toString ()) if ( value != null ) { return SuccessResult ( drawable = value . bitmap . toDrawable ( context ), request = chain . request , metadata = TODO () ) } return chain . proceed ( chain . request ) } } Interceptors are an advanced feature that let you wrap an ImageLoader 's image pipeline with custom logic. Their design is heavily based on OkHttp's Interceptor interface . See Interceptor for more information. Mappers Mappers allow you to add support for custom data types. For instance, say we get this model from our server: data class Item ( val id : Int , val imageUrl : String , val price : Int , val weight : Double ) We could write a custom mapper to map it to its URL, which will be handled later in the pipeline: class ItemMapper : Mapper Item , String { override fun map ( data : Item ) = data . imageUrl } After registering it when building our ImageLoader (see above), we can safely load an Item : val request = ImageRequest . Builder ( context ) . data ( item ) . target ( imageView ) . build () imageLoader . enqueue ( request ) See Mapper for more information. Fetchers Fetchers translate data into either a BufferedSource or a Drawable . See Fetcher for more information. Decoders Decoders read a BufferedSource as input and return a Drawable . Use this interface to add support for custom file formats (e.g. GIF, SVG, TIFF, etc.). See Decoder for more information. Note Decoders are responsible for closing the BufferedSource when finished. This allows custom decoders to return a Drawable while still reading the source. This can be useful to support file types such as progressive JPEG where there is incremental information to show.","title":"Extending the Image Pipeline"},{"location":"image_pipeline/#extending-the-image-pipeline","text":"Android supports many image formats out of the box, however there are also plenty of formats it does not (e.g. GIF, SVG, TIFF, etc.) Fortunately, ImageLoader s support pluggable components to add new cache layers, new data types, new fetching behavior, new image encodings, or otherwise overwrite the base image loading behavior. Coil's image pipeline consists of four main parts: Interceptors , Mappers , Fetchers , and Decoders . Custom components must be added to the ImageLoader when constructing it through its ComponentRegistry : val imageLoader = ImageLoader . Builder ( context ) . componentRegistry { add ( CustomCacheInterceptor ()) add ( ItemMapper ()) add ( CronetFetcher ()) add ( GifDecoder ()) } . build ()","title":"Extending the Image Pipeline"},{"location":"image_pipeline/#interceptors","text":"Interceptors allow you to observe, transform, short circuit, or retry requests to an ImageLoader 's image engine. For example, you can add a custom cache layer like so: class CustomCacheInterceptor ( private val context : Context , private val cache : LruCache String , Drawable ) : Interceptor { override suspend fun intercept ( chain : Interceptor . Chain ): ImageResult { val value = cache . get ( chain . request . data . toString ()) if ( value != null ) { return SuccessResult ( drawable = value . bitmap . toDrawable ( context ), request = chain . request , metadata = TODO () ) } return chain . proceed ( chain . request ) } } Interceptors are an advanced feature that let you wrap an ImageLoader 's image pipeline with custom logic. Their design is heavily based on OkHttp's Interceptor interface . See Interceptor for more information.","title":"Interceptors"},{"location":"image_pipeline/#mappers","text":"Mappers allow you to add support for custom data types. For instance, say we get this model from our server: data class Item ( val id : Int , val imageUrl : String , val price : Int , val weight : Double ) We could write a custom mapper to map it to its URL, which will be handled later in the pipeline: class ItemMapper : Mapper Item , String { override fun map ( data : Item ) = data . imageUrl } After registering it when building our ImageLoader (see above), we can safely load an Item : val request = ImageRequest . Builder ( context ) . data ( item ) . target ( imageView ) . build () imageLoader . enqueue ( request ) See Mapper for more information.","title":"Mappers"},{"location":"image_pipeline/#fetchers","text":"Fetchers translate data into either a BufferedSource or a Drawable . See Fetcher for more information.","title":"Fetchers"},{"location":"image_pipeline/#decoders","text":"Decoders read a BufferedSource as input and return a Drawable . Use this interface to add support for custom file formats (e.g. GIF, SVG, TIFF, etc.). See Decoder for more information. Note Decoders are responsible for closing the BufferedSource when finished. This allows custom decoders to return a Drawable while still reading the source. This can be useful to support file types such as progressive JPEG where there is incremental information to show.","title":"Decoders"},{"location":"image_requests/","text":"Image Requests ImageRequest s are value objects that provide all the necessary information for an ImageLoader to load an image. ImageRequest s can be created using a builder: val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . crossfade ( true ) . target ( imageView ) . build () Once you've created a request pass it to an ImageLoader to enqueue/execute it: imageLoader . enqueue ( request ) See the API documentation for more information.","title":"Image Requests"},{"location":"image_requests/#image-requests","text":"ImageRequest s are value objects that provide all the necessary information for an ImageLoader to load an image. ImageRequest s can be created using a builder: val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . crossfade ( true ) . target ( imageView ) . build () Once you've created a request pass it to an ImageLoader to enqueue/execute it: imageLoader . enqueue ( request ) See the API documentation for more information.","title":"Image Requests"},{"location":"java_compatibility/","text":"Java Compatibility Coil's API is designed to be Kotlin-first. It leverages Kotlin language features such as inlined lambdas, receiver params, default arguments, and extension functions, which are not available in Java. Importantly, suspend functions cannot be implemented in Java. This means custom Transformations , Size Resolvers , Fetchers , and Decoders must be implemented in Kotlin. Despite these limitations, most of Coil's API is Java compatible. The Context.imageLoader extension function should not be used from Java. Instead, you can get the singleton ImageLoader using: ImageLoader imageLoader = Coil . imageLoader ( context ) The syntax to enqueue an ImageRequest is almost the same in Java and Kotlin: ImageRequest request = new ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . crossfade ( true ) . target ( imageView ) . build (); imageLoader . enqueue ( request ) Note ImageView.load extension functions cannot be used from Java. Use the ImageRequest.Builder API instead. suspend functions cannot be easily called from Java. Thus, to get an image synchronously you'll have to use the ImageLoader.executeBlocking extension function which can be called from Java like so: ImageRequest request = new ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . size ( 1080 , 1920 ) . build (); Drawable drawable = ImageLoaders . executeBlocking ( imageLoader , request ). getDrawable (); Note ImageLoaders.executeBlocking will block the current thread instead of suspending. Do not call this from the main thread.","title":"Java Compatibility"},{"location":"java_compatibility/#java-compatibility","text":"Coil's API is designed to be Kotlin-first. It leverages Kotlin language features such as inlined lambdas, receiver params, default arguments, and extension functions, which are not available in Java. Importantly, suspend functions cannot be implemented in Java. This means custom Transformations , Size Resolvers , Fetchers , and Decoders must be implemented in Kotlin. Despite these limitations, most of Coil's API is Java compatible. The Context.imageLoader extension function should not be used from Java. Instead, you can get the singleton ImageLoader using: ImageLoader imageLoader = Coil . imageLoader ( context ) The syntax to enqueue an ImageRequest is almost the same in Java and Kotlin: ImageRequest request = new ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . crossfade ( true ) . target ( imageView ) . build (); imageLoader . enqueue ( request ) Note ImageView.load extension functions cannot be used from Java. Use the ImageRequest.Builder API instead. suspend functions cannot be easily called from Java. Thus, to get an image synchronously you'll have to use the ImageLoader.executeBlocking extension function which can be called from Java like so: ImageRequest request = new ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . size ( 1080 , 1920 ) . build (); Drawable drawable = ImageLoaders . executeBlocking ( imageLoader , request ). getDrawable (); Note ImageLoaders.executeBlocking will block the current thread instead of suspending. Do not call this from the main thread.","title":"Java Compatibility"},{"location":"migrating/","text":"Migrating from Glide/Picasso Here are a few examples of how to migrate Glide/Picasso calls into Coil calls: Basic Usage // Glide Glide . with ( context ) . load ( url ) . into ( imageView ) // Picasso Picasso . get () . load ( url ) . into ( imageView ) // Coil imageView . load ( url ) Custom Requests imageView . scaleType = ImageView . ScaleType . FIT_CENTER // Glide Glide . with ( context ) . load ( url ) . placeholder ( placeholder ) . fitCenter () . into ( imageView ) // Picasso Picasso . get () . load ( url ) . placeholder ( placeholder ) . fit () . into ( imageView ) // Coil (automatically detects the scale type) imageView . load ( url ) { placeholder ( placeholder ) } Non-View Targets // Glide (has optional callbacks for start and error) Glide . with ( context ) . load ( url ) . into ( object : CustomTarget Drawable () { override fun onResourceReady ( resource : Drawable , transition : Transition Drawable ) { // Handle the successful result. } override fun onLoadCleared ( placeholder : Drawable ) { // Remove the drawable provided in onResourceReady from any Views and ensure no references to it remain. } }) // Picasso Picasso . get () . load ( url ) . into ( object : BitmapTarget { override fun onBitmapLoaded ( bitmap : Bitmap , from : Picasso . LoadedFrom ) { // Handle the successful result. } override fun onBitmapFailed ( e : Exception , errorDrawable : Drawable ?) { // Handle the error drawable. } override fun onPrepareLoad ( placeHolderDrawable : Drawable ?) { // Handle the placeholder drawable. } }) // Coil val request = ImageRequest . Builder ( context ) . data ( url ) . target ( onStart = { placeholder - // Handle the placeholder drawable. }, onSuccess = { result - // Handle the successful result. }, onError = { error - // Handle the error drawable. } ) . build () context . imageLoader . enqueue ( request ) Background Thread // Glide (blocks the current thread; must not be called from the main thread) val drawable = Glide . with ( context ) . load ( url ) . submit ( width , height ) . get () // Picasso (blocks the current thread; must not be called from the main thread) val drawable = Picasso . get () . load ( url ) . resize ( width , height ) . get () // Coil (suspends the current coroutine; non-blocking and thread safe) val request = ImageRequest . Builder ( context ) . data ( url ) . size ( width , height ) . build () val drawable = context . imageLoader . execute ( request ). drawable","title":"Migrating from Glide/Picasso"},{"location":"migrating/#migrating-from-glidepicasso","text":"Here are a few examples of how to migrate Glide/Picasso calls into Coil calls:","title":"Migrating from Glide/Picasso"},{"location":"migrating/#basic-usage","text":"// Glide Glide . with ( context ) . load ( url ) . into ( imageView ) // Picasso Picasso . get () . load ( url ) . into ( imageView ) // Coil imageView . load ( url )","title":"Basic Usage"},{"location":"migrating/#custom-requests","text":"imageView . scaleType = ImageView . ScaleType . FIT_CENTER // Glide Glide . with ( context ) . load ( url ) . placeholder ( placeholder ) . fitCenter () . into ( imageView ) // Picasso Picasso . get () . load ( url ) . placeholder ( placeholder ) . fit () . into ( imageView ) // Coil (automatically detects the scale type) imageView . load ( url ) { placeholder ( placeholder ) }","title":"Custom Requests"},{"location":"migrating/#non-view-targets","text":"// Glide (has optional callbacks for start and error) Glide . with ( context ) . load ( url ) . into ( object : CustomTarget Drawable () { override fun onResourceReady ( resource : Drawable , transition : Transition Drawable ) { // Handle the successful result. } override fun onLoadCleared ( placeholder : Drawable ) { // Remove the drawable provided in onResourceReady from any Views and ensure no references to it remain. } }) // Picasso Picasso . get () . load ( url ) . into ( object : BitmapTarget { override fun onBitmapLoaded ( bitmap : Bitmap , from : Picasso . LoadedFrom ) { // Handle the successful result. } override fun onBitmapFailed ( e : Exception , errorDrawable : Drawable ?) { // Handle the error drawable. } override fun onPrepareLoad ( placeHolderDrawable : Drawable ?) { // Handle the placeholder drawable. } }) // Coil val request = ImageRequest . Builder ( context ) . data ( url ) . target ( onStart = { placeholder - // Handle the placeholder drawable. }, onSuccess = { result - // Handle the successful result. }, onError = { error - // Handle the error drawable. } ) . build () context . imageLoader . enqueue ( request )","title":"Non-View Targets"},{"location":"migrating/#background-thread","text":"// Glide (blocks the current thread; must not be called from the main thread) val drawable = Glide . with ( context ) . load ( url ) . submit ( width , height ) . get () // Picasso (blocks the current thread; must not be called from the main thread) val drawable = Picasso . get () . load ( url ) . resize ( width , height ) . get () // Coil (suspends the current coroutine; non-blocking and thread safe) val request = ImageRequest . Builder ( context ) . data ( url ) . size ( width , height ) . build () val drawable = context . imageLoader . execute ( request ). drawable","title":"Background Thread"},{"location":"recipes/","text":"Recipes This page provides guidance on how to handle some common use cases with Coil. You might have to modify this code to fit your exact requirements, but it should hopefully give you a push in the right direction! See a common use case that isn't covered? Feel free to submit a PR with a new section. Palette Palette allows you to exact prominent colors from an image. To create a Palette , you'll need access to an image's Bitmap . This can be done in a number of ways: Enqueue You can get access to an image's bitmap by setting a Target and enqueuing ImageRequest : val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . allowHardware ( false ) // Disable hardware bitmaps. . target { drawable - // Generate the Palette on a background thread. val task = Palette . Builder ( drawable . toBitmap ()). generate { palette - // Consume the palette. } } . build () val disposable = imageLoader . enqueue ( request ) Execute You can also execute an ImageRequest , which returns the drawable imperatively: val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . allowHardware ( false ) // Disable hardware bitmaps. . build () val drawable = ( imageLoader . execute ( request ) as SuccessResult ). drawable val palette = coroutineScope { launch ( Dispatchers . IO ) { Palette . Builder ( drawable . toBitmap ()). generate () } } Transition There may be cases where you want to load an image into a PoolableViewTarget (e.g. ImageViewTarget ) while extracting the image's colors in parallel. For these cases, you can use a custom Transition to get access to the underlying bitmap: class PaletteTransition ( private val delegate : Transition ?, private val onGenerated : ( Palette ) - Unit ) : Transition { override suspend fun transition ( target : TransitionTarget , result : RequestResult ) { // Execute the delegate transition. val delegateJob = delegate ?. let { delegate - coroutineScope { launch ( Dispatchers . Main . immediate ) { delegate . transition ( target , result ) } } } // Compute the palette on a background thread. if ( result is SuccessResult ) { val bitmap = result . drawable . toBitmap () val palette = withContext ( Dispatchers . IO ) { Palette . Builder ( bitmap ). generate () } onGenerated ( palette ) } delegateJob ?. join () } } // ImageRequest val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . allowHardware ( false ) // Disable hardware bitmaps. . transition ( PaletteTransition ( CrossfadeTransition ()) { palette - // Consume the palette. }) . target ( imageView ) . build () imageLoader . enqueue ( request ) // ImageView.load imageView . load ( https://www.example.com/image.jpg ) { allowHardware ( false ) transition ( PaletteTransition ( CrossfadeTransition ()) { palette - // Consume the palette. }) } Note You should not pass the drawable outside the scope of Transition.transition . This can cause the drawable's underlying bitmap to be pooled while it is still in use, which can result in rendering issues and crashes. Using a custom OkHttpClient Coil uses OkHttp for all its networking operations. You can specify a custom OkHttpClient when creating your ImageLoader : val imageLoader = ImageLoader . Builder ( context ) // Create the OkHttpClient inside a lambda so it will be initialized lazily on a background thread. . okHttpClient { OkHttpClient . Builder () // You need to set the cache for disk caching to work. . cache ( CoilUtils . createDefaultCache ( context )) . build () } . build () Note If you already have a built OkHttpClient , use newBuilder() to build a new client that shares resources with the original. Also, it's recommended to use a separate Cache instance for your Coil OkHttpClient . Image files can quickly evict more important cached network responses if they share the same cache. Headers Headers can be added to your image requests in one of two ways. You can set headers for a single request: val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . setHeader ( Cache-Control , max-age=31536000,public ) . target ( imageView ) . build () imageLoader . execute ( request ) Or you can create an OkHttp Interceptor that sets headers for every request executed by your ImageLoader : class ResponseHeaderInterceptor ( private val name : String , private val value : String ) : Interceptor { override fun intercept ( chain : Interceptor . Chain ): Response { val response = chain . proceed ( chain . request ()) return response . newBuilder (). header ( name , value ). build () } } val imageLoader = ImageLoader . Builder ( context ) . okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( context )) // This header will be added to every image request. . addNetworkInterceptor ( ResponseHeaderInterceptor ( Cache-Control , max-age=31536000,public )) . build () } . build () Using a Memory Cache Key as a Placeholder Using a previous request's MemoryCache.Key as a placeholder for a subsequent request can be useful if the two images are the same, though loaded at different sizes. For instance, if the first request loads the image at 100x100 and the second request loads the image at 500x500, we can use the first image as a synchronous placeholder for the second request. Here's what this effect looks like in the sample app: Images in the list have intentionally been loaded with very low detail and the crossfade is slowed down to highlight the visual effect. To achieve this effect, use the MemoryCache.Key of the first request as the ImageRequest.placeholderMemoryCacheKey of the second request. Here's an example: // First request listImageView . load ( https://www.example.com/image.jpg ) // Second request detailImageView . load ( https://www.example.com/image.jpg ) { placeholderMemoryCacheKey ( listImageView . metadata . memoryCacheKey ) } Note Previous versions of Coil would attempt to set up this effect automatically . This required executing parts of the image pipeline synchronously on the main thread and it was ultimately removed in version 0.12.0 . Shared Element Transitions Shared element transitions allow you to animate between Activities and Fragments . Here are some recommendations on how to get them to work with Coil: Shared element transitions are incompatible with hardware bitmaps. You should set allowHardware(false) to disable hardware bitmaps for both the ImageView you are animating from and the view you are animating to. If you don't, the transition will throw an java.lang.IllegalArgumentException: Software rendering doesn't support hardware bitmaps exception. Use the MemoryCache.Key of the start image as the placeholderMemoryCacheKey for the end image. This ensures that the start image is used as the placeholder for the end image, which results in a smooth transition with no white flashes if the image is in the memory cache. Use ChangeImageTransform and ChangeBounds together for optimal results. Remote Views Coil does not provide a Target for RemoteViews out of the box, however you can create one like so: class RemoteViewsTarget ( private val context : Context , private val componentName : ComponentName , private val remoteViews : RemoteViews , @IdRes private val imageViewResId : Int ) : Target { override fun onStart ( placeholder : Drawable ?) = setDrawable ( placeholder ) override fun onError ( error : Drawable ?) = setDrawable ( error ) override fun onSuccess ( result : Drawable ) = setDrawable ( result ) private fun setDrawable ( drawable : Drawable ?) { remoteViews . setImageViewBitmap ( imageViewResId , drawable ?. toBitmap ()) AppWidgetManager . getInstance ( context ). updateAppWidget ( componentName , remoteViews ) } } Then enqueue / execute the request like normal: val target = RemoteViewsTarget (...) val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . target ( target ) . build () imageLoader . enqueue ( request )","title":"Recipes"},{"location":"recipes/#recipes","text":"This page provides guidance on how to handle some common use cases with Coil. You might have to modify this code to fit your exact requirements, but it should hopefully give you a push in the right direction! See a common use case that isn't covered? Feel free to submit a PR with a new section.","title":"Recipes"},{"location":"recipes/#palette","text":"Palette allows you to exact prominent colors from an image. To create a Palette , you'll need access to an image's Bitmap . This can be done in a number of ways:","title":"Palette"},{"location":"recipes/#enqueue","text":"You can get access to an image's bitmap by setting a Target and enqueuing ImageRequest : val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . allowHardware ( false ) // Disable hardware bitmaps. . target { drawable - // Generate the Palette on a background thread. val task = Palette . Builder ( drawable . toBitmap ()). generate { palette - // Consume the palette. } } . build () val disposable = imageLoader . enqueue ( request )","title":"Enqueue"},{"location":"recipes/#execute","text":"You can also execute an ImageRequest , which returns the drawable imperatively: val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . allowHardware ( false ) // Disable hardware bitmaps. . build () val drawable = ( imageLoader . execute ( request ) as SuccessResult ). drawable val palette = coroutineScope { launch ( Dispatchers . IO ) { Palette . Builder ( drawable . toBitmap ()). generate () } }","title":"Execute"},{"location":"recipes/#transition","text":"There may be cases where you want to load an image into a PoolableViewTarget (e.g. ImageViewTarget ) while extracting the image's colors in parallel. For these cases, you can use a custom Transition to get access to the underlying bitmap: class PaletteTransition ( private val delegate : Transition ?, private val onGenerated : ( Palette ) - Unit ) : Transition { override suspend fun transition ( target : TransitionTarget , result : RequestResult ) { // Execute the delegate transition. val delegateJob = delegate ?. let { delegate - coroutineScope { launch ( Dispatchers . Main . immediate ) { delegate . transition ( target , result ) } } } // Compute the palette on a background thread. if ( result is SuccessResult ) { val bitmap = result . drawable . toBitmap () val palette = withContext ( Dispatchers . IO ) { Palette . Builder ( bitmap ). generate () } onGenerated ( palette ) } delegateJob ?. join () } } // ImageRequest val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . allowHardware ( false ) // Disable hardware bitmaps. . transition ( PaletteTransition ( CrossfadeTransition ()) { palette - // Consume the palette. }) . target ( imageView ) . build () imageLoader . enqueue ( request ) // ImageView.load imageView . load ( https://www.example.com/image.jpg ) { allowHardware ( false ) transition ( PaletteTransition ( CrossfadeTransition ()) { palette - // Consume the palette. }) } Note You should not pass the drawable outside the scope of Transition.transition . This can cause the drawable's underlying bitmap to be pooled while it is still in use, which can result in rendering issues and crashes.","title":"Transition"},{"location":"recipes/#using-a-custom-okhttpclient","text":"Coil uses OkHttp for all its networking operations. You can specify a custom OkHttpClient when creating your ImageLoader : val imageLoader = ImageLoader . Builder ( context ) // Create the OkHttpClient inside a lambda so it will be initialized lazily on a background thread. . okHttpClient { OkHttpClient . Builder () // You need to set the cache for disk caching to work. . cache ( CoilUtils . createDefaultCache ( context )) . build () } . build () Note If you already have a built OkHttpClient , use newBuilder() to build a new client that shares resources with the original. Also, it's recommended to use a separate Cache instance for your Coil OkHttpClient . Image files can quickly evict more important cached network responses if they share the same cache.","title":"Using a custom OkHttpClient"},{"location":"recipes/#headers","text":"Headers can be added to your image requests in one of two ways. You can set headers for a single request: val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . setHeader ( Cache-Control , max-age=31536000,public ) . target ( imageView ) . build () imageLoader . execute ( request ) Or you can create an OkHttp Interceptor that sets headers for every request executed by your ImageLoader : class ResponseHeaderInterceptor ( private val name : String , private val value : String ) : Interceptor { override fun intercept ( chain : Interceptor . Chain ): Response { val response = chain . proceed ( chain . request ()) return response . newBuilder (). header ( name , value ). build () } } val imageLoader = ImageLoader . Builder ( context ) . okHttpClient { OkHttpClient . Builder () . cache ( CoilUtils . createDefaultCache ( context )) // This header will be added to every image request. . addNetworkInterceptor ( ResponseHeaderInterceptor ( Cache-Control , max-age=31536000,public )) . build () } . build ()","title":"Headers"},{"location":"recipes/#using-a-memory-cache-key-as-a-placeholder","text":"Using a previous request's MemoryCache.Key as a placeholder for a subsequent request can be useful if the two images are the same, though loaded at different sizes. For instance, if the first request loads the image at 100x100 and the second request loads the image at 500x500, we can use the first image as a synchronous placeholder for the second request. Here's what this effect looks like in the sample app: Images in the list have intentionally been loaded with very low detail and the crossfade is slowed down to highlight the visual effect. To achieve this effect, use the MemoryCache.Key of the first request as the ImageRequest.placeholderMemoryCacheKey of the second request. Here's an example: // First request listImageView . load ( https://www.example.com/image.jpg ) // Second request detailImageView . load ( https://www.example.com/image.jpg ) { placeholderMemoryCacheKey ( listImageView . metadata . memoryCacheKey ) } Note Previous versions of Coil would attempt to set up this effect automatically . This required executing parts of the image pipeline synchronously on the main thread and it was ultimately removed in version 0.12.0 .","title":"Using a Memory Cache Key as a Placeholder"},{"location":"recipes/#shared-element-transitions","text":"Shared element transitions allow you to animate between Activities and Fragments . Here are some recommendations on how to get them to work with Coil: Shared element transitions are incompatible with hardware bitmaps. You should set allowHardware(false) to disable hardware bitmaps for both the ImageView you are animating from and the view you are animating to. If you don't, the transition will throw an java.lang.IllegalArgumentException: Software rendering doesn't support hardware bitmaps exception. Use the MemoryCache.Key of the start image as the placeholderMemoryCacheKey for the end image. This ensures that the start image is used as the placeholder for the end image, which results in a smooth transition with no white flashes if the image is in the memory cache. Use ChangeImageTransform and ChangeBounds together for optimal results.","title":"Shared Element Transitions"},{"location":"recipes/#remote-views","text":"Coil does not provide a Target for RemoteViews out of the box, however you can create one like so: class RemoteViewsTarget ( private val context : Context , private val componentName : ComponentName , private val remoteViews : RemoteViews , @IdRes private val imageViewResId : Int ) : Target { override fun onStart ( placeholder : Drawable ?) = setDrawable ( placeholder ) override fun onError ( error : Drawable ?) = setDrawable ( error ) override fun onSuccess ( result : Drawable ) = setDrawable ( result ) private fun setDrawable ( drawable : Drawable ?) { remoteViews . setImageViewBitmap ( imageViewResId , drawable ?. toBitmap ()) AppWidgetManager . getInstance ( context ). updateAppWidget ( componentName , remoteViews ) } } Then enqueue / execute the request like normal: val target = RemoteViewsTarget (...) val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . target ( target ) . build () imageLoader . enqueue ( request )","title":"Remote Views"},{"location":"svgs/","text":"SVGs To add SVG support, import the extension library: implementation ( io.coil-kt:coil-svg:1.2.0 ) And add the decoder to your component registry when constructing your ImageLoader : val imageLoader = ImageLoader . Builder ( context ) . componentRegistry { add ( SvgDecoder ( context )) } . build () The ImageLoader will automatically detect and decode any SVGs. Coil detects SVGs by looking for the svg marker in the first 1 KB of the file, which should cover most cases. If the SVG is not automatically detected, you can set the Decoder explicitly to SvgDecoder for the request.","title":"SVGs"},{"location":"svgs/#svgs","text":"To add SVG support, import the extension library: implementation ( io.coil-kt:coil-svg:1.2.0 ) And add the decoder to your component registry when constructing your ImageLoader : val imageLoader = ImageLoader . Builder ( context ) . componentRegistry { add ( SvgDecoder ( context )) } . build () The ImageLoader will automatically detect and decode any SVGs. Coil detects SVGs by looking for the svg marker in the first 1 KB of the file, which should cover most cases. If the SVG is not automatically detected, you can set the Decoder explicitly to SvgDecoder for the request.","title":"SVGs"},{"location":"targets/","text":"Targets Targets receive the result of an ImageRequest . They often act as \"view adapters\" by taking the placeholder/error/success drawables and applying them to a View (e.g. ImageViewTarget ). Here's the easiest way to create a custom target: val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . target ( onStart = { placeholder - // Handle the placeholder drawable. }, onSuccess = { result - // Handle the successful result. }, onError = { error - // Handle the error drawable. } ) . build () imageLoader . enqueue ( request ) There are 3 types of targets: Target : The base target class. Prefer this if the image request isn't tied to a View . ViewTarget : A target with an associated View . Prefer this if the request sets the placeholder/error/success Drawables on a View . Using ViewTarget also binds the request to the View 's lifecycle. PoolableViewTarget : A ViewTarget that supports bitmap pooling . This has performance benefits, however it comes with several strict behavior requirements. Read the docs for more information.","title":"Targets"},{"location":"targets/#targets","text":"Targets receive the result of an ImageRequest . They often act as \"view adapters\" by taking the placeholder/error/success drawables and applying them to a View (e.g. ImageViewTarget ). Here's the easiest way to create a custom target: val request = ImageRequest . Builder ( context ) . data ( https://www.example.com/image.jpg ) . target ( onStart = { placeholder - // Handle the placeholder drawable. }, onSuccess = { result - // Handle the successful result. }, onError = { error - // Handle the error drawable. } ) . build () imageLoader . enqueue ( request ) There are 3 types of targets: Target : The base target class. Prefer this if the image request isn't tied to a View . ViewTarget : A target with an associated View . Prefer this if the request sets the placeholder/error/success Drawables on a View . Using ViewTarget also binds the request to the View 's lifecycle. PoolableViewTarget : A ViewTarget that supports bitmap pooling . This has performance benefits, however it comes with several strict behavior requirements. Read the docs for more information.","title":"Targets"},{"location":"transformations/","text":"Transformations Transformations allow you to modify the pixel data of an image before the Drawable is returned from the request. By default, Coil comes packaged with 4 transformations: blur , circle crop , and grayscale , and rounded corners . Transformations only modify the pixel data for static images. Adding a transformation to an ImageRequest that produces an animated image will convert it to a static image so the transformation can be applied. To transform the pixel data of each frame of an animated image, see AnimatedTransformation . See the API doc for more information. Note If the Drawable returned by the image pipeline is not a BitmapDrawable , it will be converted to one. This will cause animated drawables to only draw the first frame of their animation.","title":"Transformations"},{"location":"transformations/#transformations","text":"Transformations allow you to modify the pixel data of an image before the Drawable is returned from the request. By default, Coil comes packaged with 4 transformations: blur , circle crop , and grayscale , and rounded corners . Transformations only modify the pixel data for static images. Adding a transformation to an ImageRequest that produces an animated image will convert it to a static image so the transformation can be applied. To transform the pixel data of each frame of an animated image, see AnimatedTransformation . See the API doc for more information. Note If the Drawable returned by the image pipeline is not a BitmapDrawable , it will be converted to one. This will cause animated drawables to only draw the first frame of their animation.","title":"Transformations"},{"location":"transitions/","text":"Transitions Transitions allow you to animate setting the result of an image request on a Target . Both ImageLoader and ImageRequest builders accept a Transition . Transitions allow you to control how the sucess/error drawable is set on the Target . This allows you to animate the target's view or wrap the input drawable. By default, Coil comes packaged with 2 transitions: CrossfadeTransition which crossfades from the current drawable to the success/error drawable. Transition.NONE which sets the drawable on the Target immediately without animating. Take a look at the CrossfadeTransition source code for an example of how to write a custom Transition . See the API doc for more information.","title":"Transitions"},{"location":"transitions/#transitions","text":"Transitions allow you to animate setting the result of an image request on a Target . Both ImageLoader and ImageRequest builders accept a Transition . Transitions allow you to control how the sucess/error drawable is set on the Target . This allows you to animate the target's view or wrap the input drawable. By default, Coil comes packaged with 2 transitions: CrossfadeTransition which crossfades from the current drawable to the success/error drawable. Transition.NONE which sets the drawable on the Target immediately without animating. Take a look at the CrossfadeTransition source code for an example of how to write a custom Transition . See the API doc for more information.","title":"Transitions"},{"location":"videos/","text":"Video Frames To add video frame support, import the extension library: implementation ( io.coil-kt:coil-video:1.2.0 ) And add the two fetchers and the decoder to your component registry when constructing your ImageLoader : val imageLoader = ImageLoader . Builder ( context ) . componentRegistry { add ( VideoFrameFileFetcher ()) add ( VideoFrameUriFetcher ()) add ( VideoFrameDecoder ()) } . build () VideoFrameDecoder handles all data sources, but creates a temporary file on disk to decode the source. VideoFrameFileFetcher and VideoFrameUriFetcher don't create a temporary file, but only work for File s and local Uri s respectively. Registering all 3 components ensures that VideoFrameFileFetcher and VideoFrameUriFetcher are automatically used when appropriate and VideoFrameDecoder is used as a fallback. To specify the time code of the frame to extract from a video, use videoFrameMillis or videoFrameMicros : imageView . load ( File ( /path/to/video.mp4 )) { videoFrameMillis ( 1000 ) } If a frame time isn't specified, the first frame of the video is decoded. The ImageLoader will automatically detect any videos and extract their frames if the request's filename/URI ends with a valid video extension . If it does not, you can set the Fetcher explicitly for the request.","title":"Video Frames"},{"location":"videos/#video-frames","text":"To add video frame support, import the extension library: implementation ( io.coil-kt:coil-video:1.2.0 ) And add the two fetchers and the decoder to your component registry when constructing your ImageLoader : val imageLoader = ImageLoader . Builder ( context ) . componentRegistry { add ( VideoFrameFileFetcher ()) add ( VideoFrameUriFetcher ()) add ( VideoFrameDecoder ()) } . build () VideoFrameDecoder handles all data sources, but creates a temporary file on disk to decode the source. VideoFrameFileFetcher and VideoFrameUriFetcher don't create a temporary file, but only work for File s and local Uri s respectively. Registering all 3 components ensures that VideoFrameFileFetcher and VideoFrameUriFetcher are automatically used when appropriate and VideoFrameDecoder is used as a fallback. To specify the time code of the frame to extract from a video, use videoFrameMillis or videoFrameMicros : imageView . load ( File ( /path/to/video.mp4 )) { videoFrameMillis ( 1000 ) } If a frame time isn't specified, the first frame of the video is decoded. The ImageLoader will automatically detect any videos and extract their frames if the request's filename/URI ends with a valid video extension . If it does not, you can set the Fetcher explicitly for the request.","title":"Video Frames"},{"location":"api/coil-base/","text":"coil-base Packages Name Summary coil coil.annotation coil.bitmap coil.decode coil.drawable coil.fetch coil.intercept coil.map coil.memory coil.network coil.request coil.size coil.target coil.transform coil.transition coil.util Index All Types","title":"coil-base"},{"location":"api/coil-base/#packages","text":"Name Summary coil coil.annotation coil.bitmap coil.decode coil.drawable coil.fetch coil.intercept coil.map coil.memory coil.network coil.request coil.size coil.target coil.transform coil.transition coil.util","title":"Packages"},{"location":"api/coil-base/#index","text":"All Types","title":"Index"},{"location":"api/coil-base/alltypes/","text":"All Types Name Summary coil.bitmap.BitmapPool An object pool that enables callers to reuse Bitmap objects. | coil.transform.BlurTransformation A Transformation that applies a Gaussian blur to an image. | coil.request.CachePolicy Represents the read/write policy for a cache source. | coil.transform.CircleCropTransformation A Transformation that crops an image using a centered circle as the mask. | coil.util.CoilUtils Public utility methods for Coil. | coil.ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. | coil.drawable.CrossfadeDrawable A Drawable that crossfades from start to end . | coil.transition.CrossfadeTransition A Transition that crossfades from the current drawable to a new one. | coil.decode.DataSource Represents the source that an image was loaded from. | coil.util.DebugLogger A Logger implementation that writes to Android's Log . | coil.decode.Decoder Converts a BufferedSource into a Drawable . | coil.decode.DecodeResult The result of Decoder.decode . | coil.decode.DecodeUtils A collection of useful utility methods for decoding images. | coil.request.DefaultRequestOptions A set of default options that are used to fill in unset ImageRequest values. | coil.request.DefinedRequestOptions Tracks which values have been set (instead of computed automatically using a default) when building an ImageRequest . | coil.size.DisplaySizeResolver A SizeResolver that measures the size of the display. | coil.request.Disposable Represents the work of an executed ImageRequest . | coil.fetch.DrawableResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . | coil.request.ErrorResult Indicates that an error occurred while executing the request. | coil.EventListener A listener for tracking the progress of an image request. This class is useful for measuring analytics, performance, or other metrics tracking. | coil.annotation.ExperimentalCoilApi Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating. | coil.fetch.Fetcher A Fetcher translates data into either a BufferedSource or a Drawable . | coil.fetch.FetchResult The result of Fetcher.fetch . | coil.transform.GrayscaleTransformation A Transformation that converts an image to shades of gray. | coil.network.HttpException Exception for an unexpected, non-2xx HTTP response. | coil.ImageLoader A service class that loads images by executing ImageRequest s. Image loaders handle caching, data fetching, image decoding, request management, bitmap pooling, memory management, and more. | coil.request.ImageRequest An immutable value object that represents a request for an image. | coil.request.ImageResult Represents the result of an image request. | coil.target.ImageViewTarget A Target that handles setting images on an ImageView . | coil.intercept.Interceptor Observe, transform, short circuit, or retry requests to an ImageLoader 's image engine. | coil.annotation.InternalCoilApi Marks declarations that are part of Coil's internal API. They should not be used outside of the coil package as their signatures and semantics will change between future releases without any warnings and without providing any migration aids. | coil.util.Logger Logging interface for ImageLoader s. | coil.map.Mapper An interface to convert data of type T into V . | coil.memory.MemoryCache An in-memory cache of recently loaded images. | coil.request.NullRequestData The value for ImageRequest.data if the request's data was not set or was set to null. | coil.request.NullRequestDataException Exception thrown when an ImageRequest with empty/null data is executed by an ImageLoader . | coil.decode.Options A set of configuration options for fetching and decoding an image. | coil.size.OriginalSize Represents the width and height of the source image. | coil.request.Parameters A map of generic values that can be used to pass custom data to Fetcher s and Decoder s. | coil.size.PixelSize A positive width and height in pixels. | coil.target.PoolableViewTarget A ViewTarget that supports Bitmap pooling. | coil.size.Precision Represents the required precision for the size of an image in an image request. | coil.transform.RoundedCornersTransformation A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. | coil.size.Scale Represents a scaling policy. | coil.size.Size Represents the target size of an image request. | coil.size.SizeResolver An interface for measuring the target size for an image request. | coil.fetch.SourceResult A raw BufferedSource result, which will be consumed by the relevant Decoder . | coil.request.SuccessResult Indicates that the request completed successfully. | coil.target.Target A listener that accepts the result of an image request. | coil.transform.Transformation An interface for making transformations to an image's pixel data. | coil.transition.Transition A class to animate between a Target 's current drawable and the result of an image request. | coil.transition.TransitionTarget A Target that supports applying Transition s. | coil.size.ViewSizeResolver A SizeResolver that measures the size of a View . | coil.target.ViewTarget A Target with an associated View . Prefer this to Target if the given drawables will only be used by view .","title":"Home"},{"location":"api/coil-base/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/coil-base/alltypes/#coilbitmapbitmappool","text":"An object pool that enables callers to reuse Bitmap objects. |","title":"coil.bitmap.BitmapPool"},{"location":"api/coil-base/alltypes/#coiltransformblurtransformation","text":"A Transformation that applies a Gaussian blur to an image. |","title":"coil.transform.BlurTransformation"},{"location":"api/coil-base/alltypes/#coilrequestcachepolicy","text":"Represents the read/write policy for a cache source. |","title":"coil.request.CachePolicy"},{"location":"api/coil-base/alltypes/#coiltransformcirclecroptransformation","text":"A Transformation that crops an image using a centered circle as the mask. |","title":"coil.transform.CircleCropTransformation"},{"location":"api/coil-base/alltypes/#coilutilcoilutils","text":"Public utility methods for Coil. |","title":"coil.util.CoilUtils"},{"location":"api/coil-base/alltypes/#coilcomponentregistry","text":"Registry for all the components that an ImageLoader uses to fulfil image requests. |","title":"coil.ComponentRegistry"},{"location":"api/coil-base/alltypes/#coildrawablecrossfadedrawable","text":"A Drawable that crossfades from start to end . |","title":"coil.drawable.CrossfadeDrawable"},{"location":"api/coil-base/alltypes/#coiltransitioncrossfadetransition","text":"A Transition that crossfades from the current drawable to a new one. |","title":"coil.transition.CrossfadeTransition"},{"location":"api/coil-base/alltypes/#coildecodedatasource","text":"Represents the source that an image was loaded from. |","title":"coil.decode.DataSource"},{"location":"api/coil-base/alltypes/#coilutildebuglogger","text":"A Logger implementation that writes to Android's Log . |","title":"coil.util.DebugLogger"},{"location":"api/coil-base/alltypes/#coildecodedecoder","text":"Converts a BufferedSource into a Drawable . |","title":"coil.decode.Decoder"},{"location":"api/coil-base/alltypes/#coildecodedecoderesult","text":"The result of Decoder.decode . |","title":"coil.decode.DecodeResult"},{"location":"api/coil-base/alltypes/#coildecodedecodeutils","text":"A collection of useful utility methods for decoding images. |","title":"coil.decode.DecodeUtils"},{"location":"api/coil-base/alltypes/#coilrequestdefaultrequestoptions","text":"A set of default options that are used to fill in unset ImageRequest values. |","title":"coil.request.DefaultRequestOptions"},{"location":"api/coil-base/alltypes/#coilrequestdefinedrequestoptions","text":"Tracks which values have been set (instead of computed automatically using a default) when building an ImageRequest . |","title":"coil.request.DefinedRequestOptions"},{"location":"api/coil-base/alltypes/#coilsizedisplaysizeresolver","text":"A SizeResolver that measures the size of the display. |","title":"coil.size.DisplaySizeResolver"},{"location":"api/coil-base/alltypes/#coilrequestdisposable","text":"Represents the work of an executed ImageRequest . |","title":"coil.request.Disposable"},{"location":"api/coil-base/alltypes/#coilfetchdrawableresult","text":"A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . |","title":"coil.fetch.DrawableResult"},{"location":"api/coil-base/alltypes/#coilrequesterrorresult","text":"Indicates that an error occurred while executing the request. |","title":"coil.request.ErrorResult"},{"location":"api/coil-base/alltypes/#coileventlistener","text":"A listener for tracking the progress of an image request. This class is useful for measuring analytics, performance, or other metrics tracking. |","title":"coil.EventListener"},{"location":"api/coil-base/alltypes/#coilannotationexperimentalcoilapi","text":"Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating. |","title":"coil.annotation.ExperimentalCoilApi"},{"location":"api/coil-base/alltypes/#coilfetchfetcher","text":"A Fetcher translates data into either a BufferedSource or a Drawable . |","title":"coil.fetch.Fetcher"},{"location":"api/coil-base/alltypes/#coilfetchfetchresult","text":"The result of Fetcher.fetch . |","title":"coil.fetch.FetchResult"},{"location":"api/coil-base/alltypes/#coiltransformgrayscaletransformation","text":"A Transformation that converts an image to shades of gray. |","title":"coil.transform.GrayscaleTransformation"},{"location":"api/coil-base/alltypes/#coilnetworkhttpexception","text":"Exception for an unexpected, non-2xx HTTP response. |","title":"coil.network.HttpException"},{"location":"api/coil-base/alltypes/#coilimageloader","text":"A service class that loads images by executing ImageRequest s. Image loaders handle caching, data fetching, image decoding, request management, bitmap pooling, memory management, and more. |","title":"coil.ImageLoader"},{"location":"api/coil-base/alltypes/#coilrequestimagerequest","text":"An immutable value object that represents a request for an image. |","title":"coil.request.ImageRequest"},{"location":"api/coil-base/alltypes/#coilrequestimageresult","text":"Represents the result of an image request. |","title":"coil.request.ImageResult"},{"location":"api/coil-base/alltypes/#coiltargetimageviewtarget","text":"A Target that handles setting images on an ImageView . |","title":"coil.target.ImageViewTarget"},{"location":"api/coil-base/alltypes/#coilinterceptinterceptor","text":"Observe, transform, short circuit, or retry requests to an ImageLoader 's image engine. |","title":"coil.intercept.Interceptor"},{"location":"api/coil-base/alltypes/#coilannotationinternalcoilapi","text":"Marks declarations that are part of Coil's internal API. They should not be used outside of the coil package as their signatures and semantics will change between future releases without any warnings and without providing any migration aids. |","title":"coil.annotation.InternalCoilApi"},{"location":"api/coil-base/alltypes/#coilutillogger","text":"Logging interface for ImageLoader s. |","title":"coil.util.Logger"},{"location":"api/coil-base/alltypes/#coilmapmapper","text":"An interface to convert data of type T into V . |","title":"coil.map.Mapper"},{"location":"api/coil-base/alltypes/#coilmemorymemorycache","text":"An in-memory cache of recently loaded images. |","title":"coil.memory.MemoryCache"},{"location":"api/coil-base/alltypes/#coilrequestnullrequestdata","text":"The value for ImageRequest.data if the request's data was not set or was set to null. |","title":"coil.request.NullRequestData"},{"location":"api/coil-base/alltypes/#coilrequestnullrequestdataexception","text":"Exception thrown when an ImageRequest with empty/null data is executed by an ImageLoader . |","title":"coil.request.NullRequestDataException"},{"location":"api/coil-base/alltypes/#coildecodeoptions","text":"A set of configuration options for fetching and decoding an image. |","title":"coil.decode.Options"},{"location":"api/coil-base/alltypes/#coilsizeoriginalsize","text":"Represents the width and height of the source image. |","title":"coil.size.OriginalSize"},{"location":"api/coil-base/alltypes/#coilrequestparameters","text":"A map of generic values that can be used to pass custom data to Fetcher s and Decoder s. |","title":"coil.request.Parameters"},{"location":"api/coil-base/alltypes/#coilsizepixelsize","text":"A positive width and height in pixels. |","title":"coil.size.PixelSize"},{"location":"api/coil-base/alltypes/#coiltargetpoolableviewtarget","text":"A ViewTarget that supports Bitmap pooling. |","title":"coil.target.PoolableViewTarget"},{"location":"api/coil-base/alltypes/#coilsizeprecision","text":"Represents the required precision for the size of an image in an image request. |","title":"coil.size.Precision"},{"location":"api/coil-base/alltypes/#coiltransformroundedcornerstransformation","text":"A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. |","title":"coil.transform.RoundedCornersTransformation"},{"location":"api/coil-base/alltypes/#coilsizescale","text":"Represents a scaling policy. |","title":"coil.size.Scale"},{"location":"api/coil-base/alltypes/#coilsizesize","text":"Represents the target size of an image request. |","title":"coil.size.Size"},{"location":"api/coil-base/alltypes/#coilsizesizeresolver","text":"An interface for measuring the target size for an image request. |","title":"coil.size.SizeResolver"},{"location":"api/coil-base/alltypes/#coilfetchsourceresult","text":"A raw BufferedSource result, which will be consumed by the relevant Decoder . |","title":"coil.fetch.SourceResult"},{"location":"api/coil-base/alltypes/#coilrequestsuccessresult","text":"Indicates that the request completed successfully. |","title":"coil.request.SuccessResult"},{"location":"api/coil-base/alltypes/#coiltargettarget","text":"A listener that accepts the result of an image request. |","title":"coil.target.Target"},{"location":"api/coil-base/alltypes/#coiltransformtransformation","text":"An interface for making transformations to an image's pixel data. |","title":"coil.transform.Transformation"},{"location":"api/coil-base/alltypes/#coiltransitiontransition","text":"A class to animate between a Target 's current drawable and the result of an image request. |","title":"coil.transition.Transition"},{"location":"api/coil-base/alltypes/#coiltransitiontransitiontarget","text":"A Target that supports applying Transition s. |","title":"coil.transition.TransitionTarget"},{"location":"api/coil-base/alltypes/#coilsizeviewsizeresolver","text":"A SizeResolver that measures the size of a View . |","title":"coil.size.ViewSizeResolver"},{"location":"api/coil-base/alltypes/#coiltargetviewtarget","text":"A Target with an associated View . Prefer this to Target if the given drawables will only be used by view .","title":"coil.target.ViewTarget"},{"location":"api/coil-base/coil/","text":"coil-base / coil Package coil Types Name Summary ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. class ComponentRegistry EventListener A listener for tracking the progress of an image request. This class is useful for measuring analytics, performance, or other metrics tracking. interface EventListener : Listener ImageLoader A service class that loads images by executing ImageRequest s. Image loaders handle caching, data fetching, image decoding, request management, bitmap pooling, memory management, and more. interface ImageLoader Functions Name Summary executeBlocking Execute the request and block the current thread until it completes. fun ImageLoader .executeBlocking(request: ImageRequest ): ImageResult","title":"Home"},{"location":"api/coil-base/coil/#package-coil","text":"","title":"Package coil"},{"location":"api/coil-base/coil/#types","text":"Name Summary ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. class ComponentRegistry EventListener A listener for tracking the progress of an image request. This class is useful for measuring analytics, performance, or other metrics tracking. interface EventListener : Listener ImageLoader A service class that loads images by executing ImageRequest s. Image loaders handle caching, data fetching, image decoding, request management, bitmap pooling, memory management, and more. interface ImageLoader","title":"Types"},{"location":"api/coil-base/coil/#functions","text":"Name Summary executeBlocking Execute the request and block the current thread until it completes. fun ImageLoader .executeBlocking(request: ImageRequest ): ImageResult","title":"Functions"},{"location":"api/coil-base/coil/execute-blocking/","text":"coil-base / coil / executeBlocking executeBlocking @WorkerThread fun ImageLoader .executeBlocking(request: ImageRequest ): ImageResult Execute the request and block the current thread until it completes. See Also ImageLoader.execute","title":"Execute blocking"},{"location":"api/coil-base/coil/execute-blocking/#executeblocking","text":"@WorkerThread fun ImageLoader .executeBlocking(request: ImageRequest ): ImageResult Execute the request and block the current thread until it completes. See Also ImageLoader.execute","title":"executeBlocking"},{"location":"api/coil-base/coil/-component-registry/","text":"coil-base / coil / ComponentRegistry ComponentRegistry class ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. Use this class to register support for custom Interceptor s, Mapper s, Fetcher s, and Decoder s. Types Name Summary Builder class Builder Constructors Name Summary init ComponentRegistry() Functions Name Summary newBuilder fun newBuilder(): Builder","title":"Home"},{"location":"api/coil-base/coil/-component-registry/#componentregistry","text":"class ComponentRegistry Registry for all the components that an ImageLoader uses to fulfil image requests. Use this class to register support for custom Interceptor s, Mapper s, Fetcher s, and Decoder s.","title":"ComponentRegistry"},{"location":"api/coil-base/coil/-component-registry/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"api/coil-base/coil/-component-registry/#constructors","text":"Name Summary init ComponentRegistry()","title":"Constructors"},{"location":"api/coil-base/coil/-component-registry/#functions","text":"Name Summary newBuilder fun newBuilder(): Builder","title":"Functions"},{"location":"api/coil-base/coil/-component-registry/-init-/","text":"coil-base / coil / ComponentRegistry / init init ComponentRegistry()","title":" init "},{"location":"api/coil-base/coil/-component-registry/-init-/#init","text":"ComponentRegistry()","title":"&lt;init&gt;"},{"location":"api/coil-base/coil/-component-registry/new-builder/","text":"coil-base / coil / ComponentRegistry / newBuilder newBuilder fun newBuilder(): Builder","title":"New builder"},{"location":"api/coil-base/coil/-component-registry/new-builder/#newbuilder","text":"fun newBuilder(): Builder","title":"newBuilder"},{"location":"api/coil-base/coil/-component-registry/-builder/","text":"coil-base / coil / ComponentRegistry / Builder Builder class Builder Constructors Name Summary init Builder() Builder(registry: ComponentRegistry ) Functions Name Summary add Register an Interceptor . fun add(interceptor: Interceptor ): Builder Register a Mapper . fun T : Any add(mapper: Mapper T, * ): Builder Register a Fetcher . fun T : Any add(fetcher: Fetcher T ): Builder Register a Decoder . fun add(decoder: Decoder ): Builder build fun build(): ComponentRegistry","title":"Home"},{"location":"api/coil-base/coil/-component-registry/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"api/coil-base/coil/-component-registry/-builder/#constructors","text":"Name Summary init Builder() Builder(registry: ComponentRegistry )","title":"Constructors"},{"location":"api/coil-base/coil/-component-registry/-builder/#functions","text":"Name Summary add Register an Interceptor . fun add(interceptor: Interceptor ): Builder Register a Mapper . fun T : Any add(mapper: Mapper T, * ): Builder Register a Fetcher . fun T : Any add(fetcher: Fetcher T ): Builder Register a Decoder . fun add(decoder: Decoder ): Builder build fun build(): ComponentRegistry","title":"Functions"},{"location":"api/coil-base/coil/-component-registry/-builder/-init-/","text":"coil-base / coil / ComponentRegistry / Builder / init init Builder() Builder(registry: ComponentRegistry )","title":" init "},{"location":"api/coil-base/coil/-component-registry/-builder/-init-/#init","text":"Builder() Builder(registry: ComponentRegistry )","title":"&lt;init&gt;"},{"location":"api/coil-base/coil/-component-registry/-builder/add/","text":"coil-base / coil / ComponentRegistry / Builder / add add fun add(interceptor: Interceptor ): Builder Register an Interceptor . fun reified T : Any add(mapper: Mapper T, * ): Builder Register a Mapper . fun reified T : Any add(fetcher: Fetcher T ): Builder Register a Fetcher . fun add(decoder: Decoder ): Builder Register a Decoder .","title":"Add"},{"location":"api/coil-base/coil/-component-registry/-builder/add/#add","text":"fun add(interceptor: Interceptor ): Builder Register an Interceptor . fun reified T : Any add(mapper: Mapper T, * ): Builder Register a Mapper . fun reified T : Any add(fetcher: Fetcher T ): Builder Register a Fetcher . fun add(decoder: Decoder ): Builder Register a Decoder .","title":"add"},{"location":"api/coil-base/coil/-component-registry/-builder/build/","text":"coil-base / coil / ComponentRegistry / Builder / build build fun build(): ComponentRegistry","title":"Build"},{"location":"api/coil-base/coil/-component-registry/-builder/build/#build","text":"fun build(): ComponentRegistry","title":"build"},{"location":"api/coil-base/coil/-event-listener/","text":"coil-base / coil / EventListener EventListener interface EventListener : Listener A listener for tracking the progress of an image request. This class is useful for measuring analytics, performance, or other metrics tracking. See Also ImageLoader.Builder.eventListener Types Name Summary Factory interface Factory Functions Name Summary no name provided A factory that creates new EventListener instances. abstract fun no name provided (): Unit decodeEnd Called after Decoder.decode . open fun decodeEnd(request: ImageRequest , decoder: Decoder , options: Options , result: DecodeResult ): Unit decodeStart Called before Decoder.decode . open fun decodeStart(request: ImageRequest , decoder: Decoder , options: Options ): Unit fetchEnd Called after Fetcher.fetch . open fun fetchEnd(request: ImageRequest , fetcher: Fetcher * , options: Options , result: FetchResult ): Unit fetchStart Called before Fetcher.fetch . open fun fetchStart(request: ImageRequest , fetcher: Fetcher * , options: Options ): Unit mapEnd Called after Mapper.map . open fun mapEnd(request: ImageRequest , output: Any ): Unit mapStart Called before Mapper.map . open fun mapStart(request: ImageRequest , input: Any ): Unit onCancel open fun onCancel(request: ImageRequest ): Unit onError open fun onError(request: ImageRequest , throwable: Throwable ): Unit onStart open fun onStart(request: ImageRequest ): Unit onSuccess open fun onSuccess(request: ImageRequest , metadata: Metadata): Unit resolveSizeEnd Called after SizeResolver.size . open fun resolveSizeEnd(request: ImageRequest , size: Size ): Unit resolveSizeStart Called before SizeResolver.size . open fun resolveSizeStart(request: ImageRequest ): Unit transformEnd Called after any Transformation s are applied. open fun transformEnd(request: ImageRequest , output: Bitmap ): Unit transformStart Called before any Transformation s are applied. open fun transformStart(request: ImageRequest , input: Bitmap ): Unit transitionEnd Called after Transition.transition . open fun transitionEnd(request: ImageRequest ): Unit transitionStart Called before Transition.transition . open fun transitionStart(request: ImageRequest ): Unit Companion Object Properties Name Summary NONE val NONE: EventListener","title":"Home"},{"location":"api/coil-base/coil/-event-listener/#eventlistener","text":"interface EventListener : Listener A listener for tracking the progress of an image request. This class is useful for measuring analytics, performance, or other metrics tracking. See Also ImageLoader.Builder.eventListener","title":"EventListener"},{"location":"api/coil-base/coil/-event-listener/#types","text":"Name Summary Factory interface Factory","title":"Types"},{"location":"api/coil-base/coil/-event-listener/#functions","text":"Name Summary no name provided A factory that creates new EventListener instances. abstract fun no name provided (): Unit decodeEnd Called after Decoder.decode . open fun decodeEnd(request: ImageRequest , decoder: Decoder , options: Options , result: DecodeResult ): Unit decodeStart Called before Decoder.decode . open fun decodeStart(request: ImageRequest , decoder: Decoder , options: Options ): Unit fetchEnd Called after Fetcher.fetch . open fun fetchEnd(request: ImageRequest , fetcher: Fetcher * , options: Options , result: FetchResult ): Unit fetchStart Called before Fetcher.fetch . open fun fetchStart(request: ImageRequest , fetcher: Fetcher * , options: Options ): Unit mapEnd Called after Mapper.map . open fun mapEnd(request: ImageRequest , output: Any ): Unit mapStart Called before Mapper.map . open fun mapStart(request: ImageRequest , input: Any ): Unit onCancel open fun onCancel(request: ImageRequest ): Unit onError open fun onError(request: ImageRequest , throwable: Throwable ): Unit onStart open fun onStart(request: ImageRequest ): Unit onSuccess open fun onSuccess(request: ImageRequest , metadata: Metadata): Unit resolveSizeEnd Called after SizeResolver.size . open fun resolveSizeEnd(request: ImageRequest , size: Size ): Unit resolveSizeStart Called before SizeResolver.size . open fun resolveSizeStart(request: ImageRequest ): Unit transformEnd Called after any Transformation s are applied. open fun transformEnd(request: ImageRequest , output: Bitmap ): Unit transformStart Called before any Transformation s are applied. open fun transformStart(request: ImageRequest , input: Bitmap ): Unit transitionEnd Called after Transition.transition . open fun transitionEnd(request: ImageRequest ): Unit transitionStart Called before Transition.transition . open fun transitionStart(request: ImageRequest ): Unit","title":"Functions"},{"location":"api/coil-base/coil/-event-listener/#companion-object-properties","text":"Name Summary NONE val NONE: EventListener","title":"Companion Object Properties"},{"location":"api/coil-base/coil/-event-listener/-n-o-n-e/","text":"coil-base / coil / EventListener / NONE NONE val NONE: EventListener","title":" n o n e"},{"location":"api/coil-base/coil/-event-listener/-n-o-n-e/#none","text":"val NONE: EventListener","title":"NONE"},{"location":"api/coil-base/coil/-event-listener/-no name provided-/","text":"coil-base / coil / EventListener / no name provided no name provided abstract fun no name provided (): Unit A factory that creates new EventListener instances.","title":" no name provided "},{"location":"api/coil-base/coil/-event-listener/-no name provided-/#no-name-provided","text":"abstract fun no name provided (): Unit A factory that creates new EventListener instances.","title":"&lt;no name provided&gt;"},{"location":"api/coil-base/coil/-event-listener/decode-end/","text":"coil-base / coil / EventListener / decodeEnd decodeEnd @WorkerThread open fun decodeEnd(request: ImageRequest , decoder: Decoder , options: Options , result: DecodeResult ): Unit Called after Decoder.decode . This is skipped if Fetcher.fetch does not return a SourceResult . Parameters decoder - The Decoder that was used to handle the request. options - The Options that were passed to Decoder.decode . result - The result of Decoder.decode . Do not keep a reference to result or its data outside the scope of this method.","title":"Decode end"},{"location":"api/coil-base/coil/-event-listener/decode-end/#decodeend","text":"@WorkerThread open fun decodeEnd(request: ImageRequest , decoder: Decoder , options: Options , result: DecodeResult ): Unit Called after Decoder.decode . This is skipped if Fetcher.fetch does not return a SourceResult .","title":"decodeEnd"},{"location":"api/coil-base/coil/-event-listener/decode-end/#parameters","text":"decoder - The Decoder that was used to handle the request. options - The Options that were passed to Decoder.decode . result - The result of Decoder.decode . Do not keep a reference to result or its data outside the scope of this method.","title":"Parameters"},{"location":"api/coil-base/coil/-event-listener/decode-start/","text":"coil-base / coil / EventListener / decodeStart decodeStart @WorkerThread open fun decodeStart(request: ImageRequest , decoder: Decoder , options: Options ): Unit Called before Decoder.decode . This is skipped if Fetcher.fetch does not return a SourceResult . Parameters decoder - The Decoder that will be used to handle the request. options - The Options that will be passed to Decoder.decode .","title":"Decode start"},{"location":"api/coil-base/coil/-event-listener/decode-start/#decodestart","text":"@WorkerThread open fun decodeStart(request: ImageRequest , decoder: Decoder , options: Options ): Unit Called before Decoder.decode . This is skipped if Fetcher.fetch does not return a SourceResult .","title":"decodeStart"},{"location":"api/coil-base/coil/-event-listener/decode-start/#parameters","text":"decoder - The Decoder that will be used to handle the request. options - The Options that will be passed to Decoder.decode .","title":"Parameters"},{"location":"api/coil-base/coil/-event-listener/fetch-end/","text":"coil-base / coil / EventListener / fetchEnd fetchEnd @WorkerThread open fun fetchEnd(request: ImageRequest , fetcher: Fetcher * , options: Options , result: FetchResult ): Unit Called after Fetcher.fetch . Parameters fetcher - The Fetcher that was used to handle the request. options - The Options that were passed to Fetcher.fetch . result - The result of Fetcher.fetch . Do not keep a reference to result or its data outside the scope of this method.","title":"Fetch end"},{"location":"api/coil-base/coil/-event-listener/fetch-end/#fetchend","text":"@WorkerThread open fun fetchEnd(request: ImageRequest , fetcher: Fetcher * , options: Options , result: FetchResult ): Unit Called after Fetcher.fetch .","title":"fetchEnd"},{"location":"api/coil-base/coil/-event-listener/fetch-end/#parameters","text":"fetcher - The Fetcher that was used to handle the request. options - The Options that were passed to Fetcher.fetch . result - The result of Fetcher.fetch . Do not keep a reference to result or its data outside the scope of this method.","title":"Parameters"},{"location":"api/coil-base/coil/-event-listener/fetch-start/","text":"coil-base / coil / EventListener / fetchStart fetchStart @WorkerThread open fun fetchStart(request: ImageRequest , fetcher: Fetcher * , options: Options ): Unit Called before Fetcher.fetch . Parameters fetcher - The Fetcher that will be used to handle the request. options - The Options that will be passed to Fetcher.fetch .","title":"Fetch start"},{"location":"api/coil-base/coil/-event-listener/fetch-start/#fetchstart","text":"@WorkerThread open fun fetchStart(request: ImageRequest , fetcher: Fetcher * , options: Options ): Unit Called before Fetcher.fetch .","title":"fetchStart"},{"location":"api/coil-base/coil/-event-listener/fetch-start/#parameters","text":"fetcher - The Fetcher that will be used to handle the request. options - The Options that will be passed to Fetcher.fetch .","title":"Parameters"},{"location":"api/coil-base/coil/-event-listener/map-end/","text":"coil-base / coil / EventListener / mapEnd mapEnd @AnyThread open fun mapEnd(request: ImageRequest , output: Any ): Unit Called after Mapper.map . Parameters output - The data after it has been converted. If there were no applicable mappers, output will be the same as ImageRequest.data .","title":"Map end"},{"location":"api/coil-base/coil/-event-listener/map-end/#mapend","text":"@AnyThread open fun mapEnd(request: ImageRequest , output: Any ): Unit Called after Mapper.map .","title":"mapEnd"},{"location":"api/coil-base/coil/-event-listener/map-end/#parameters","text":"output - The data after it has been converted. If there were no applicable mappers, output will be the same as ImageRequest.data .","title":"Parameters"},{"location":"api/coil-base/coil/-event-listener/map-start/","text":"coil-base / coil / EventListener / mapStart mapStart @AnyThread open fun mapStart(request: ImageRequest , input: Any ): Unit Called before Mapper.map . Parameters input - The data that will be converted.","title":"Map start"},{"location":"api/coil-base/coil/-event-listener/map-start/#mapstart","text":"@AnyThread open fun mapStart(request: ImageRequest , input: Any ): Unit Called before Mapper.map .","title":"mapStart"},{"location":"api/coil-base/coil/-event-listener/map-start/#parameters","text":"input - The data that will be converted.","title":"Parameters"},{"location":"api/coil-base/coil/-event-listener/on-cancel/","text":"coil-base / coil / EventListener / onCancel onCancel @MainThread open fun onCancel(request: ImageRequest ): Unit See Also ImageRequest.Listener.onCancel","title":"On cancel"},{"location":"api/coil-base/coil/-event-listener/on-cancel/#oncancel","text":"@MainThread open fun onCancel(request: ImageRequest ): Unit See Also ImageRequest.Listener.onCancel","title":"onCancel"},{"location":"api/coil-base/coil/-event-listener/on-error/","text":"coil-base / coil / EventListener / onError onError @MainThread open fun onError(request: ImageRequest , throwable: Throwable ): Unit See Also ImageRequest.Listener.onError","title":"On error"},{"location":"api/coil-base/coil/-event-listener/on-error/#onerror","text":"@MainThread open fun onError(request: ImageRequest , throwable: Throwable ): Unit See Also ImageRequest.Listener.onError","title":"onError"},{"location":"api/coil-base/coil/-event-listener/on-start/","text":"coil-base / coil / EventListener / onStart onStart @MainThread open fun onStart(request: ImageRequest ): Unit See Also ImageRequest.Listener.onStart","title":"On start"},{"location":"api/coil-base/coil/-event-listener/on-start/#onstart","text":"@MainThread open fun onStart(request: ImageRequest ): Unit See Also ImageRequest.Listener.onStart","title":"onStart"},{"location":"api/coil-base/coil/-event-listener/on-success/","text":"coil-base / coil / EventListener / onSuccess onSuccess @MainThread open fun onSuccess(request: ImageRequest , metadata: Metadata): Unit See Also ImageRequest.Listener.onSuccess","title":"On success"},{"location":"api/coil-base/coil/-event-listener/on-success/#onsuccess","text":"@MainThread open fun onSuccess(request: ImageRequest , metadata: Metadata): Unit See Also ImageRequest.Listener.onSuccess","title":"onSuccess"},{"location":"api/coil-base/coil/-event-listener/resolve-size-end/","text":"coil-base / coil / EventListener / resolveSizeEnd resolveSizeEnd @MainThread open fun resolveSizeEnd(request: ImageRequest , size: Size ): Unit Called after SizeResolver.size . Parameters size - The resolved Size for this request.","title":"Resolve size end"},{"location":"api/coil-base/coil/-event-listener/resolve-size-end/#resolvesizeend","text":"@MainThread open fun resolveSizeEnd(request: ImageRequest , size: Size ): Unit Called after SizeResolver.size .","title":"resolveSizeEnd"},{"location":"api/coil-base/coil/-event-listener/resolve-size-end/#parameters","text":"size - The resolved Size for this request.","title":"Parameters"},{"location":"api/coil-base/coil/-event-listener/resolve-size-start/","text":"coil-base / coil / EventListener / resolveSizeStart resolveSizeStart @MainThread open fun resolveSizeStart(request: ImageRequest ): Unit Called before SizeResolver.size .","title":"Resolve size start"},{"location":"api/coil-base/coil/-event-listener/resolve-size-start/#resolvesizestart","text":"@MainThread open fun resolveSizeStart(request: ImageRequest ): Unit Called before SizeResolver.size .","title":"resolveSizeStart"},{"location":"api/coil-base/coil/-event-listener/transform-end/","text":"coil-base / coil / EventListener / transformEnd transformEnd @WorkerThread open fun transformEnd(request: ImageRequest , output: Bitmap ): Unit Called after any Transformation s are applied. This is skipped if ImageRequest.transformations is empty. Parameters output - The Bitmap that was transformed. Do not keep a reference to output outside the scope of this method.","title":"Transform end"},{"location":"api/coil-base/coil/-event-listener/transform-end/#transformend","text":"@WorkerThread open fun transformEnd(request: ImageRequest , output: Bitmap ): Unit Called after any Transformation s are applied. This is skipped if ImageRequest.transformations is empty.","title":"transformEnd"},{"location":"api/coil-base/coil/-event-listener/transform-end/#parameters","text":"output - The Bitmap that was transformed. Do not keep a reference to output outside the scope of this method.","title":"Parameters"},{"location":"api/coil-base/coil/-event-listener/transform-start/","text":"coil-base / coil / EventListener / transformStart transformStart @WorkerThread open fun transformStart(request: ImageRequest , input: Bitmap ): Unit Called before any Transformation s are applied. This is skipped if ImageRequest.transformations is empty. Parameters input - The Bitmap that will be transformed. Do not keep a reference to input outside the scope of this method.","title":"Transform start"},{"location":"api/coil-base/coil/-event-listener/transform-start/#transformstart","text":"@WorkerThread open fun transformStart(request: ImageRequest , input: Bitmap ): Unit Called before any Transformation s are applied. This is skipped if ImageRequest.transformations is empty.","title":"transformStart"},{"location":"api/coil-base/coil/-event-listener/transform-start/#parameters","text":"input - The Bitmap that will be transformed. Do not keep a reference to input outside the scope of this method.","title":"Parameters"},{"location":"api/coil-base/coil/-event-listener/transition-end/","text":"coil-base / coil / EventListener / transitionEnd transitionEnd @MainThread open fun transitionEnd(request: ImageRequest ): Unit Called after Transition.transition . This is skipped if ImageRequest.transition is Transition.NONE or ImageRequest.target does not implement TransitionTarget .","title":"Transition end"},{"location":"api/coil-base/coil/-event-listener/transition-end/#transitionend","text":"@MainThread open fun transitionEnd(request: ImageRequest ): Unit Called after Transition.transition . This is skipped if ImageRequest.transition is Transition.NONE or ImageRequest.target does not implement TransitionTarget .","title":"transitionEnd"},{"location":"api/coil-base/coil/-event-listener/transition-start/","text":"coil-base / coil / EventListener / transitionStart transitionStart @MainThread open fun transitionStart(request: ImageRequest ): Unit Called before Transition.transition . This is skipped if ImageRequest.transition is Transition.NONE or ImageRequest.target does not implement TransitionTarget .","title":"Transition start"},{"location":"api/coil-base/coil/-event-listener/transition-start/#transitionstart","text":"@MainThread open fun transitionStart(request: ImageRequest ): Unit Called before Transition.transition . This is skipped if ImageRequest.transition is Transition.NONE or ImageRequest.target does not implement TransitionTarget .","title":"transitionStart"},{"location":"api/coil-base/coil/-event-listener/-factory/","text":"coil-base / coil / EventListener / Factory Factory interface Factory Functions Name Summary create Return a new EventListener . abstract fun create(request: ImageRequest ): EventListener Companion Object Properties Name Summary NONE val NONE: ERROR CLASS Companion Object Functions Name Summary invoke Create an EventListener.Factory that always returns listener . operator fun invoke(listener: EventListener ): ERROR CLASS","title":"Home"},{"location":"api/coil-base/coil/-event-listener/-factory/#factory","text":"interface Factory","title":"Factory"},{"location":"api/coil-base/coil/-event-listener/-factory/#functions","text":"Name Summary create Return a new EventListener . abstract fun create(request: ImageRequest ): EventListener","title":"Functions"},{"location":"api/coil-base/coil/-event-listener/-factory/#companion-object-properties","text":"Name Summary NONE val NONE: ERROR CLASS","title":"Companion Object Properties"},{"location":"api/coil-base/coil/-event-listener/-factory/#companion-object-functions","text":"Name Summary invoke Create an EventListener.Factory that always returns listener . operator fun invoke(listener: EventListener ): ERROR CLASS","title":"Companion Object Functions"},{"location":"api/coil-base/coil/-event-listener/-factory/-n-o-n-e/","text":"coil-base / coil / EventListener / Factory / NONE NONE val NONE: ERROR CLASS","title":" n o n e"},{"location":"api/coil-base/coil/-event-listener/-factory/-n-o-n-e/#none","text":"val NONE: ERROR CLASS","title":"NONE"},{"location":"api/coil-base/coil/-event-listener/-factory/create/","text":"coil-base / coil / EventListener / Factory / create create abstract fun create(request: ImageRequest ): EventListener Return a new EventListener .","title":"Create"},{"location":"api/coil-base/coil/-event-listener/-factory/create/#create","text":"abstract fun create(request: ImageRequest ): EventListener Return a new EventListener .","title":"create"},{"location":"api/coil-base/coil/-event-listener/-factory/invoke/","text":"coil-base / coil / EventListener / Factory / invoke invoke @JvmStatic @JvmName(\"create\") operator fun invoke(listener: EventListener ): ERROR CLASS Create an EventListener.Factory that always returns listener .","title":"Invoke"},{"location":"api/coil-base/coil/-event-listener/-factory/invoke/#invoke","text":"@JvmStatic @JvmName(\"create\") operator fun invoke(listener: EventListener ): ERROR CLASS Create an EventListener.Factory that always returns listener .","title":"invoke"},{"location":"api/coil-base/coil/-image-loader/","text":"coil-base / coil / ImageLoader ImageLoader interface ImageLoader A service class that loads images by executing ImageRequest s. Image loaders handle caching, data fetching, image decoding, request management, bitmap pooling, memory management, and more. Image loaders are designed to be shareable and work best when you create a single instance and share it throughout your app. Types Name Summary Builder class Builder Properties Name Summary bitmapPool An object pool of reusable Bitmap s. abstract val bitmapPool: BitmapPool defaults The default options that are used to fill in unset ImageRequest values. abstract val defaults: DefaultRequestOptions memoryCache An in-memory cache of recently loaded images. abstract val memoryCache: MemoryCache Functions Name Summary enqueue Enqueue the request to be executed asynchronously. abstract fun enqueue(request: ImageRequest ): Disposable execute Execute the request in the current coroutine scope. abstract suspend fun execute(request: ImageRequest ): ImageResult newBuilder Create an ImageLoader.Builder that shares the same resources and configuration as this image loader. abstract fun newBuilder(): Builder shutdown Shutdown this image loader. abstract fun shutdown(): Unit Companion Object Functions Name Summary invoke Create a new ImageLoader without configuration. operator fun invoke(context: Context ): ImageLoader Extension Functions Name Summary executeBlocking Execute the request and block the current thread until it completes. fun ImageLoader .executeBlocking(request: ImageRequest ): ImageResult","title":"Home"},{"location":"api/coil-base/coil/-image-loader/#imageloader","text":"interface ImageLoader A service class that loads images by executing ImageRequest s. Image loaders handle caching, data fetching, image decoding, request management, bitmap pooling, memory management, and more. Image loaders are designed to be shareable and work best when you create a single instance and share it throughout your app.","title":"ImageLoader"},{"location":"api/coil-base/coil/-image-loader/#types","text":"Name Summary Builder class Builder","title":"Types"},{"location":"api/coil-base/coil/-image-loader/#properties","text":"Name Summary bitmapPool An object pool of reusable Bitmap s. abstract val bitmapPool: BitmapPool defaults The default options that are used to fill in unset ImageRequest values. abstract val defaults: DefaultRequestOptions memoryCache An in-memory cache of recently loaded images. abstract val memoryCache: MemoryCache","title":"Properties"},{"location":"api/coil-base/coil/-image-loader/#functions","text":"Name Summary enqueue Enqueue the request to be executed asynchronously. abstract fun enqueue(request: ImageRequest ): Disposable execute Execute the request in the current coroutine scope. abstract suspend fun execute(request: ImageRequest ): ImageResult newBuilder Create an ImageLoader.Builder that shares the same resources and configuration as this image loader. abstract fun newBuilder(): Builder shutdown Shutdown this image loader. abstract fun shutdown(): Unit","title":"Functions"},{"location":"api/coil-base/coil/-image-loader/#companion-object-functions","text":"Name Summary invoke Create a new ImageLoader without configuration. operator fun invoke(context: Context ): ImageLoader","title":"Companion Object Functions"},{"location":"api/coil-base/coil/-image-loader/#extension-functions","text":"Name Summary executeBlocking Execute the request and block the current thread until it completes. fun ImageLoader .executeBlocking(request: ImageRequest ): ImageResult","title":"Extension Functions"},{"location":"api/coil-base/coil/-image-loader/bitmap-pool/","text":"coil-base / coil / ImageLoader / bitmapPool bitmapPool abstract val bitmapPool: BitmapPool An object pool of reusable Bitmap s.","title":"Bitmap pool"},{"location":"api/coil-base/coil/-image-loader/bitmap-pool/#bitmappool","text":"abstract val bitmapPool: BitmapPool An object pool of reusable Bitmap s.","title":"bitmapPool"},{"location":"api/coil-base/coil/-image-loader/defaults/","text":"coil-base / coil / ImageLoader / defaults defaults abstract val defaults: DefaultRequestOptions The default options that are used to fill in unset ImageRequest values.","title":"Defaults"},{"location":"api/coil-base/coil/-image-loader/defaults/#defaults","text":"abstract val defaults: DefaultRequestOptions The default options that are used to fill in unset ImageRequest values.","title":"defaults"},{"location":"api/coil-base/coil/-image-loader/enqueue/","text":"coil-base / coil / ImageLoader / enqueue enqueue abstract fun enqueue(request: ImageRequest ): Disposable Enqueue the request to be executed asynchronously. Parameters request - The request to execute. Return A Disposable which can be used to cancel or check the status of the request.","title":"Enqueue"},{"location":"api/coil-base/coil/-image-loader/enqueue/#enqueue","text":"abstract fun enqueue(request: ImageRequest ): Disposable Enqueue the request to be executed asynchronously.","title":"enqueue"},{"location":"api/coil-base/coil/-image-loader/enqueue/#parameters","text":"request - The request to execute. Return A Disposable which can be used to cancel or check the status of the request.","title":"Parameters"},{"location":"api/coil-base/coil/-image-loader/execute/","text":"coil-base / coil / ImageLoader / execute execute abstract suspend fun execute(request: ImageRequest ): ImageResult Execute the request in the current coroutine scope. NOTE: If ImageRequest.target is a ViewTarget , the job will automatically be cancelled if its view is detached. Parameters request - The request to execute. Return A SuccessResult if the request completes successfully. Else, returns an ErrorResult .","title":"Execute"},{"location":"api/coil-base/coil/-image-loader/execute/#execute","text":"abstract suspend fun execute(request: ImageRequest ): ImageResult Execute the request in the current coroutine scope. NOTE: If ImageRequest.target is a ViewTarget , the job will automatically be cancelled if its view is detached.","title":"execute"},{"location":"api/coil-base/coil/-image-loader/execute/#parameters","text":"request - The request to execute. Return A SuccessResult if the request completes successfully. Else, returns an ErrorResult .","title":"Parameters"},{"location":"api/coil-base/coil/-image-loader/invoke/","text":"coil-base / coil / ImageLoader / invoke invoke @JvmStatic @JvmName(\"create\") operator fun invoke(context: Context ): ImageLoader Create a new ImageLoader without configuration.","title":"Invoke"},{"location":"api/coil-base/coil/-image-loader/invoke/#invoke","text":"@JvmStatic @JvmName(\"create\") operator fun invoke(context: Context ): ImageLoader Create a new ImageLoader without configuration.","title":"invoke"},{"location":"api/coil-base/coil/-image-loader/memory-cache/","text":"coil-base / coil / ImageLoader / memoryCache memoryCache abstract val memoryCache: MemoryCache An in-memory cache of recently loaded images.","title":"Memory cache"},{"location":"api/coil-base/coil/-image-loader/memory-cache/#memorycache","text":"abstract val memoryCache: MemoryCache An in-memory cache of recently loaded images.","title":"memoryCache"},{"location":"api/coil-base/coil/-image-loader/new-builder/","text":"coil-base / coil / ImageLoader / newBuilder newBuilder abstract fun newBuilder(): Builder Create an ImageLoader.Builder that shares the same resources and configuration as this image loader.","title":"New builder"},{"location":"api/coil-base/coil/-image-loader/new-builder/#newbuilder","text":"abstract fun newBuilder(): Builder Create an ImageLoader.Builder that shares the same resources and configuration as this image loader.","title":"newBuilder"},{"location":"api/coil-base/coil/-image-loader/shutdown/","text":"coil-base / coil / ImageLoader / shutdown shutdown abstract fun shutdown(): Unit Shutdown this image loader. All associated resources will be freed and new requests will fail before starting. Shutting down an image loader is optional. It will be cleaned up automatically if dereferenced. In progress enqueue requests will be cancelled immediately. In progress execute requests will continue until complete.","title":"Shutdown"},{"location":"api/coil-base/coil/-image-loader/shutdown/#shutdown","text":"abstract fun shutdown(): Unit Shutdown this image loader. All associated resources will be freed and new requests will fail before starting. Shutting down an image loader is optional. It will be cleaned up automatically if dereferenced. In progress enqueue requests will be cancelled immediately. In progress execute requests will continue until complete.","title":"shutdown"},{"location":"api/coil-base/coil/-image-loader/-builder/","text":"coil-base / coil / ImageLoader / Builder Builder class Builder Constructors Name Summary init Builder(context: Context ) Functions Name Summary addLastModifiedToFileCacheKey Enables adding File.lastModified to the memory cache key when loading an image from a File . fun addLastModifiedToFileCacheKey(enable: Boolean ): Builder allowHardware Allow the use of Bitmap.Config.HARDWARE . fun allowHardware(enable: Boolean ): Builder allowRgb565 Allow automatically using Bitmap.Config.RGB_565 when an image is guaranteed to not have alpha. fun allowRgb565(enable: Boolean ): Builder availableMemoryPercentage Set the percentage of available memory to devote to this ImageLoader 's memory cache and bitmap pool. fun availableMemoryPercentage(percent: Double ): Builder bitmapConfig Set the preferred Bitmap.Config . fun bitmapConfig(bitmapConfig: Config ): Builder bitmapPoolingEnabled Enables counting references to bitmaps so they can be automatically reused by a BitmapPool when their reference count reaches zero. fun bitmapPoolingEnabled(enable: Boolean ): Builder bitmapPoolPercentage Set the percentage of memory allocated to this ImageLoader to allocate to bitmap pooling. fun bitmapPoolPercentage(percent: Double ): Builder build Create a new ImageLoader instance. fun build(): ImageLoader callFactory Set the Call.Factory used for network requests. fun callFactory(callFactory: Factory ): Builder Set a lazy callback to create the Call.Factory used for network requests. fun callFactory(initializer: () - Factory ): Builder componentRegistry Build and set the ComponentRegistry . fun componentRegistry(builder: Builder.() - Unit ): Builder Set the ComponentRegistry . fun componentRegistry(registry: ComponentRegistry ): Builder crossfade Enable a crossfade animation with duration CrossfadeDrawable.DEFAULT_DURATION milliseconds when a request completes successfully. fun crossfade(enable: Boolean ): Builder Enable a crossfade animation with durationMillis milliseconds when a request completes successfully. fun crossfade(durationMillis: Int ): Builder diskCachePolicy Set the default disk cache policy. fun diskCachePolicy(policy: CachePolicy ): Builder dispatcher The default CoroutineDispatcher to run image requests on. fun dispatcher(dispatcher: CoroutineDispatcher ): Builder error Set the default error drawable to use when a request fails. fun error(drawableResId: Int ): Builder fun error(drawable: Drawable ?): Builder eventListener Set a single EventListener that will receive all callbacks for requests launched by this image loader. fun eventListener(listener: EventListener ): ERROR CLASS Set the EventListener.Factory to create per-request EventListener s. fun eventListener(factory: Factory): Builder fallback Set the default fallback drawable to use if ImageRequest.data is null. fun fallback(drawableResId: Int ): Builder fun fallback(drawable: Drawable ?): Builder launchInterceptorChainOnMainThread Enables launching the Interceptor chain on the main thread. fun launchInterceptorChainOnMainThread(enable: Boolean ): Builder logger Set the Logger to write logs to. fun logger(logger: Logger ?): Builder memoryCache Set the MemoryCache . This also sets the BitmapPool to the instance used by this MemoryCache . fun memoryCache(memoryCache: MemoryCache ): Builder memoryCachePolicy Set the default memory cache policy. fun memoryCachePolicy(policy: CachePolicy ): Builder networkCachePolicy Set the default network cache policy. fun networkCachePolicy(policy: CachePolicy ): Builder okHttpClient Set the OkHttpClient used for network requests. fun okHttpClient(okHttpClient: OkHttpClient ): Builder Set a lazy callback to create the OkHttpClient used for network requests. fun okHttpClient(initializer: () - OkHttpClient ): Builder placeholder Set the default placeholder drawable to use when a request starts. fun placeholder(drawableResId: Int ): Builder fun placeholder(drawable: Drawable ?): Builder precision Set the default precision for a request. Precision controls whether the size of the loaded image must match the request's size exactly or not. fun precision(precision: Precision ): Builder trackWeakReferences Enables weak reference tracking of loaded images. fun trackWeakReferences(enable: Boolean ): Builder transition Set the default Transition for each request. fun transition(transition: Transition ): Builder","title":"Home"},{"location":"api/coil-base/coil/-image-loader/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"api/coil-base/coil/-image-loader/-builder/#constructors","text":"Name Summary init Builder(context: Context )","title":"Constructors"},{"location":"api/coil-base/coil/-image-loader/-builder/#functions","text":"Name Summary addLastModifiedToFileCacheKey Enables adding File.lastModified to the memory cache key when loading an image from a File . fun addLastModifiedToFileCacheKey(enable: Boolean ): Builder allowHardware Allow the use of Bitmap.Config.HARDWARE . fun allowHardware(enable: Boolean ): Builder allowRgb565 Allow automatically using Bitmap.Config.RGB_565 when an image is guaranteed to not have alpha. fun allowRgb565(enable: Boolean ): Builder availableMemoryPercentage Set the percentage of available memory to devote to this ImageLoader 's memory cache and bitmap pool. fun availableMemoryPercentage(percent: Double ): Builder bitmapConfig Set the preferred Bitmap.Config . fun bitmapConfig(bitmapConfig: Config ): Builder bitmapPoolingEnabled Enables counting references to bitmaps so they can be automatically reused by a BitmapPool when their reference count reaches zero. fun bitmapPoolingEnabled(enable: Boolean ): Builder bitmapPoolPercentage Set the percentage of memory allocated to this ImageLoader to allocate to bitmap pooling. fun bitmapPoolPercentage(percent: Double ): Builder build Create a new ImageLoader instance. fun build(): ImageLoader callFactory Set the Call.Factory used for network requests. fun callFactory(callFactory: Factory ): Builder Set a lazy callback to create the Call.Factory used for network requests. fun callFactory(initializer: () - Factory ): Builder componentRegistry Build and set the ComponentRegistry . fun componentRegistry(builder: Builder.() - Unit ): Builder Set the ComponentRegistry . fun componentRegistry(registry: ComponentRegistry ): Builder crossfade Enable a crossfade animation with duration CrossfadeDrawable.DEFAULT_DURATION milliseconds when a request completes successfully. fun crossfade(enable: Boolean ): Builder Enable a crossfade animation with durationMillis milliseconds when a request completes successfully. fun crossfade(durationMillis: Int ): Builder diskCachePolicy Set the default disk cache policy. fun diskCachePolicy(policy: CachePolicy ): Builder dispatcher The default CoroutineDispatcher to run image requests on. fun dispatcher(dispatcher: CoroutineDispatcher ): Builder error Set the default error drawable to use when a request fails. fun error(drawableResId: Int ): Builder fun error(drawable: Drawable ?): Builder eventListener Set a single EventListener that will receive all callbacks for requests launched by this image loader. fun eventListener(listener: EventListener ): ERROR CLASS Set the EventListener.Factory to create per-request EventListener s. fun eventListener(factory: Factory): Builder fallback Set the default fallback drawable to use if ImageRequest.data is null. fun fallback(drawableResId: Int ): Builder fun fallback(drawable: Drawable ?): Builder launchInterceptorChainOnMainThread Enables launching the Interceptor chain on the main thread. fun launchInterceptorChainOnMainThread(enable: Boolean ): Builder logger Set the Logger to write logs to. fun logger(logger: Logger ?): Builder memoryCache Set the MemoryCache . This also sets the BitmapPool to the instance used by this MemoryCache . fun memoryCache(memoryCache: MemoryCache ): Builder memoryCachePolicy Set the default memory cache policy. fun memoryCachePolicy(policy: CachePolicy ): Builder networkCachePolicy Set the default network cache policy. fun networkCachePolicy(policy: CachePolicy ): Builder okHttpClient Set the OkHttpClient used for network requests. fun okHttpClient(okHttpClient: OkHttpClient ): Builder Set a lazy callback to create the OkHttpClient used for network requests. fun okHttpClient(initializer: () - OkHttpClient ): Builder placeholder Set the default placeholder drawable to use when a request starts. fun placeholder(drawableResId: Int ): Builder fun placeholder(drawable: Drawable ?): Builder precision Set the default precision for a request. Precision controls whether the size of the loaded image must match the request's size exactly or not. fun precision(precision: Precision ): Builder trackWeakReferences Enables weak reference tracking of loaded images. fun trackWeakReferences(enable: Boolean ): Builder transition Set the default Transition for each request. fun transition(transition: Transition ): Builder","title":"Functions"},{"location":"api/coil-base/coil/-image-loader/-builder/-init-/","text":"coil-base / coil / ImageLoader / Builder / init init Builder(context: Context )","title":" init "},{"location":"api/coil-base/coil/-image-loader/-builder/-init-/#init","text":"Builder(context: Context )","title":"&lt;init&gt;"},{"location":"api/coil-base/coil/-image-loader/-builder/add-last-modified-to-file-cache-key/","text":"coil-base / coil / ImageLoader / Builder / addLastModifiedToFileCacheKey addLastModifiedToFileCacheKey fun addLastModifiedToFileCacheKey(enable: Boolean ): Builder Enables adding File.lastModified to the memory cache key when loading an image from a File . This allows subsequent requests that load the same file to miss the memory cache if the file has been updated. However, if the memory cache check occurs on the main thread (see launchInterceptorChainOnMainThread ) calling File.lastModified will cause a strict mode violation. Default: true","title":"Add last modified to file cache key"},{"location":"api/coil-base/coil/-image-loader/-builder/add-last-modified-to-file-cache-key/#addlastmodifiedtofilecachekey","text":"fun addLastModifiedToFileCacheKey(enable: Boolean ): Builder Enables adding File.lastModified to the memory cache key when loading an image from a File . This allows subsequent requests that load the same file to miss the memory cache if the file has been updated. However, if the memory cache check occurs on the main thread (see launchInterceptorChainOnMainThread ) calling File.lastModified will cause a strict mode violation. Default: true","title":"addLastModifiedToFileCacheKey"},{"location":"api/coil-base/coil/-image-loader/-builder/allow-hardware/","text":"coil-base / coil / ImageLoader / Builder / allowHardware allowHardware fun allowHardware(enable: Boolean ): Builder Allow the use of Bitmap.Config.HARDWARE . If false, any use of Bitmap.Config.HARDWARE will be treated as Bitmap.Config.ARGB_8888 . NOTE: Setting this to false this will reduce performance on API 26 and above. Only disable if necessary. Default: true","title":"Allow hardware"},{"location":"api/coil-base/coil/-image-loader/-builder/allow-hardware/#allowhardware","text":"fun allowHardware(enable: Boolean ): Builder Allow the use of Bitmap.Config.HARDWARE . If false, any use of Bitmap.Config.HARDWARE will be treated as Bitmap.Config.ARGB_8888 . NOTE: Setting this to false this will reduce performance on API 26 and above. Only disable if necessary. Default: true","title":"allowHardware"},{"location":"api/coil-base/coil/-image-loader/-builder/allow-rgb565/","text":"coil-base / coil / ImageLoader / Builder / allowRgb565 allowRgb565 fun allowRgb565(enable: Boolean ): Builder Allow automatically using Bitmap.Config.RGB_565 when an image is guaranteed to not have alpha. This will reduce the visual quality of the image, but will also reduce memory usage. Prefer only enabling this for low memory and resource constrained devices. Default: false","title":"Allow rgb565"},{"location":"api/coil-base/coil/-image-loader/-builder/allow-rgb565/#allowrgb565","text":"fun allowRgb565(enable: Boolean ): Builder Allow automatically using Bitmap.Config.RGB_565 when an image is guaranteed to not have alpha. This will reduce the visual quality of the image, but will also reduce memory usage. Prefer only enabling this for low memory and resource constrained devices. Default: false","title":"allowRgb565"},{"location":"api/coil-base/coil/-image-loader/-builder/available-memory-percentage/","text":"coil-base / coil / ImageLoader / Builder / availableMemoryPercentage availableMemoryPercentage fun availableMemoryPercentage(@FloatRange(0.0, 1.0) percent: Double ): Builder Set the percentage of available memory to devote to this ImageLoader 's memory cache and bitmap pool. Setting this to 0 disables memory caching and bitmap pooling. Setting this value discards the shared memory cache set in memoryCache . Default: Utils.getDefaultAvailableMemoryPercentage","title":"Available memory percentage"},{"location":"api/coil-base/coil/-image-loader/-builder/available-memory-percentage/#availablememorypercentage","text":"fun availableMemoryPercentage(@FloatRange(0.0, 1.0) percent: Double ): Builder Set the percentage of available memory to devote to this ImageLoader 's memory cache and bitmap pool. Setting this to 0 disables memory caching and bitmap pooling. Setting this value discards the shared memory cache set in memoryCache . Default: Utils.getDefaultAvailableMemoryPercentage","title":"availableMemoryPercentage"},{"location":"api/coil-base/coil/-image-loader/-builder/bitmap-config/","text":"coil-base / coil / ImageLoader / Builder / bitmapConfig bitmapConfig fun bitmapConfig(bitmapConfig: Config ): Builder Set the preferred Bitmap.Config . This is not guaranteed and a different config may be used in some situations. Default: Utils.DEFAULT_BITMAP_CONFIG","title":"Bitmap config"},{"location":"api/coil-base/coil/-image-loader/-builder/bitmap-config/#bitmapconfig","text":"fun bitmapConfig(bitmapConfig: Config ): Builder Set the preferred Bitmap.Config . This is not guaranteed and a different config may be used in some situations. Default: Utils.DEFAULT_BITMAP_CONFIG","title":"bitmapConfig"},{"location":"api/coil-base/coil/-image-loader/-builder/bitmap-pool-percentage/","text":"coil-base / coil / ImageLoader / Builder / bitmapPoolPercentage bitmapPoolPercentage fun bitmapPoolPercentage(@FloatRange(0.0, 1.0) percent: Double ): Builder Set the percentage of memory allocated to this ImageLoader to allocate to bitmap pooling. i.e. Setting availableMemoryPercentage to 0.25 and bitmapPoolPercentage to 0.5 allows this ImageLoader to use 25% of the app's total memory and splits that memory 50/50 between the bitmap pool and memory cache. Setting this to 0 disables bitmap pooling. Setting this value discards the shared memory cache set in memoryCache . Default: Utils.getDefaultBitmapPoolPercentage","title":"Bitmap pool percentage"},{"location":"api/coil-base/coil/-image-loader/-builder/bitmap-pool-percentage/#bitmappoolpercentage","text":"fun bitmapPoolPercentage(@FloatRange(0.0, 1.0) percent: Double ): Builder Set the percentage of memory allocated to this ImageLoader to allocate to bitmap pooling. i.e. Setting availableMemoryPercentage to 0.25 and bitmapPoolPercentage to 0.5 allows this ImageLoader to use 25% of the app's total memory and splits that memory 50/50 between the bitmap pool and memory cache. Setting this to 0 disables bitmap pooling. Setting this value discards the shared memory cache set in memoryCache . Default: Utils.getDefaultBitmapPoolPercentage","title":"bitmapPoolPercentage"},{"location":"api/coil-base/coil/-image-loader/-builder/bitmap-pooling-enabled/","text":"coil-base / coil / ImageLoader / Builder / bitmapPoolingEnabled bitmapPoolingEnabled fun bitmapPoolingEnabled(enable: Boolean ): Builder Enables counting references to bitmaps so they can be automatically reused by a BitmapPool when their reference count reaches zero. Only certain requests are eligible for bitmap pooling. See PoolableViewTarget for more information. If this is disabled, no bitmaps will be added to this ImageLoader 's BitmapPool automatically and the BitmapPool will not be allocated any memory (this overrides bitmapPoolPercentage ). Setting this value discards the shared memory cache set in memoryCache . Default: true","title":"Bitmap pooling enabled"},{"location":"api/coil-base/coil/-image-loader/-builder/bitmap-pooling-enabled/#bitmappoolingenabled","text":"fun bitmapPoolingEnabled(enable: Boolean ): Builder Enables counting references to bitmaps so they can be automatically reused by a BitmapPool when their reference count reaches zero. Only certain requests are eligible for bitmap pooling. See PoolableViewTarget for more information. If this is disabled, no bitmaps will be added to this ImageLoader 's BitmapPool automatically and the BitmapPool will not be allocated any memory (this overrides bitmapPoolPercentage ). Setting this value discards the shared memory cache set in memoryCache . Default: true","title":"bitmapPoolingEnabled"},{"location":"api/coil-base/coil/-image-loader/-builder/build/","text":"coil-base / coil / ImageLoader / Builder / build build fun build(): ImageLoader Create a new ImageLoader instance.","title":"Build"},{"location":"api/coil-base/coil/-image-loader/-builder/build/#build","text":"fun build(): ImageLoader Create a new ImageLoader instance.","title":"build"},{"location":"api/coil-base/coil/-image-loader/-builder/call-factory/","text":"coil-base / coil / ImageLoader / Builder / callFactory callFactory fun callFactory(callFactory: Factory ): Builder Set the Call.Factory used for network requests. Calling okHttpClient automatically sets this value. NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache . fun callFactory(initializer: () - Factory ): Builder Set a lazy callback to create the Call.Factory used for network requests. This allows lazy creation of the Call.Factory on a background thread. initializer is guaranteed to be called at most once. Prefer using this instead of callFactory(Call.Factory) . Calling okHttpClient automatically sets this value. NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache .","title":"Call factory"},{"location":"api/coil-base/coil/-image-loader/-builder/call-factory/#callfactory","text":"fun callFactory(callFactory: Factory ): Builder Set the Call.Factory used for network requests. Calling okHttpClient automatically sets this value. NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache . fun callFactory(initializer: () - Factory ): Builder Set a lazy callback to create the Call.Factory used for network requests. This allows lazy creation of the Call.Factory on a background thread. initializer is guaranteed to be called at most once. Prefer using this instead of callFactory(Call.Factory) . Calling okHttpClient automatically sets this value. NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache .","title":"callFactory"},{"location":"api/coil-base/coil/-image-loader/-builder/component-registry/","text":"coil-base / coil / ImageLoader / Builder / componentRegistry componentRegistry inline fun componentRegistry(builder: Builder.() - Unit ): Builder Build and set the ComponentRegistry . fun componentRegistry(registry: ComponentRegistry ): Builder Set the ComponentRegistry .","title":"Component registry"},{"location":"api/coil-base/coil/-image-loader/-builder/component-registry/#componentregistry","text":"inline fun componentRegistry(builder: Builder.() - Unit ): Builder Build and set the ComponentRegistry . fun componentRegistry(registry: ComponentRegistry ): Builder Set the ComponentRegistry .","title":"componentRegistry"},{"location":"api/coil-base/coil/-image-loader/-builder/crossfade/","text":"coil-base / coil / ImageLoader / Builder / crossfade crossfade fun crossfade(enable: Boolean ): Builder Enable a crossfade animation with duration CrossfadeDrawable.DEFAULT_DURATION milliseconds when a request completes successfully. Default: false fun crossfade(durationMillis: Int ): Builder Enable a crossfade animation with durationMillis milliseconds when a request completes successfully.","title":"Crossfade"},{"location":"api/coil-base/coil/-image-loader/-builder/crossfade/#crossfade","text":"fun crossfade(enable: Boolean ): Builder Enable a crossfade animation with duration CrossfadeDrawable.DEFAULT_DURATION milliseconds when a request completes successfully. Default: false fun crossfade(durationMillis: Int ): Builder Enable a crossfade animation with durationMillis milliseconds when a request completes successfully.","title":"crossfade"},{"location":"api/coil-base/coil/-image-loader/-builder/disk-cache-policy/","text":"coil-base / coil / ImageLoader / Builder / diskCachePolicy diskCachePolicy fun diskCachePolicy(policy: CachePolicy ): Builder Set the default disk cache policy.","title":"Disk cache policy"},{"location":"api/coil-base/coil/-image-loader/-builder/disk-cache-policy/#diskcachepolicy","text":"fun diskCachePolicy(policy: CachePolicy ): Builder Set the default disk cache policy.","title":"diskCachePolicy"},{"location":"api/coil-base/coil/-image-loader/-builder/dispatcher/","text":"coil-base / coil / ImageLoader / Builder / dispatcher dispatcher fun dispatcher(dispatcher: CoroutineDispatcher ): Builder The default CoroutineDispatcher to run image requests on. Default: Dispatchers.IO","title":"Dispatcher"},{"location":"api/coil-base/coil/-image-loader/-builder/dispatcher/#dispatcher","text":"fun dispatcher(dispatcher: CoroutineDispatcher ): Builder The default CoroutineDispatcher to run image requests on. Default: Dispatchers.IO","title":"dispatcher"},{"location":"api/coil-base/coil/-image-loader/-builder/error/","text":"coil-base / coil / ImageLoader / Builder / error error fun error(@DrawableRes drawableResId: Int ): Builder fun error(drawable: Drawable ?): Builder Set the default error drawable to use when a request fails.","title":"Error"},{"location":"api/coil-base/coil/-image-loader/-builder/error/#error","text":"fun error(@DrawableRes drawableResId: Int ): Builder fun error(drawable: Drawable ?): Builder Set the default error drawable to use when a request fails.","title":"error"},{"location":"api/coil-base/coil/-image-loader/-builder/event-listener/","text":"coil-base / coil / ImageLoader / Builder / eventListener eventListener fun eventListener(listener: EventListener ): ERROR CLASS Set a single EventListener that will receive all callbacks for requests launched by this image loader. fun eventListener(factory: Factory): Builder Set the EventListener.Factory to create per-request EventListener s. See Also eventListener","title":"Event listener"},{"location":"api/coil-base/coil/-image-loader/-builder/event-listener/#eventlistener","text":"fun eventListener(listener: EventListener ): ERROR CLASS Set a single EventListener that will receive all callbacks for requests launched by this image loader. fun eventListener(factory: Factory): Builder Set the EventListener.Factory to create per-request EventListener s. See Also eventListener","title":"eventListener"},{"location":"api/coil-base/coil/-image-loader/-builder/fallback/","text":"coil-base / coil / ImageLoader / Builder / fallback fallback fun fallback(@DrawableRes drawableResId: Int ): Builder fun fallback(drawable: Drawable ?): Builder Set the default fallback drawable to use if ImageRequest.data is null.","title":"Fallback"},{"location":"api/coil-base/coil/-image-loader/-builder/fallback/#fallback","text":"fun fallback(@DrawableRes drawableResId: Int ): Builder fun fallback(drawable: Drawable ?): Builder Set the default fallback drawable to use if ImageRequest.data is null.","title":"fallback"},{"location":"api/coil-base/coil/-image-loader/-builder/launch-interceptor-chain-on-main-thread/","text":"coil-base / coil / ImageLoader / Builder / launchInterceptorChainOnMainThread launchInterceptorChainOnMainThread fun launchInterceptorChainOnMainThread(enable: Boolean ): Builder Enables launching the Interceptor chain on the main thread. If true, the Interceptor chain will be launched from MainCoroutineDispatcher.immediate . This allows the ImageLoader to check its memory cache and return a cached value synchronously if the request is started from the main thread. However, Mapper.map and Fetcher.key operations will be executed on the main thread as well, which has a performance cost. If false, the Interceptor chain will be launched from the request's ImageRequest.dispatcher . This will result in better UI performance, but values from the memory cache will not be resolved synchronously. The actual fetch + decode process always occurs on ImageRequest.dispatcher and is unaffected by this flag. It's worth noting that Interceptor s can also control which CoroutineDispatcher the memory cache is checked on by calling Interceptor.Chain.proceed inside a withContext block. Therefore if you set launchInterceptorChainOnMainThread to true, you can control which ImageRequest s check the memory cache synchronously at runtime. Default: true","title":"Launch interceptor chain on main thread"},{"location":"api/coil-base/coil/-image-loader/-builder/launch-interceptor-chain-on-main-thread/#launchinterceptorchainonmainthread","text":"fun launchInterceptorChainOnMainThread(enable: Boolean ): Builder Enables launching the Interceptor chain on the main thread. If true, the Interceptor chain will be launched from MainCoroutineDispatcher.immediate . This allows the ImageLoader to check its memory cache and return a cached value synchronously if the request is started from the main thread. However, Mapper.map and Fetcher.key operations will be executed on the main thread as well, which has a performance cost. If false, the Interceptor chain will be launched from the request's ImageRequest.dispatcher . This will result in better UI performance, but values from the memory cache will not be resolved synchronously. The actual fetch + decode process always occurs on ImageRequest.dispatcher and is unaffected by this flag. It's worth noting that Interceptor s can also control which CoroutineDispatcher the memory cache is checked on by calling Interceptor.Chain.proceed inside a withContext block. Therefore if you set launchInterceptorChainOnMainThread to true, you can control which ImageRequest s check the memory cache synchronously at runtime. Default: true","title":"launchInterceptorChainOnMainThread"},{"location":"api/coil-base/coil/-image-loader/-builder/logger/","text":"coil-base / coil / ImageLoader / Builder / logger logger fun logger(logger: Logger ?): Builder Set the Logger to write logs to. NOTE: Setting a Logger can reduce performance and should be avoided in release builds.","title":"Logger"},{"location":"api/coil-base/coil/-image-loader/-builder/logger/#logger","text":"fun logger(logger: Logger ?): Builder Set the Logger to write logs to. NOTE: Setting a Logger can reduce performance and should be avoided in release builds.","title":"logger"},{"location":"api/coil-base/coil/-image-loader/-builder/memory-cache-policy/","text":"coil-base / coil / ImageLoader / Builder / memoryCachePolicy memoryCachePolicy fun memoryCachePolicy(policy: CachePolicy ): Builder Set the default memory cache policy.","title":"Memory cache policy"},{"location":"api/coil-base/coil/-image-loader/-builder/memory-cache-policy/#memorycachepolicy","text":"fun memoryCachePolicy(policy: CachePolicy ): Builder Set the default memory cache policy.","title":"memoryCachePolicy"},{"location":"api/coil-base/coil/-image-loader/-builder/memory-cache/","text":"coil-base / coil / ImageLoader / Builder / memoryCache memoryCache fun memoryCache(memoryCache: MemoryCache ): Builder Set the MemoryCache . This also sets the BitmapPool to the instance used by this MemoryCache . This is useful for sharing MemoryCache and BitmapPool instances between ImageLoader s. NOTE: Custom memory cache implementations are currently not supported.","title":"Memory cache"},{"location":"api/coil-base/coil/-image-loader/-builder/memory-cache/#memorycache","text":"fun memoryCache(memoryCache: MemoryCache ): Builder Set the MemoryCache . This also sets the BitmapPool to the instance used by this MemoryCache . This is useful for sharing MemoryCache and BitmapPool instances between ImageLoader s. NOTE: Custom memory cache implementations are currently not supported.","title":"memoryCache"},{"location":"api/coil-base/coil/-image-loader/-builder/network-cache-policy/","text":"coil-base / coil / ImageLoader / Builder / networkCachePolicy networkCachePolicy fun networkCachePolicy(policy: CachePolicy ): Builder Set the default network cache policy. NOTE: Disabling writes has no effect.","title":"Network cache policy"},{"location":"api/coil-base/coil/-image-loader/-builder/network-cache-policy/#networkcachepolicy","text":"fun networkCachePolicy(policy: CachePolicy ): Builder Set the default network cache policy. NOTE: Disabling writes has no effect.","title":"networkCachePolicy"},{"location":"api/coil-base/coil/-image-loader/-builder/ok-http-client/","text":"coil-base / coil / ImageLoader / Builder / okHttpClient okHttpClient fun okHttpClient(okHttpClient: OkHttpClient ): Builder Set the OkHttpClient used for network requests. This is a convenience function for calling callFactory(Call.Factory) . NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache . fun okHttpClient(initializer: () - OkHttpClient ): Builder Set a lazy callback to create the OkHttpClient used for network requests. This is a convenience function for calling callFactory(() - Call.Factory) . NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache .","title":"Ok http client"},{"location":"api/coil-base/coil/-image-loader/-builder/ok-http-client/#okhttpclient","text":"fun okHttpClient(okHttpClient: OkHttpClient ): Builder Set the OkHttpClient used for network requests. This is a convenience function for calling callFactory(Call.Factory) . NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache . fun okHttpClient(initializer: () - OkHttpClient ): Builder Set a lazy callback to create the OkHttpClient used for network requests. This is a convenience function for calling callFactory(() - Call.Factory) . NOTE: You must set OkHttpClient.cache to enable disk caching. A default Coil disk cache instance can be created using CoilUtils.createDefaultCache .","title":"okHttpClient"},{"location":"api/coil-base/coil/-image-loader/-builder/placeholder/","text":"coil-base / coil / ImageLoader / Builder / placeholder placeholder fun placeholder(@DrawableRes drawableResId: Int ): Builder fun placeholder(drawable: Drawable ?): Builder Set the default placeholder drawable to use when a request starts.","title":"Placeholder"},{"location":"api/coil-base/coil/-image-loader/-builder/placeholder/#placeholder","text":"fun placeholder(@DrawableRes drawableResId: Int ): Builder fun placeholder(drawable: Drawable ?): Builder Set the default placeholder drawable to use when a request starts.","title":"placeholder"},{"location":"api/coil-base/coil/-image-loader/-builder/precision/","text":"coil-base / coil / ImageLoader / Builder / precision precision fun precision(precision: Precision ): Builder Set the default precision for a request. Precision controls whether the size of the loaded image must match the request's size exactly or not. Default: Precision.AUTOMATIC","title":"Precision"},{"location":"api/coil-base/coil/-image-loader/-builder/precision/#precision","text":"fun precision(precision: Precision ): Builder Set the default precision for a request. Precision controls whether the size of the loaded image must match the request's size exactly or not. Default: Precision.AUTOMATIC","title":"precision"},{"location":"api/coil-base/coil/-image-loader/-builder/track-weak-references/","text":"coil-base / coil / ImageLoader / Builder / trackWeakReferences trackWeakReferences fun trackWeakReferences(enable: Boolean ): Builder Enables weak reference tracking of loaded images. This allows the image loader to hold weak references to loaded images. This ensures that if an image is still in memory it will be returned from the memory cache. Setting this value discards the shared memory cache set in memoryCache . Default: true","title":"Track weak references"},{"location":"api/coil-base/coil/-image-loader/-builder/track-weak-references/#trackweakreferences","text":"fun trackWeakReferences(enable: Boolean ): Builder Enables weak reference tracking of loaded images. This allows the image loader to hold weak references to loaded images. This ensures that if an image is still in memory it will be returned from the memory cache. Setting this value discards the shared memory cache set in memoryCache . Default: true","title":"trackWeakReferences"},{"location":"api/coil-base/coil/-image-loader/-builder/transition/","text":"coil-base / coil / ImageLoader / Builder / transition transition @ExperimentalCoilApi fun transition(transition: Transition ): Builder Set the default Transition for each request.","title":"Transition"},{"location":"api/coil-base/coil/-image-loader/-builder/transition/#transition","text":"@ExperimentalCoilApi fun transition(transition: Transition ): Builder Set the default Transition for each request.","title":"transition"},{"location":"api/coil-base/coil.annotation/","text":"coil-base / coil.annotation Package coil.annotation Annotations Name Summary ExperimentalCoilApi Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating. annotation class ExperimentalCoilApi InternalCoilApi Marks declarations that are part of Coil's internal API. They should not be used outside of the coil package as their signatures and semantics will change between future releases without any warnings and without providing any migration aids. annotation class InternalCoilApi","title":"Home"},{"location":"api/coil-base/coil.annotation/#package-coilannotation","text":"","title":"Package coil.annotation"},{"location":"api/coil-base/coil.annotation/#annotations","text":"Name Summary ExperimentalCoilApi Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating. annotation class ExperimentalCoilApi InternalCoilApi Marks declarations that are part of Coil's internal API. They should not be used outside of the coil package as their signatures and semantics will change between future releases without any warnings and without providing any migration aids. annotation class InternalCoilApi","title":"Annotations"},{"location":"api/coil-base/coil.annotation/-experimental-coil-api/","text":"coil-base / coil.annotation / ExperimentalCoilApi ExperimentalCoilApi annotation class ExperimentalCoilApi Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating. Constructors Name Summary init Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating. ExperimentalCoilApi()","title":"Home"},{"location":"api/coil-base/coil.annotation/-experimental-coil-api/#experimentalcoilapi","text":"annotation class ExperimentalCoilApi Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating.","title":"ExperimentalCoilApi"},{"location":"api/coil-base/coil.annotation/-experimental-coil-api/#constructors","text":"Name Summary init Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating. ExperimentalCoilApi()","title":"Constructors"},{"location":"api/coil-base/coil.annotation/-experimental-coil-api/-init-/","text":"coil-base / coil.annotation / ExperimentalCoilApi / init init ExperimentalCoilApi() Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating.","title":" init "},{"location":"api/coil-base/coil.annotation/-experimental-coil-api/-init-/#init","text":"ExperimentalCoilApi() Marks declarations that are still experimental . Targets marked by this annotation may contain breaking changes in the future as their design is still incubating.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.annotation/-internal-coil-api/","text":"coil-base / coil.annotation / InternalCoilApi InternalCoilApi annotation class InternalCoilApi Marks declarations that are part of Coil's internal API. They should not be used outside of the coil package as their signatures and semantics will change between future releases without any warnings and without providing any migration aids. Constructors Name Summary init Marks declarations that are part of Coil's internal API. They should not be used outside of the coil package as their signatures and semantics will change between future releases without any warnings and without providing any migration aids. InternalCoilApi()","title":"Home"},{"location":"api/coil-base/coil.annotation/-internal-coil-api/#internalcoilapi","text":"annotation class InternalCoilApi Marks declarations that are part of Coil's internal API. They should not be used outside of the coil package as their signatures and semantics will change between future releases without any warnings and without providing any migration aids.","title":"InternalCoilApi"},{"location":"api/coil-base/coil.annotation/-internal-coil-api/#constructors","text":"Name Summary init Marks declarations that are part of Coil's internal API. They should not be used outside of the coil package as their signatures and semantics will change between future releases without any warnings and without providing any migration aids. InternalCoilApi()","title":"Constructors"},{"location":"api/coil-base/coil.annotation/-internal-coil-api/-init-/","text":"coil-base / coil.annotation / InternalCoilApi / init init InternalCoilApi() Marks declarations that are part of Coil's internal API. They should not be used outside of the coil package as their signatures and semantics will change between future releases without any warnings and without providing any migration aids.","title":" init "},{"location":"api/coil-base/coil.annotation/-internal-coil-api/-init-/#init","text":"InternalCoilApi() Marks declarations that are part of Coil's internal API. They should not be used outside of the coil package as their signatures and semantics will change between future releases without any warnings and without providing any migration aids.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.bitmap/","text":"coil-base / coil.bitmap Package coil.bitmap Types Name Summary BitmapPool An object pool that enables callers to reuse Bitmap objects. interface BitmapPool","title":"Home"},{"location":"api/coil-base/coil.bitmap/#package-coilbitmap","text":"","title":"Package coil.bitmap"},{"location":"api/coil-base/coil.bitmap/#types","text":"Name Summary BitmapPool An object pool that enables callers to reuse Bitmap objects. interface BitmapPool","title":"Types"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/","text":"coil-base / coil.bitmap / BitmapPool BitmapPool interface BitmapPool An object pool that enables callers to reuse Bitmap objects. Functions Name Summary clear Remove all Bitmap s from this pool and free their memory. abstract fun clear(): Unit get Return a Bitmap of exactly the given width, height, and configuration, and containing only transparent pixels. abstract fun get(width: Int , height: Int , config: Config ): Bitmap getDirty Identical to get except that any returned Bitmap may not have been erased and may contain random data. abstract fun getDirty(width: Int , height: Int , config: Config ): Bitmap getDirtyOrNull Identical to getDirty except that null will be returned if the pool does not contain a usable bitmap. abstract fun getDirtyOrNull(width: Int , height: Int , config: Config ): Bitmap ? getOrNull Identical to get except that null will be returned if the pool does not contain a usable bitmap. abstract fun getOrNull(width: Int , height: Int , config: Config ): Bitmap ? put Add the given Bitmap to the pool if it is eligible to be re-used and the pool can fit it. Otherwise, this method calls Bitmap.recycle on the bitmap and discards it. abstract fun put(bitmap: Bitmap ): Unit trimMemory abstract fun trimMemory(level: Int ): Unit Companion Object Functions Name Summary invoke Create a new BitmapPool . operator fun invoke(maxSize: Int ): BitmapPool","title":"Home"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/#bitmappool","text":"interface BitmapPool An object pool that enables callers to reuse Bitmap objects.","title":"BitmapPool"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/#functions","text":"Name Summary clear Remove all Bitmap s from this pool and free their memory. abstract fun clear(): Unit get Return a Bitmap of exactly the given width, height, and configuration, and containing only transparent pixels. abstract fun get(width: Int , height: Int , config: Config ): Bitmap getDirty Identical to get except that any returned Bitmap may not have been erased and may contain random data. abstract fun getDirty(width: Int , height: Int , config: Config ): Bitmap getDirtyOrNull Identical to getDirty except that null will be returned if the pool does not contain a usable bitmap. abstract fun getDirtyOrNull(width: Int , height: Int , config: Config ): Bitmap ? getOrNull Identical to get except that null will be returned if the pool does not contain a usable bitmap. abstract fun getOrNull(width: Int , height: Int , config: Config ): Bitmap ? put Add the given Bitmap to the pool if it is eligible to be re-used and the pool can fit it. Otherwise, this method calls Bitmap.recycle on the bitmap and discards it. abstract fun put(bitmap: Bitmap ): Unit trimMemory abstract fun trimMemory(level: Int ): Unit","title":"Functions"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/#companion-object-functions","text":"Name Summary invoke Create a new BitmapPool . operator fun invoke(maxSize: Int ): BitmapPool","title":"Companion Object Functions"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/clear/","text":"coil-base / coil.bitmap / BitmapPool / clear clear abstract fun clear(): Unit Remove all Bitmap s from this pool and free their memory.","title":"Clear"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/clear/#clear","text":"abstract fun clear(): Unit Remove all Bitmap s from this pool and free their memory.","title":"clear"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/get-dirty-or-null/","text":"coil-base / coil.bitmap / BitmapPool / getDirtyOrNull getDirtyOrNull abstract fun getDirtyOrNull(@Px width: Int , @Px height: Int , config: Config ): Bitmap ? Identical to getDirty except that null will be returned if the pool does not contain a usable bitmap.","title":"Get dirty or null"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/get-dirty-or-null/#getdirtyornull","text":"abstract fun getDirtyOrNull(@Px width: Int , @Px height: Int , config: Config ): Bitmap ? Identical to getDirty except that null will be returned if the pool does not contain a usable bitmap.","title":"getDirtyOrNull"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/get-dirty/","text":"coil-base / coil.bitmap / BitmapPool / getDirty getDirty abstract fun getDirty(@Px width: Int , @Px height: Int , config: Config ): Bitmap Identical to get except that any returned Bitmap may not have been erased and may contain random data. If no bitmap with the requested attributes is present in the pool, a new one will be allocated. Although this method is slightly more efficient than BitmapPool.get it should be used with caution and only when the caller is sure that they are going to erase the Bitmap entirely before writing new data to it.","title":"Get dirty"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/get-dirty/#getdirty","text":"abstract fun getDirty(@Px width: Int , @Px height: Int , config: Config ): Bitmap Identical to get except that any returned Bitmap may not have been erased and may contain random data. If no bitmap with the requested attributes is present in the pool, a new one will be allocated. Although this method is slightly more efficient than BitmapPool.get it should be used with caution and only when the caller is sure that they are going to erase the Bitmap entirely before writing new data to it.","title":"getDirty"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/get-or-null/","text":"coil-base / coil.bitmap / BitmapPool / getOrNull getOrNull abstract fun getOrNull(@Px width: Int , @Px height: Int , config: Config ): Bitmap ? Identical to get except that null will be returned if the pool does not contain a usable bitmap.","title":"Get or null"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/get-or-null/#getornull","text":"abstract fun getOrNull(@Px width: Int , @Px height: Int , config: Config ): Bitmap ? Identical to get except that null will be returned if the pool does not contain a usable bitmap.","title":"getOrNull"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/get/","text":"coil-base / coil.bitmap / BitmapPool / get get abstract fun get(@Px width: Int , @Px height: Int , config: Config ): Bitmap Return a Bitmap of exactly the given width, height, and configuration, and containing only transparent pixels. If no bitmap with the requested attributes is present in the pool, a new one will be allocated. Because this method erases all pixels in the Bitmap , this method is slightly slower than getDirty . If the Bitmap is being obtained to be used in BitmapFactory or in any other case where every pixel in the Bitmap will always be overwritten or cleared, getDirty will be faster. When in doubt, use this method to ensure correctness.","title":"Get"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/get/#get","text":"abstract fun get(@Px width: Int , @Px height: Int , config: Config ): Bitmap Return a Bitmap of exactly the given width, height, and configuration, and containing only transparent pixels. If no bitmap with the requested attributes is present in the pool, a new one will be allocated. Because this method erases all pixels in the Bitmap , this method is slightly slower than getDirty . If the Bitmap is being obtained to be used in BitmapFactory or in any other case where every pixel in the Bitmap will always be overwritten or cleared, getDirty will be faster. When in doubt, use this method to ensure correctness.","title":"get"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/invoke/","text":"coil-base / coil.bitmap / BitmapPool / invoke invoke @JvmStatic @JvmName(\"create\") operator fun invoke(maxSize: Int ): BitmapPool Create a new BitmapPool . Parameters maxSize - The maximum size of the pool in bytes.","title":"Invoke"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/invoke/#invoke","text":"@JvmStatic @JvmName(\"create\") operator fun invoke(maxSize: Int ): BitmapPool Create a new BitmapPool .","title":"invoke"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/invoke/#parameters","text":"maxSize - The maximum size of the pool in bytes.","title":"Parameters"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/put/","text":"coil-base / coil.bitmap / BitmapPool / put put abstract fun put(bitmap: Bitmap ): Unit Add the given Bitmap to the pool if it is eligible to be re-used and the pool can fit it. Otherwise, this method calls Bitmap.recycle on the bitmap and discards it. Callers must not continue to use the bitmap after calling this method.","title":"Put"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/put/#put","text":"abstract fun put(bitmap: Bitmap ): Unit Add the given Bitmap to the pool if it is eligible to be re-used and the pool can fit it. Otherwise, this method calls Bitmap.recycle on the bitmap and discards it. Callers must not continue to use the bitmap after calling this method.","title":"put"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/trim-memory/","text":"coil-base / coil.bitmap / BitmapPool / trimMemory trimMemory abstract fun trimMemory(level: Int ): Unit See Also ComponentCallbacks2.onTrimMemory","title":"Trim memory"},{"location":"api/coil-base/coil.bitmap/-bitmap-pool/trim-memory/#trimmemory","text":"abstract fun trimMemory(level: Int ): Unit See Also ComponentCallbacks2.onTrimMemory","title":"trimMemory"},{"location":"api/coil-base/coil.decode/","text":"coil-base / coil.decode Package coil.decode Types Name Summary DataSource Represents the source that an image was loaded from. enum class DataSource Decoder Converts a BufferedSource into a Drawable . interface Decoder DecodeResult The result of Decoder.decode . data class DecodeResult DecodeUtils A collection of useful utility methods for decoding images. object DecodeUtils Options A set of configuration options for fetching and decoding an image. class Options Functions Name Summary withInterruptibleSource Wraps source to support thread interruption while inside block . suspend fun T withInterruptibleSource(source: Source , block: ( Source ) - T): T","title":"Home"},{"location":"api/coil-base/coil.decode/#package-coildecode","text":"","title":"Package coil.decode"},{"location":"api/coil-base/coil.decode/#types","text":"Name Summary DataSource Represents the source that an image was loaded from. enum class DataSource Decoder Converts a BufferedSource into a Drawable . interface Decoder DecodeResult The result of Decoder.decode . data class DecodeResult DecodeUtils A collection of useful utility methods for decoding images. object DecodeUtils Options A set of configuration options for fetching and decoding an image. class Options","title":"Types"},{"location":"api/coil-base/coil.decode/#functions","text":"Name Summary withInterruptibleSource Wraps source to support thread interruption while inside block . suspend fun T withInterruptibleSource(source: Source , block: ( Source ) - T): T","title":"Functions"},{"location":"api/coil-base/coil.decode/with-interruptible-source/","text":"coil-base / coil.decode / withInterruptibleSource withInterruptibleSource @InternalCoilApi suspend inline fun T withInterruptibleSource(source: Source , crossinline block: ( Source ) - T): T Wraps source to support thread interruption while inside block . Consumers should not read source inside block . Instead, read from the Source provided to block .","title":"With interruptible source"},{"location":"api/coil-base/coil.decode/with-interruptible-source/#withinterruptiblesource","text":"@InternalCoilApi suspend inline fun T withInterruptibleSource(source: Source , crossinline block: ( Source ) - T): T Wraps source to support thread interruption while inside block . Consumers should not read source inside block . Instead, read from the Source provided to block .","title":"withInterruptibleSource"},{"location":"api/coil-base/coil.decode/-data-source/","text":"coil-base / coil.decode / DataSource DataSource enum class DataSource Represents the source that an image was loaded from. See Also SourceResult.dataSource DrawableResult.dataSource Enum Values Name Summary MEMORY_CACHE Represents an ImageLoader 's memory cache. MEMORY Represents an in-memory data source (e.g. Bitmap , ByteBuffer ). DISK Represents a disk-based data source (e.g. DrawableRes , File ). NETWORK Represents a network-based data source (e.g. HttpUrl ).","title":"Home"},{"location":"api/coil-base/coil.decode/-data-source/#datasource","text":"enum class DataSource Represents the source that an image was loaded from. See Also SourceResult.dataSource DrawableResult.dataSource","title":"DataSource"},{"location":"api/coil-base/coil.decode/-data-source/#enum-values","text":"Name Summary MEMORY_CACHE Represents an ImageLoader 's memory cache. MEMORY Represents an in-memory data source (e.g. Bitmap , ByteBuffer ). DISK Represents a disk-based data source (e.g. DrawableRes , File ). NETWORK Represents a network-based data source (e.g. HttpUrl ).","title":"Enum Values"},{"location":"api/coil-base/coil.decode/-data-source/-d-i-s-k/","text":"coil-base / coil.decode / DataSource / DISK DISK DISK Represents a disk-based data source (e.g. DrawableRes , File ).","title":" d i s k"},{"location":"api/coil-base/coil.decode/-data-source/-d-i-s-k/#disk","text":"DISK Represents a disk-based data source (e.g. DrawableRes , File ).","title":"DISK"},{"location":"api/coil-base/coil.decode/-data-source/-m-e-m-o-r-y/","text":"coil-base / coil.decode / DataSource / MEMORY MEMORY MEMORY Represents an in-memory data source (e.g. Bitmap , ByteBuffer ).","title":" m e m o r y"},{"location":"api/coil-base/coil.decode/-data-source/-m-e-m-o-r-y/#memory","text":"MEMORY Represents an in-memory data source (e.g. Bitmap , ByteBuffer ).","title":"MEMORY"},{"location":"api/coil-base/coil.decode/-data-source/-m-e-m-o-r-y_-c-a-c-h-e/","text":"coil-base / coil.decode / DataSource / MEMORY_CACHE MEMORY_CACHE MEMORY_CACHE Represents an ImageLoader 's memory cache. This is a special data source as it means the request was short circuited and skipped the full image pipeline.","title":" m e m o r y  c a c h e"},{"location":"api/coil-base/coil.decode/-data-source/-m-e-m-o-r-y_-c-a-c-h-e/#memory_cache","text":"MEMORY_CACHE Represents an ImageLoader 's memory cache. This is a special data source as it means the request was short circuited and skipped the full image pipeline.","title":"MEMORY_CACHE"},{"location":"api/coil-base/coil.decode/-data-source/-n-e-t-w-o-r-k/","text":"coil-base / coil.decode / DataSource / NETWORK NETWORK NETWORK Represents a network-based data source (e.g. HttpUrl ).","title":" n e t w o r k"},{"location":"api/coil-base/coil.decode/-data-source/-n-e-t-w-o-r-k/#network","text":"NETWORK Represents a network-based data source (e.g. HttpUrl ).","title":"NETWORK"},{"location":"api/coil-base/coil.decode/-decode-result/","text":"coil-base / coil.decode / DecodeResult DecodeResult data class DecodeResult The result of Decoder.decode . Parameters drawable - The decoded Drawable . isSampled - True if drawable is sampled (i.e. loaded into memory at less than its original size). See Also Decoder Constructors Name Summary init The result of Decoder.decode . DecodeResult(drawable: Drawable , isSampled: Boolean ) Properties Name Summary drawable The decoded Drawable . val drawable: Drawable isSampled True if drawable is sampled (i.e. loaded into memory at less than its original size). val isSampled: Boolean","title":"Home"},{"location":"api/coil-base/coil.decode/-decode-result/#decoderesult","text":"data class DecodeResult The result of Decoder.decode .","title":"DecodeResult"},{"location":"api/coil-base/coil.decode/-decode-result/#parameters","text":"drawable - The decoded Drawable . isSampled - True if drawable is sampled (i.e. loaded into memory at less than its original size). See Also Decoder","title":"Parameters"},{"location":"api/coil-base/coil.decode/-decode-result/#constructors","text":"Name Summary init The result of Decoder.decode . DecodeResult(drawable: Drawable , isSampled: Boolean )","title":"Constructors"},{"location":"api/coil-base/coil.decode/-decode-result/#properties","text":"Name Summary drawable The decoded Drawable . val drawable: Drawable isSampled True if drawable is sampled (i.e. loaded into memory at less than its original size). val isSampled: Boolean","title":"Properties"},{"location":"api/coil-base/coil.decode/-decode-result/-init-/","text":"coil-base / coil.decode / DecodeResult / init init DecodeResult(drawable: Drawable , isSampled: Boolean ) The result of Decoder.decode . Parameters drawable - The decoded Drawable . isSampled - True if drawable is sampled (i.e. loaded into memory at less than its original size). See Also Decoder","title":" init "},{"location":"api/coil-base/coil.decode/-decode-result/-init-/#init","text":"DecodeResult(drawable: Drawable , isSampled: Boolean ) The result of Decoder.decode .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.decode/-decode-result/-init-/#parameters","text":"drawable - The decoded Drawable . isSampled - True if drawable is sampled (i.e. loaded into memory at less than its original size). See Also Decoder","title":"Parameters"},{"location":"api/coil-base/coil.decode/-decode-result/drawable/","text":"coil-base / coil.decode / DecodeResult / drawable drawable val drawable: Drawable The decoded Drawable .","title":"Drawable"},{"location":"api/coil-base/coil.decode/-decode-result/drawable/#drawable","text":"val drawable: Drawable The decoded Drawable .","title":"drawable"},{"location":"api/coil-base/coil.decode/-decode-result/is-sampled/","text":"coil-base / coil.decode / DecodeResult / isSampled isSampled val isSampled: Boolean True if drawable is sampled (i.e. loaded into memory at less than its original size).","title":"Is sampled"},{"location":"api/coil-base/coil.decode/-decode-result/is-sampled/#issampled","text":"val isSampled: Boolean True if drawable is sampled (i.e. loaded into memory at less than its original size).","title":"isSampled"},{"location":"api/coil-base/coil.decode/-decode-utils/","text":"coil-base / coil.decode / DecodeUtils DecodeUtils object DecodeUtils A collection of useful utility methods for decoding images. Functions Name Summary calculateInSampleSize Calculate the BitmapFactory.Options.inSampleSize given the source dimensions of the image ( srcWidth and srcHeight ), the output dimensions ( dstWidth , dstHeight ), and the scale . fun calculateInSampleSize(srcWidth: Int , srcHeight: Int , dstWidth: Int , dstHeight: Int , scale: Scale ): Int computePixelSize Calculate the pixel size required to fit/fill the source dimensions inside the destination size while preserving aspect ratio. fun computePixelSize(srcWidth: Int , srcHeight: Int , dstSize: Size , scale: Scale ): PixelSize computeSizeMultiplier Calculate the percentage to multiply the source dimensions by to fit/fill the destination dimensions while preserving aspect ratio. fun computeSizeMultiplier(srcWidth: Int , srcHeight: Int , dstWidth: Int , dstHeight: Int , scale: Scale ): Double fun computeSizeMultiplier(srcWidth: Float , srcHeight: Float , dstWidth: Float , dstHeight: Float , scale: Scale ): Float fun computeSizeMultiplier(srcWidth: Double , srcHeight: Double , dstWidth: Double , dstHeight: Double , scale: Scale ): Double isAnimatedHeif Return true if the source contains an animated HEIF image sequence. The source is not consumed. fun isAnimatedHeif(source: BufferedSource ): Boolean isAnimatedWebP Return true if the source contains an animated WebP image. The source is not consumed. fun isAnimatedWebP(source: BufferedSource ): Boolean isGif Return true if the source contains a GIF image. The source is not consumed. fun isGif(source: BufferedSource ): Boolean isHeif Return true if the source contains an HEIF image. The source is not consumed. fun isHeif(source: BufferedSource ): Boolean isWebP Return true if the source contains a WebP image. The source is not consumed. fun isWebP(source: BufferedSource ): Boolean","title":"Home"},{"location":"api/coil-base/coil.decode/-decode-utils/#decodeutils","text":"object DecodeUtils A collection of useful utility methods for decoding images.","title":"DecodeUtils"},{"location":"api/coil-base/coil.decode/-decode-utils/#functions","text":"Name Summary calculateInSampleSize Calculate the BitmapFactory.Options.inSampleSize given the source dimensions of the image ( srcWidth and srcHeight ), the output dimensions ( dstWidth , dstHeight ), and the scale . fun calculateInSampleSize(srcWidth: Int , srcHeight: Int , dstWidth: Int , dstHeight: Int , scale: Scale ): Int computePixelSize Calculate the pixel size required to fit/fill the source dimensions inside the destination size while preserving aspect ratio. fun computePixelSize(srcWidth: Int , srcHeight: Int , dstSize: Size , scale: Scale ): PixelSize computeSizeMultiplier Calculate the percentage to multiply the source dimensions by to fit/fill the destination dimensions while preserving aspect ratio. fun computeSizeMultiplier(srcWidth: Int , srcHeight: Int , dstWidth: Int , dstHeight: Int , scale: Scale ): Double fun computeSizeMultiplier(srcWidth: Float , srcHeight: Float , dstWidth: Float , dstHeight: Float , scale: Scale ): Float fun computeSizeMultiplier(srcWidth: Double , srcHeight: Double , dstWidth: Double , dstHeight: Double , scale: Scale ): Double isAnimatedHeif Return true if the source contains an animated HEIF image sequence. The source is not consumed. fun isAnimatedHeif(source: BufferedSource ): Boolean isAnimatedWebP Return true if the source contains an animated WebP image. The source is not consumed. fun isAnimatedWebP(source: BufferedSource ): Boolean isGif Return true if the source contains a GIF image. The source is not consumed. fun isGif(source: BufferedSource ): Boolean isHeif Return true if the source contains an HEIF image. The source is not consumed. fun isHeif(source: BufferedSource ): Boolean isWebP Return true if the source contains a WebP image. The source is not consumed. fun isWebP(source: BufferedSource ): Boolean","title":"Functions"},{"location":"api/coil-base/coil.decode/-decode-utils/calculate-in-sample-size/","text":"coil-base / coil.decode / DecodeUtils / calculateInSampleSize calculateInSampleSize @JvmStatic fun calculateInSampleSize(@Px srcWidth: Int , @Px srcHeight: Int , @Px dstWidth: Int , @Px dstHeight: Int , scale: Scale ): Int Calculate the BitmapFactory.Options.inSampleSize given the source dimensions of the image ( srcWidth and srcHeight ), the output dimensions ( dstWidth , dstHeight ), and the scale .","title":"Calculate in sample size"},{"location":"api/coil-base/coil.decode/-decode-utils/calculate-in-sample-size/#calculateinsamplesize","text":"@JvmStatic fun calculateInSampleSize(@Px srcWidth: Int , @Px srcHeight: Int , @Px dstWidth: Int , @Px dstHeight: Int , scale: Scale ): Int Calculate the BitmapFactory.Options.inSampleSize given the source dimensions of the image ( srcWidth and srcHeight ), the output dimensions ( dstWidth , dstHeight ), and the scale .","title":"calculateInSampleSize"},{"location":"api/coil-base/coil.decode/-decode-utils/compute-pixel-size/","text":"coil-base / coil.decode / DecodeUtils / computePixelSize computePixelSize @JvmStatic fun computePixelSize(srcWidth: Int , srcHeight: Int , dstSize: Size , scale: Scale ): PixelSize Calculate the pixel size required to fit/fill the source dimensions inside the destination size while preserving aspect ratio.","title":"Compute pixel size"},{"location":"api/coil-base/coil.decode/-decode-utils/compute-pixel-size/#computepixelsize","text":"@JvmStatic fun computePixelSize(srcWidth: Int , srcHeight: Int , dstSize: Size , scale: Scale ): PixelSize Calculate the pixel size required to fit/fill the source dimensions inside the destination size while preserving aspect ratio.","title":"computePixelSize"},{"location":"api/coil-base/coil.decode/-decode-utils/compute-size-multiplier/","text":"coil-base / coil.decode / DecodeUtils / computeSizeMultiplier computeSizeMultiplier @JvmStatic fun computeSizeMultiplier(@Px srcWidth: Int , @Px srcHeight: Int , @Px dstWidth: Int , @Px dstHeight: Int , scale: Scale ): Double Calculate the percentage to multiply the source dimensions by to fit/fill the destination dimensions while preserving aspect ratio. @JvmStatic fun computeSizeMultiplier(@Px srcWidth: Float , @Px srcHeight: Float , @Px dstWidth: Float , @Px dstHeight: Float , scale: Scale ): Float @JvmStatic fun computeSizeMultiplier(@Px srcWidth: Double , @Px srcHeight: Double , @Px dstWidth: Double , @Px dstHeight: Double , scale: Scale ): Double See Also computeSizeMultiplier","title":"Compute size multiplier"},{"location":"api/coil-base/coil.decode/-decode-utils/compute-size-multiplier/#computesizemultiplier","text":"@JvmStatic fun computeSizeMultiplier(@Px srcWidth: Int , @Px srcHeight: Int , @Px dstWidth: Int , @Px dstHeight: Int , scale: Scale ): Double Calculate the percentage to multiply the source dimensions by to fit/fill the destination dimensions while preserving aspect ratio. @JvmStatic fun computeSizeMultiplier(@Px srcWidth: Float , @Px srcHeight: Float , @Px dstWidth: Float , @Px dstHeight: Float , scale: Scale ): Float @JvmStatic fun computeSizeMultiplier(@Px srcWidth: Double , @Px srcHeight: Double , @Px dstWidth: Double , @Px dstHeight: Double , scale: Scale ): Double See Also computeSizeMultiplier","title":"computeSizeMultiplier"},{"location":"api/coil-base/coil.decode/-decode-utils/is-animated-heif/","text":"coil-base / coil.decode / DecodeUtils / isAnimatedHeif isAnimatedHeif @JvmStatic fun isAnimatedHeif(source: BufferedSource ): Boolean Return true if the source contains an animated HEIF image sequence. The source is not consumed.","title":"Is animated heif"},{"location":"api/coil-base/coil.decode/-decode-utils/is-animated-heif/#isanimatedheif","text":"@JvmStatic fun isAnimatedHeif(source: BufferedSource ): Boolean Return true if the source contains an animated HEIF image sequence. The source is not consumed.","title":"isAnimatedHeif"},{"location":"api/coil-base/coil.decode/-decode-utils/is-animated-web-p/","text":"coil-base / coil.decode / DecodeUtils / isAnimatedWebP isAnimatedWebP @JvmStatic fun isAnimatedWebP(source: BufferedSource ): Boolean Return true if the source contains an animated WebP image. The source is not consumed.","title":"Is animated web p"},{"location":"api/coil-base/coil.decode/-decode-utils/is-animated-web-p/#isanimatedwebp","text":"@JvmStatic fun isAnimatedWebP(source: BufferedSource ): Boolean Return true if the source contains an animated WebP image. The source is not consumed.","title":"isAnimatedWebP"},{"location":"api/coil-base/coil.decode/-decode-utils/is-gif/","text":"coil-base / coil.decode / DecodeUtils / isGif isGif @JvmStatic fun isGif(source: BufferedSource ): Boolean Return true if the source contains a GIF image. The source is not consumed.","title":"Is gif"},{"location":"api/coil-base/coil.decode/-decode-utils/is-gif/#isgif","text":"@JvmStatic fun isGif(source: BufferedSource ): Boolean Return true if the source contains a GIF image. The source is not consumed.","title":"isGif"},{"location":"api/coil-base/coil.decode/-decode-utils/is-heif/","text":"coil-base / coil.decode / DecodeUtils / isHeif isHeif @JvmStatic fun isHeif(source: BufferedSource ): Boolean Return true if the source contains an HEIF image. The source is not consumed.","title":"Is heif"},{"location":"api/coil-base/coil.decode/-decode-utils/is-heif/#isheif","text":"@JvmStatic fun isHeif(source: BufferedSource ): Boolean Return true if the source contains an HEIF image. The source is not consumed.","title":"isHeif"},{"location":"api/coil-base/coil.decode/-decode-utils/is-web-p/","text":"coil-base / coil.decode / DecodeUtils / isWebP isWebP @JvmStatic fun isWebP(source: BufferedSource ): Boolean Return true if the source contains a WebP image. The source is not consumed.","title":"Is web p"},{"location":"api/coil-base/coil.decode/-decode-utils/is-web-p/#iswebp","text":"@JvmStatic fun isWebP(source: BufferedSource ): Boolean Return true if the source contains a WebP image. The source is not consumed.","title":"isWebP"},{"location":"api/coil-base/coil.decode/-decoder/","text":"coil-base / coil.decode / Decoder Decoder interface Decoder Converts a BufferedSource into a Drawable . Use this interface to add support for custom file formats (e.g. GIF, SVG, TIFF, etc.). Functions Name Summary decode Decode source as a Drawable . abstract suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles Return true if this decoder supports decoding source . abstract fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Home"},{"location":"api/coil-base/coil.decode/-decoder/#decoder","text":"interface Decoder Converts a BufferedSource into a Drawable . Use this interface to add support for custom file formats (e.g. GIF, SVG, TIFF, etc.).","title":"Decoder"},{"location":"api/coil-base/coil.decode/-decoder/#functions","text":"Name Summary decode Decode source as a Drawable . abstract suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles Return true if this decoder supports decoding source . abstract fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Functions"},{"location":"api/coil-base/coil.decode/-decoder/decode/","text":"coil-base / coil.decode / Decoder / decode decode abstract suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult Decode source as a Drawable . NOTE: Implementations are responsible for closing source when finished with it. Parameters pool - A BitmapPool which can be used to request Bitmap instances. source - The BufferedSource to read from. size - The requested dimensions for the image. options - A set of configuration options for this request.","title":"Decode"},{"location":"api/coil-base/coil.decode/-decoder/decode/#decode","text":"abstract suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult Decode source as a Drawable . NOTE: Implementations are responsible for closing source when finished with it.","title":"decode"},{"location":"api/coil-base/coil.decode/-decoder/decode/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. source - The BufferedSource to read from. size - The requested dimensions for the image. options - A set of configuration options for this request.","title":"Parameters"},{"location":"api/coil-base/coil.decode/-decoder/handles/","text":"coil-base / coil.decode / Decoder / handles handles abstract fun handles(source: BufferedSource , mimeType: String ?): Boolean Return true if this decoder supports decoding source . Implementations must not consume the source, as this can cause subsequent calls to handles and decode to fail. Prefer using BufferedSource.peek , BufferedSource.rangeEquals , or other non-destructive methods to check for the presence of header bytes or other markers. Implementations can also rely on mimeType , however it is not guaranteed to be accurate (e.g. a file that ends with .png, but is encoded as a .jpg). Parameters source - The BufferedSource to read from. mimeType - An optional MIME type for the source .","title":"Handles"},{"location":"api/coil-base/coil.decode/-decoder/handles/#handles","text":"abstract fun handles(source: BufferedSource , mimeType: String ?): Boolean Return true if this decoder supports decoding source . Implementations must not consume the source, as this can cause subsequent calls to handles and decode to fail. Prefer using BufferedSource.peek , BufferedSource.rangeEquals , or other non-destructive methods to check for the presence of header bytes or other markers. Implementations can also rely on mimeType , however it is not guaranteed to be accurate (e.g. a file that ends with .png, but is encoded as a .jpg).","title":"handles"},{"location":"api/coil-base/coil.decode/-decoder/handles/#parameters","text":"source - The BufferedSource to read from. mimeType - An optional MIME type for the source .","title":"Parameters"},{"location":"api/coil-base/coil.decode/-options/","text":"coil-base / coil.decode / Options Options class Options A set of configuration options for fetching and decoding an image. Fetcher s and Decoder s should respect these options as best as possible. Parameters context - The Context used to execute this request. config - The requested config for any Bitmap s. colorSpace - The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb . scale - The scaling algorithm for how to fit the source image's dimensions into the target's dimensions. allowInexactSize - True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization. allowRgb565 - True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha. premultipliedAlpha - True if the color (RGB) channels of the decoded image should be pre-multiplied by the alpha channel. The default behavior is to enable pre-multiplication but in some environments it can be necessary to disable this feature to leave the source pixels unmodified. headers - The header fields to use for any network requests. parameters - A map of custom parameters. These are used to pass custom data to a component. memoryCachePolicy - Determines if this request is allowed to read/write from/to memory. diskCachePolicy - Determines if this request is allowed to read/write from/to disk. networkCachePolicy - Determines if this request is allowed to read from the network. Constructors Name Summary init A set of configuration options for fetching and decoding an image. Options(context: Context , config: Config = Bitmap.Config.ARGB_8888, colorSpace: ColorSpace ? = NULL_COLOR_SPACE, scale: Scale = Scale.FIT, allowInexactSize: Boolean = false, allowRgb565: Boolean = false, premultipliedAlpha: Boolean = true, headers: Headers = EMPTY_HEADERS, parameters: Parameters = Parameters.EMPTY, memoryCachePolicy: CachePolicy = CachePolicy.ENABLED, diskCachePolicy: CachePolicy = CachePolicy.ENABLED, networkCachePolicy: CachePolicy = CachePolicy.ENABLED) Properties Name Summary allowInexactSize True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization. val allowInexactSize: Boolean allowRgb565 True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha. val allowRgb565: Boolean colorSpace The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb . val colorSpace: ColorSpace ? config The requested config for any Bitmap s. val config: Config context The Context used to execute this request. val context: Context diskCachePolicy Determines if this request is allowed to read/write from/to disk. val diskCachePolicy: CachePolicy headers The header fields to use for any network requests. val headers: Headers memoryCachePolicy Determines if this request is allowed to read/write from/to memory. val memoryCachePolicy: CachePolicy networkCachePolicy Determines if this request is allowed to read from the network. val networkCachePolicy: CachePolicy parameters A map of custom parameters. These are used to pass custom data to a component. val parameters: Parameters premultipliedAlpha True if the color (RGB) channels of the decoded image should be pre-multiplied by the alpha channel. The default behavior is to enable pre-multiplication but in some environments it can be necessary to disable this feature to leave the source pixels unmodified. val premultipliedAlpha: Boolean scale The scaling algorithm for how to fit the source image's dimensions into the target's dimensions. val scale: Scale Functions Name Summary copy fun copy(context: Context = this.context, config: Config = this.config, colorSpace: ColorSpace ? = this.colorSpace, scale: Scale = this.scale, allowInexactSize: Boolean = this.allowInexactSize, allowRgb565: Boolean = this.allowRgb565, premultipliedAlpha: Boolean = this.premultipliedAlpha, headers: Headers = this.headers, parameters: Parameters = this.parameters, memoryCachePolicy: CachePolicy = this.memoryCachePolicy, diskCachePolicy: CachePolicy = this.diskCachePolicy, networkCachePolicy: CachePolicy = this.networkCachePolicy): Options equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String","title":"Home"},{"location":"api/coil-base/coil.decode/-options/#options","text":"class Options A set of configuration options for fetching and decoding an image. Fetcher s and Decoder s should respect these options as best as possible.","title":"Options"},{"location":"api/coil-base/coil.decode/-options/#parameters","text":"context - The Context used to execute this request. config - The requested config for any Bitmap s. colorSpace - The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb . scale - The scaling algorithm for how to fit the source image's dimensions into the target's dimensions. allowInexactSize - True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization. allowRgb565 - True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha. premultipliedAlpha - True if the color (RGB) channels of the decoded image should be pre-multiplied by the alpha channel. The default behavior is to enable pre-multiplication but in some environments it can be necessary to disable this feature to leave the source pixels unmodified. headers - The header fields to use for any network requests. parameters - A map of custom parameters. These are used to pass custom data to a component. memoryCachePolicy - Determines if this request is allowed to read/write from/to memory. diskCachePolicy - Determines if this request is allowed to read/write from/to disk. networkCachePolicy - Determines if this request is allowed to read from the network.","title":"Parameters"},{"location":"api/coil-base/coil.decode/-options/#constructors","text":"Name Summary init A set of configuration options for fetching and decoding an image. Options(context: Context , config: Config = Bitmap.Config.ARGB_8888, colorSpace: ColorSpace ? = NULL_COLOR_SPACE, scale: Scale = Scale.FIT, allowInexactSize: Boolean = false, allowRgb565: Boolean = false, premultipliedAlpha: Boolean = true, headers: Headers = EMPTY_HEADERS, parameters: Parameters = Parameters.EMPTY, memoryCachePolicy: CachePolicy = CachePolicy.ENABLED, diskCachePolicy: CachePolicy = CachePolicy.ENABLED, networkCachePolicy: CachePolicy = CachePolicy.ENABLED)","title":"Constructors"},{"location":"api/coil-base/coil.decode/-options/#properties","text":"Name Summary allowInexactSize True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization. val allowInexactSize: Boolean allowRgb565 True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha. val allowRgb565: Boolean colorSpace The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb . val colorSpace: ColorSpace ? config The requested config for any Bitmap s. val config: Config context The Context used to execute this request. val context: Context diskCachePolicy Determines if this request is allowed to read/write from/to disk. val diskCachePolicy: CachePolicy headers The header fields to use for any network requests. val headers: Headers memoryCachePolicy Determines if this request is allowed to read/write from/to memory. val memoryCachePolicy: CachePolicy networkCachePolicy Determines if this request is allowed to read from the network. val networkCachePolicy: CachePolicy parameters A map of custom parameters. These are used to pass custom data to a component. val parameters: Parameters premultipliedAlpha True if the color (RGB) channels of the decoded image should be pre-multiplied by the alpha channel. The default behavior is to enable pre-multiplication but in some environments it can be necessary to disable this feature to leave the source pixels unmodified. val premultipliedAlpha: Boolean scale The scaling algorithm for how to fit the source image's dimensions into the target's dimensions. val scale: Scale","title":"Properties"},{"location":"api/coil-base/coil.decode/-options/#functions","text":"Name Summary copy fun copy(context: Context = this.context, config: Config = this.config, colorSpace: ColorSpace ? = this.colorSpace, scale: Scale = this.scale, allowInexactSize: Boolean = this.allowInexactSize, allowRgb565: Boolean = this.allowRgb565, premultipliedAlpha: Boolean = this.premultipliedAlpha, headers: Headers = this.headers, parameters: Parameters = this.parameters, memoryCachePolicy: CachePolicy = this.memoryCachePolicy, diskCachePolicy: CachePolicy = this.diskCachePolicy, networkCachePolicy: CachePolicy = this.networkCachePolicy): Options equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String","title":"Functions"},{"location":"api/coil-base/coil.decode/-options/-init-/","text":"coil-base / coil.decode / Options / init init Options(context: Context , config: Config = Bitmap.Config.ARGB_8888, colorSpace: ColorSpace ? = NULL_COLOR_SPACE, scale: Scale = Scale.FIT, allowInexactSize: Boolean = false, allowRgb565: Boolean = false, premultipliedAlpha: Boolean = true, headers: Headers = EMPTY_HEADERS, parameters: Parameters = Parameters.EMPTY, memoryCachePolicy: CachePolicy = CachePolicy.ENABLED, diskCachePolicy: CachePolicy = CachePolicy.ENABLED, networkCachePolicy: CachePolicy = CachePolicy.ENABLED) A set of configuration options for fetching and decoding an image. Fetcher s and Decoder s should respect these options as best as possible. Parameters context - The Context used to execute this request. config - The requested config for any Bitmap s. colorSpace - The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb . scale - The scaling algorithm for how to fit the source image's dimensions into the target's dimensions. allowInexactSize - True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization. allowRgb565 - True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha. premultipliedAlpha - True if the color (RGB) channels of the decoded image should be pre-multiplied by the alpha channel. The default behavior is to enable pre-multiplication but in some environments it can be necessary to disable this feature to leave the source pixels unmodified. headers - The header fields to use for any network requests. parameters - A map of custom parameters. These are used to pass custom data to a component. memoryCachePolicy - Determines if this request is allowed to read/write from/to memory. diskCachePolicy - Determines if this request is allowed to read/write from/to disk. networkCachePolicy - Determines if this request is allowed to read from the network.","title":" init "},{"location":"api/coil-base/coil.decode/-options/-init-/#init","text":"Options(context: Context , config: Config = Bitmap.Config.ARGB_8888, colorSpace: ColorSpace ? = NULL_COLOR_SPACE, scale: Scale = Scale.FIT, allowInexactSize: Boolean = false, allowRgb565: Boolean = false, premultipliedAlpha: Boolean = true, headers: Headers = EMPTY_HEADERS, parameters: Parameters = Parameters.EMPTY, memoryCachePolicy: CachePolicy = CachePolicy.ENABLED, diskCachePolicy: CachePolicy = CachePolicy.ENABLED, networkCachePolicy: CachePolicy = CachePolicy.ENABLED) A set of configuration options for fetching and decoding an image. Fetcher s and Decoder s should respect these options as best as possible.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.decode/-options/-init-/#parameters","text":"context - The Context used to execute this request. config - The requested config for any Bitmap s. colorSpace - The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb . scale - The scaling algorithm for how to fit the source image's dimensions into the target's dimensions. allowInexactSize - True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization. allowRgb565 - True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha. premultipliedAlpha - True if the color (RGB) channels of the decoded image should be pre-multiplied by the alpha channel. The default behavior is to enable pre-multiplication but in some environments it can be necessary to disable this feature to leave the source pixels unmodified. headers - The header fields to use for any network requests. parameters - A map of custom parameters. These are used to pass custom data to a component. memoryCachePolicy - Determines if this request is allowed to read/write from/to memory. diskCachePolicy - Determines if this request is allowed to read/write from/to disk. networkCachePolicy - Determines if this request is allowed to read from the network.","title":"Parameters"},{"location":"api/coil-base/coil.decode/-options/allow-inexact-size/","text":"coil-base / coil.decode / Options / allowInexactSize allowInexactSize val allowInexactSize: Boolean True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization.","title":"Allow inexact size"},{"location":"api/coil-base/coil.decode/-options/allow-inexact-size/#allowinexactsize","text":"val allowInexactSize: Boolean True if the output image does not need to fit/fill the target's dimensions exactly. For instance, if true BitmapFactoryDecoder will not decode an image at a larger size than its source dimensions as an optimization.","title":"allowInexactSize"},{"location":"api/coil-base/coil.decode/-options/allow-rgb565/","text":"coil-base / coil.decode / Options / allowRgb565 allowRgb565 val allowRgb565: Boolean True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha.","title":"Allow rgb565"},{"location":"api/coil-base/coil.decode/-options/allow-rgb565/#allowrgb565","text":"val allowRgb565: Boolean True if a component is allowed to use Bitmap.Config.RGB_565 as an optimization. As RGB_565 does not have an alpha channel, components should only use RGB_565 if the image is guaranteed to not use alpha.","title":"allowRgb565"},{"location":"api/coil-base/coil.decode/-options/color-space/","text":"coil-base / coil.decode / Options / colorSpace colorSpace val colorSpace: ColorSpace ? The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb .","title":"Color space"},{"location":"api/coil-base/coil.decode/-options/color-space/#colorspace","text":"val colorSpace: ColorSpace ? The preferred color space for any Bitmap s. If null, components should typically default to ColorSpace.Rgb .","title":"colorSpace"},{"location":"api/coil-base/coil.decode/-options/config/","text":"coil-base / coil.decode / Options / config config val config: Config The requested config for any Bitmap s.","title":"Config"},{"location":"api/coil-base/coil.decode/-options/config/#config","text":"val config: Config The requested config for any Bitmap s.","title":"config"},{"location":"api/coil-base/coil.decode/-options/context/","text":"coil-base / coil.decode / Options / context context val context: Context The Context used to execute this request.","title":"Context"},{"location":"api/coil-base/coil.decode/-options/context/#context","text":"val context: Context The Context used to execute this request.","title":"context"},{"location":"api/coil-base/coil.decode/-options/copy/","text":"coil-base / coil.decode / Options / copy copy fun copy(context: Context = this.context, config: Config = this.config, colorSpace: ColorSpace ? = this.colorSpace, scale: Scale = this.scale, allowInexactSize: Boolean = this.allowInexactSize, allowRgb565: Boolean = this.allowRgb565, premultipliedAlpha: Boolean = this.premultipliedAlpha, headers: Headers = this.headers, parameters: Parameters = this.parameters, memoryCachePolicy: CachePolicy = this.memoryCachePolicy, diskCachePolicy: CachePolicy = this.diskCachePolicy, networkCachePolicy: CachePolicy = this.networkCachePolicy): Options","title":"Copy"},{"location":"api/coil-base/coil.decode/-options/copy/#copy","text":"fun copy(context: Context = this.context, config: Config = this.config, colorSpace: ColorSpace ? = this.colorSpace, scale: Scale = this.scale, allowInexactSize: Boolean = this.allowInexactSize, allowRgb565: Boolean = this.allowRgb565, premultipliedAlpha: Boolean = this.premultipliedAlpha, headers: Headers = this.headers, parameters: Parameters = this.parameters, memoryCachePolicy: CachePolicy = this.memoryCachePolicy, diskCachePolicy: CachePolicy = this.diskCachePolicy, networkCachePolicy: CachePolicy = this.networkCachePolicy): Options","title":"copy"},{"location":"api/coil-base/coil.decode/-options/disk-cache-policy/","text":"coil-base / coil.decode / Options / diskCachePolicy diskCachePolicy val diskCachePolicy: CachePolicy Determines if this request is allowed to read/write from/to disk.","title":"Disk cache policy"},{"location":"api/coil-base/coil.decode/-options/disk-cache-policy/#diskcachepolicy","text":"val diskCachePolicy: CachePolicy Determines if this request is allowed to read/write from/to disk.","title":"diskCachePolicy"},{"location":"api/coil-base/coil.decode/-options/equals/","text":"coil-base / coil.decode / Options / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/coil-base/coil.decode/-options/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/coil-base/coil.decode/-options/hash-code/","text":"coil-base / coil.decode / Options / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"api/coil-base/coil.decode/-options/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"api/coil-base/coil.decode/-options/headers/","text":"coil-base / coil.decode / Options / headers headers val headers: Headers The header fields to use for any network requests.","title":"Headers"},{"location":"api/coil-base/coil.decode/-options/headers/#headers","text":"val headers: Headers The header fields to use for any network requests.","title":"headers"},{"location":"api/coil-base/coil.decode/-options/memory-cache-policy/","text":"coil-base / coil.decode / Options / memoryCachePolicy memoryCachePolicy val memoryCachePolicy: CachePolicy Determines if this request is allowed to read/write from/to memory.","title":"Memory cache policy"},{"location":"api/coil-base/coil.decode/-options/memory-cache-policy/#memorycachepolicy","text":"val memoryCachePolicy: CachePolicy Determines if this request is allowed to read/write from/to memory.","title":"memoryCachePolicy"},{"location":"api/coil-base/coil.decode/-options/network-cache-policy/","text":"coil-base / coil.decode / Options / networkCachePolicy networkCachePolicy val networkCachePolicy: CachePolicy Determines if this request is allowed to read from the network.","title":"Network cache policy"},{"location":"api/coil-base/coil.decode/-options/network-cache-policy/#networkcachepolicy","text":"val networkCachePolicy: CachePolicy Determines if this request is allowed to read from the network.","title":"networkCachePolicy"},{"location":"api/coil-base/coil.decode/-options/parameters/","text":"coil-base / coil.decode / Options / parameters parameters val parameters: Parameters A map of custom parameters. These are used to pass custom data to a component.","title":"Parameters"},{"location":"api/coil-base/coil.decode/-options/parameters/#parameters","text":"val parameters: Parameters A map of custom parameters. These are used to pass custom data to a component.","title":"parameters"},{"location":"api/coil-base/coil.decode/-options/premultiplied-alpha/","text":"coil-base / coil.decode / Options / premultipliedAlpha premultipliedAlpha val premultipliedAlpha: Boolean True if the color (RGB) channels of the decoded image should be pre-multiplied by the alpha channel. The default behavior is to enable pre-multiplication but in some environments it can be necessary to disable this feature to leave the source pixels unmodified.","title":"Premultiplied alpha"},{"location":"api/coil-base/coil.decode/-options/premultiplied-alpha/#premultipliedalpha","text":"val premultipliedAlpha: Boolean True if the color (RGB) channels of the decoded image should be pre-multiplied by the alpha channel. The default behavior is to enable pre-multiplication but in some environments it can be necessary to disable this feature to leave the source pixels unmodified.","title":"premultipliedAlpha"},{"location":"api/coil-base/coil.decode/-options/scale/","text":"coil-base / coil.decode / Options / scale scale val scale: Scale The scaling algorithm for how to fit the source image's dimensions into the target's dimensions.","title":"Scale"},{"location":"api/coil-base/coil.decode/-options/scale/#scale","text":"val scale: Scale The scaling algorithm for how to fit the source image's dimensions into the target's dimensions.","title":"scale"},{"location":"api/coil-base/coil.decode/-options/to-string/","text":"coil-base / coil.decode / Options / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.decode/-options/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.drawable/","text":"coil-base / coil.drawable Package coil.drawable Types Name Summary CrossfadeDrawable A Drawable that crossfades from start to end . class CrossfadeDrawable : Drawable , Callback , Animatable2Compat","title":"Home"},{"location":"api/coil-base/coil.drawable/#package-coildrawable","text":"","title":"Package coil.drawable"},{"location":"api/coil-base/coil.drawable/#types","text":"Name Summary CrossfadeDrawable A Drawable that crossfades from start to end . class CrossfadeDrawable : Drawable , Callback , Animatable2Compat","title":"Types"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/","text":"coil-base / coil.drawable / CrossfadeDrawable CrossfadeDrawable class CrossfadeDrawable : Drawable , Callback , Animatable2Compat A Drawable that crossfades from start to end . NOTE: The animation can only be executed once as the start drawable is dereferenced at the end of the transition. Parameters start - The Drawable to crossfade from. end - The Drawable to crossfade to. scale - The scaling algorithm for start and end . durationMillis - The duration of the crossfade animation. fadeStart - If false, the start drawable will not fade out while the end drawable fades in. preferExactIntrinsicSize - If true, this drawable's intrinsic width/height will only be -1 if start and end return -1 for that dimension. If false, the intrinsic width/height will be -1 if start or end return -1 for that dimension. This is useful for views that require an exact intrinsic size to scale the drawable. Constructors Name Summary init CrossfadeDrawable(start: Drawable ?, end: Drawable ?, scale: Scale = Scale.FIT, durationMillis: Int = DEFAULT_DURATION, fadeStart: Boolean = true) A Drawable that crossfades from start to end . CrossfadeDrawable(start: Drawable ?, end: Drawable ?, scale: Scale = Scale.FIT, durationMillis: Int = DEFAULT_DURATION, fadeStart: Boolean = true, preferExactIntrinsicSize: Boolean = false) Properties Name Summary durationMillis The duration of the crossfade animation. val durationMillis: Int fadeStart If false, the start drawable will not fade out while the end drawable fades in. val fadeStart: Boolean preferExactIntrinsicSize If true, this drawable's intrinsic width/height will only be -1 if start and end return -1 for that dimension. If false, the intrinsic width/height will be -1 if start or end return -1 for that dimension. This is useful for views that require an exact intrinsic size to scale the drawable. val preferExactIntrinsicSize: Boolean scale The scaling algorithm for start and end . val scale: Scale Functions Name Summary clearAnimationCallbacks fun clearAnimationCallbacks(): Unit draw fun draw(canvas: Canvas ): Unit getAlpha fun getAlpha(): Int getColorFilter fun getColorFilter(): ColorFilter ? getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit isRunning fun isRunning(): Boolean onBoundsChange fun onBoundsChange(bounds: Rect ): Unit onLevelChange fun onLevelChange(level: Int ): Boolean onStateChange fun onStateChange(state: IntArray ): Boolean registerAnimationCallback fun registerAnimationCallback(callback: AnimationCallback ): Unit scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit setTint fun setTint(tintColor: Int ): Unit setTintBlendMode fun setTintBlendMode(blendMode: BlendMode ?): Unit setTintList fun setTintList(tint: ColorStateList ?): Unit setTintMode fun setTintMode(tintMode: Mode ?): Unit start fun start(): Unit stop fun stop(): Unit unregisterAnimationCallback fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit Companion Object Properties Name Summary DEFAULT_DURATION const val DEFAULT_DURATION: Int","title":"Home"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#crossfadedrawable","text":"class CrossfadeDrawable : Drawable , Callback , Animatable2Compat A Drawable that crossfades from start to end . NOTE: The animation can only be executed once as the start drawable is dereferenced at the end of the transition.","title":"CrossfadeDrawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#parameters","text":"start - The Drawable to crossfade from. end - The Drawable to crossfade to. scale - The scaling algorithm for start and end . durationMillis - The duration of the crossfade animation. fadeStart - If false, the start drawable will not fade out while the end drawable fades in. preferExactIntrinsicSize - If true, this drawable's intrinsic width/height will only be -1 if start and end return -1 for that dimension. If false, the intrinsic width/height will be -1 if start or end return -1 for that dimension. This is useful for views that require an exact intrinsic size to scale the drawable.","title":"Parameters"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#constructors","text":"Name Summary init CrossfadeDrawable(start: Drawable ?, end: Drawable ?, scale: Scale = Scale.FIT, durationMillis: Int = DEFAULT_DURATION, fadeStart: Boolean = true) A Drawable that crossfades from start to end . CrossfadeDrawable(start: Drawable ?, end: Drawable ?, scale: Scale = Scale.FIT, durationMillis: Int = DEFAULT_DURATION, fadeStart: Boolean = true, preferExactIntrinsicSize: Boolean = false)","title":"Constructors"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#properties","text":"Name Summary durationMillis The duration of the crossfade animation. val durationMillis: Int fadeStart If false, the start drawable will not fade out while the end drawable fades in. val fadeStart: Boolean preferExactIntrinsicSize If true, this drawable's intrinsic width/height will only be -1 if start and end return -1 for that dimension. If false, the intrinsic width/height will be -1 if start or end return -1 for that dimension. This is useful for views that require an exact intrinsic size to scale the drawable. val preferExactIntrinsicSize: Boolean scale The scaling algorithm for start and end . val scale: Scale","title":"Properties"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#functions","text":"Name Summary clearAnimationCallbacks fun clearAnimationCallbacks(): Unit draw fun draw(canvas: Canvas ): Unit getAlpha fun getAlpha(): Int getColorFilter fun getColorFilter(): ColorFilter ? getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit isRunning fun isRunning(): Boolean onBoundsChange fun onBoundsChange(bounds: Rect ): Unit onLevelChange fun onLevelChange(level: Int ): Boolean onStateChange fun onStateChange(state: IntArray ): Boolean registerAnimationCallback fun registerAnimationCallback(callback: AnimationCallback ): Unit scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit setTint fun setTint(tintColor: Int ): Unit setTintBlendMode fun setTintBlendMode(blendMode: BlendMode ?): Unit setTintList fun setTintList(tint: ColorStateList ?): Unit setTintMode fun setTintMode(tintMode: Mode ?): Unit start fun start(): Unit stop fun stop(): Unit unregisterAnimationCallback fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"Functions"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/#companion-object-properties","text":"Name Summary DEFAULT_DURATION const val DEFAULT_DURATION: Int","title":"Companion Object Properties"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/-d-e-f-a-u-l-t_-d-u-r-a-t-i-o-n/","text":"coil-base / coil.drawable / CrossfadeDrawable / DEFAULT_DURATION DEFAULT_DURATION const val DEFAULT_DURATION: Int","title":" d e f a u l t  d u r a t i o n"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/-d-e-f-a-u-l-t_-d-u-r-a-t-i-o-n/#default_duration","text":"const val DEFAULT_DURATION: Int","title":"DEFAULT_DURATION"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/-init-/","text":"coil-base / coil.drawable / CrossfadeDrawable / init init CrossfadeDrawable(start: Drawable ?, end: Drawable ?, scale: Scale = Scale.FIT, durationMillis: Int = DEFAULT_DURATION, fadeStart: Boolean = true)``CrossfadeDrawable(start: Drawable ?, end: Drawable ?, scale: Scale = Scale.FIT, durationMillis: Int = DEFAULT_DURATION, fadeStart: Boolean = true, preferExactIntrinsicSize: Boolean = false) A Drawable that crossfades from start to end . NOTE: The animation can only be executed once as the start drawable is dereferenced at the end of the transition. Parameters start - The Drawable to crossfade from. end - The Drawable to crossfade to. scale - The scaling algorithm for start and end . durationMillis - The duration of the crossfade animation. fadeStart - If false, the start drawable will not fade out while the end drawable fades in. preferExactIntrinsicSize - If true, this drawable's intrinsic width/height will only be -1 if start and end return -1 for that dimension. If false, the intrinsic width/height will be -1 if start or end return -1 for that dimension. This is useful for views that require an exact intrinsic size to scale the drawable.","title":" init "},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/-init-/#init","text":"CrossfadeDrawable(start: Drawable ?, end: Drawable ?, scale: Scale = Scale.FIT, durationMillis: Int = DEFAULT_DURATION, fadeStart: Boolean = true)``CrossfadeDrawable(start: Drawable ?, end: Drawable ?, scale: Scale = Scale.FIT, durationMillis: Int = DEFAULT_DURATION, fadeStart: Boolean = true, preferExactIntrinsicSize: Boolean = false) A Drawable that crossfades from start to end . NOTE: The animation can only be executed once as the start drawable is dereferenced at the end of the transition.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/-init-/#parameters","text":"start - The Drawable to crossfade from. end - The Drawable to crossfade to. scale - The scaling algorithm for start and end . durationMillis - The duration of the crossfade animation. fadeStart - If false, the start drawable will not fade out while the end drawable fades in. preferExactIntrinsicSize - If true, this drawable's intrinsic width/height will only be -1 if start and end return -1 for that dimension. If false, the intrinsic width/height will be -1 if start or end return -1 for that dimension. This is useful for views that require an exact intrinsic size to scale the drawable.","title":"Parameters"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/clear-animation-callbacks/","text":"coil-base / coil.drawable / CrossfadeDrawable / clearAnimationCallbacks clearAnimationCallbacks fun clearAnimationCallbacks(): Unit","title":"Clear animation callbacks"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/clear-animation-callbacks/#clearanimationcallbacks","text":"fun clearAnimationCallbacks(): Unit","title":"clearAnimationCallbacks"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/draw/","text":"coil-base / coil.drawable / CrossfadeDrawable / draw draw fun draw(canvas: Canvas ): Unit","title":"Draw"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/draw/#draw","text":"fun draw(canvas: Canvas ): Unit","title":"draw"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/duration-millis/","text":"coil-base / coil.drawable / CrossfadeDrawable / durationMillis durationMillis val durationMillis: Int The duration of the crossfade animation.","title":"Duration millis"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/duration-millis/#durationmillis","text":"val durationMillis: Int The duration of the crossfade animation.","title":"durationMillis"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/fade-start/","text":"coil-base / coil.drawable / CrossfadeDrawable / fadeStart fadeStart val fadeStart: Boolean If false, the start drawable will not fade out while the end drawable fades in.","title":"Fade start"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/fade-start/#fadestart","text":"val fadeStart: Boolean If false, the start drawable will not fade out while the end drawable fades in.","title":"fadeStart"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-alpha/","text":"coil-base / coil.drawable / CrossfadeDrawable / getAlpha getAlpha @RequiresApi(19) fun getAlpha(): Int","title":"Get alpha"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-alpha/#getalpha","text":"@RequiresApi(19) fun getAlpha(): Int","title":"getAlpha"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-color-filter/","text":"coil-base / coil.drawable / CrossfadeDrawable / getColorFilter getColorFilter @RequiresApi(21) fun getColorFilter(): ColorFilter ?","title":"Get color filter"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-color-filter/#getcolorfilter","text":"@RequiresApi(21) fun getColorFilter(): ColorFilter ?","title":"getColorFilter"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-intrinsic-height/","text":"coil-base / coil.drawable / CrossfadeDrawable / getIntrinsicHeight getIntrinsicHeight fun getIntrinsicHeight(): Int","title":"Get intrinsic height"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-intrinsic-height/#getintrinsicheight","text":"fun getIntrinsicHeight(): Int","title":"getIntrinsicHeight"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-intrinsic-width/","text":"coil-base / coil.drawable / CrossfadeDrawable / getIntrinsicWidth getIntrinsicWidth fun getIntrinsicWidth(): Int","title":"Get intrinsic width"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-intrinsic-width/#getintrinsicwidth","text":"fun getIntrinsicWidth(): Int","title":"getIntrinsicWidth"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-opacity/","text":"coil-base / coil.drawable / CrossfadeDrawable / getOpacity getOpacity fun getOpacity(): Int","title":"Get opacity"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/get-opacity/#getopacity","text":"fun getOpacity(): Int","title":"getOpacity"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/invalidate-drawable/","text":"coil-base / coil.drawable / CrossfadeDrawable / invalidateDrawable invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit","title":"Invalidate drawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/invalidate-drawable/#invalidatedrawable","text":"fun invalidateDrawable(who: Drawable ): Unit","title":"invalidateDrawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/is-running/","text":"coil-base / coil.drawable / CrossfadeDrawable / isRunning isRunning fun isRunning(): Boolean","title":"Is running"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/is-running/#isrunning","text":"fun isRunning(): Boolean","title":"isRunning"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/on-bounds-change/","text":"coil-base / coil.drawable / CrossfadeDrawable / onBoundsChange onBoundsChange protected fun onBoundsChange(bounds: Rect ): Unit","title":"On bounds change"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/on-bounds-change/#onboundschange","text":"protected fun onBoundsChange(bounds: Rect ): Unit","title":"onBoundsChange"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/on-level-change/","text":"coil-base / coil.drawable / CrossfadeDrawable / onLevelChange onLevelChange protected fun onLevelChange(level: Int ): Boolean","title":"On level change"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/on-level-change/#onlevelchange","text":"protected fun onLevelChange(level: Int ): Boolean","title":"onLevelChange"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/on-state-change/","text":"coil-base / coil.drawable / CrossfadeDrawable / onStateChange onStateChange protected fun onStateChange(state: IntArray ): Boolean","title":"On state change"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/on-state-change/#onstatechange","text":"protected fun onStateChange(state: IntArray ): Boolean","title":"onStateChange"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/prefer-exact-intrinsic-size/","text":"coil-base / coil.drawable / CrossfadeDrawable / preferExactIntrinsicSize preferExactIntrinsicSize val preferExactIntrinsicSize: Boolean If true, this drawable's intrinsic width/height will only be -1 if start and end return -1 for that dimension. If false, the intrinsic width/height will be -1 if start or end return -1 for that dimension. This is useful for views that require an exact intrinsic size to scale the drawable.","title":"Prefer exact intrinsic size"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/prefer-exact-intrinsic-size/#preferexactintrinsicsize","text":"val preferExactIntrinsicSize: Boolean If true, this drawable's intrinsic width/height will only be -1 if start and end return -1 for that dimension. If false, the intrinsic width/height will be -1 if start or end return -1 for that dimension. This is useful for views that require an exact intrinsic size to scale the drawable.","title":"preferExactIntrinsicSize"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/register-animation-callback/","text":"coil-base / coil.drawable / CrossfadeDrawable / registerAnimationCallback registerAnimationCallback fun registerAnimationCallback(callback: AnimationCallback ): Unit","title":"Register animation callback"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/register-animation-callback/#registeranimationcallback","text":"fun registerAnimationCallback(callback: AnimationCallback ): Unit","title":"registerAnimationCallback"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/scale/","text":"coil-base / coil.drawable / CrossfadeDrawable / scale scale val scale: Scale The scaling algorithm for start and end .","title":"Scale"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/scale/#scale","text":"val scale: Scale The scaling algorithm for start and end .","title":"scale"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/schedule-drawable/","text":"coil-base / coil.drawable / CrossfadeDrawable / scheduleDrawable scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit","title":"Schedule drawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/schedule-drawable/#scheduledrawable","text":"fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit","title":"scheduleDrawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-alpha/","text":"coil-base / coil.drawable / CrossfadeDrawable / setAlpha setAlpha fun setAlpha(alpha: Int ): Unit","title":"Set alpha"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-alpha/#setalpha","text":"fun setAlpha(alpha: Int ): Unit","title":"setAlpha"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-color-filter/","text":"coil-base / coil.drawable / CrossfadeDrawable / setColorFilter setColorFilter @RequiresApi(21) fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"Set color filter"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-color-filter/#setcolorfilter","text":"@RequiresApi(21) fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"setColorFilter"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint-blend-mode/","text":"coil-base / coil.drawable / CrossfadeDrawable / setTintBlendMode setTintBlendMode @RequiresApi(29) fun setTintBlendMode(blendMode: BlendMode ?): Unit","title":"Set tint blend mode"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint-blend-mode/#settintblendmode","text":"@RequiresApi(29) fun setTintBlendMode(blendMode: BlendMode ?): Unit","title":"setTintBlendMode"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint-list/","text":"coil-base / coil.drawable / CrossfadeDrawable / setTintList setTintList @RequiresApi(21) fun setTintList(tint: ColorStateList ?): Unit","title":"Set tint list"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint-list/#settintlist","text":"@RequiresApi(21) fun setTintList(tint: ColorStateList ?): Unit","title":"setTintList"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint-mode/","text":"coil-base / coil.drawable / CrossfadeDrawable / setTintMode setTintMode @RequiresApi(21) fun setTintMode(tintMode: Mode ?): Unit","title":"Set tint mode"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint-mode/#settintmode","text":"@RequiresApi(21) fun setTintMode(tintMode: Mode ?): Unit","title":"setTintMode"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint/","text":"coil-base / coil.drawable / CrossfadeDrawable / setTint setTint @RequiresApi(21) fun setTint(tintColor: Int ): Unit","title":"Set tint"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/set-tint/#settint","text":"@RequiresApi(21) fun setTint(tintColor: Int ): Unit","title":"setTint"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/start/","text":"coil-base / coil.drawable / CrossfadeDrawable / start start fun start(): Unit","title":"Start"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/start/#start","text":"fun start(): Unit","title":"start"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/stop/","text":"coil-base / coil.drawable / CrossfadeDrawable / stop stop fun stop(): Unit","title":"Stop"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/stop/#stop","text":"fun stop(): Unit","title":"stop"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/unregister-animation-callback/","text":"coil-base / coil.drawable / CrossfadeDrawable / unregisterAnimationCallback unregisterAnimationCallback fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean","title":"Unregister animation callback"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/unregister-animation-callback/#unregisteranimationcallback","text":"fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean","title":"unregisterAnimationCallback"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/unschedule-drawable/","text":"coil-base / coil.drawable / CrossfadeDrawable / unscheduleDrawable unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"Unschedule drawable"},{"location":"api/coil-base/coil.drawable/-crossfade-drawable/unschedule-drawable/#unscheduledrawable","text":"fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"unscheduleDrawable"},{"location":"api/coil-base/coil.fetch/","text":"coil-base / coil.fetch Package coil.fetch Types Name Summary DrawableResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . data class DrawableResult : FetchResult Fetcher A Fetcher translates data into either a BufferedSource or a Drawable . interface Fetcher T : Any FetchResult The result of Fetcher.fetch . sealed class FetchResult SourceResult A raw BufferedSource result, which will be consumed by the relevant Decoder . data class SourceResult : FetchResult","title":"Home"},{"location":"api/coil-base/coil.fetch/#package-coilfetch","text":"","title":"Package coil.fetch"},{"location":"api/coil-base/coil.fetch/#types","text":"Name Summary DrawableResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . data class DrawableResult : FetchResult Fetcher A Fetcher translates data into either a BufferedSource or a Drawable . interface Fetcher T : Any FetchResult The result of Fetcher.fetch . sealed class FetchResult SourceResult A raw BufferedSource result, which will be consumed by the relevant Decoder . data class SourceResult : FetchResult","title":"Types"},{"location":"api/coil-base/coil.fetch/-fetch-result/","text":"coil-base / coil.fetch / FetchResult FetchResult sealed class FetchResult The result of Fetcher.fetch . Inheritors Name Summary DrawableResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . data class DrawableResult : FetchResult SourceResult A raw BufferedSource result, which will be consumed by the relevant Decoder . data class SourceResult : FetchResult","title":" fetch result"},{"location":"api/coil-base/coil.fetch/-fetch-result/#fetchresult","text":"sealed class FetchResult The result of Fetcher.fetch .","title":"FetchResult"},{"location":"api/coil-base/coil.fetch/-fetch-result/#inheritors","text":"Name Summary DrawableResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . data class DrawableResult : FetchResult SourceResult A raw BufferedSource result, which will be consumed by the relevant Decoder . data class SourceResult : FetchResult","title":"Inheritors"},{"location":"api/coil-base/coil.fetch/-drawable-result/","text":"coil-base / coil.fetch / DrawableResult DrawableResult data class DrawableResult : FetchResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . Parameters drawable - The loaded Drawable . isSampled - True if drawable is sampled (i.e. not loaded into memory at full size). dataSource - The source that drawable was fetched from. Constructors Name Summary init A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . DrawableResult(drawable: Drawable , isSampled: Boolean , dataSource: DataSource ) Properties Name Summary dataSource The source that drawable was fetched from. val dataSource: DataSource drawable The loaded Drawable . val drawable: Drawable isSampled True if drawable is sampled (i.e. not loaded into memory at full size). val isSampled: Boolean","title":"Home"},{"location":"api/coil-base/coil.fetch/-drawable-result/#drawableresult","text":"data class DrawableResult : FetchResult A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource .","title":"DrawableResult"},{"location":"api/coil-base/coil.fetch/-drawable-result/#parameters","text":"drawable - The loaded Drawable . isSampled - True if drawable is sampled (i.e. not loaded into memory at full size). dataSource - The source that drawable was fetched from.","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-drawable-result/#constructors","text":"Name Summary init A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . DrawableResult(drawable: Drawable , isSampled: Boolean , dataSource: DataSource )","title":"Constructors"},{"location":"api/coil-base/coil.fetch/-drawable-result/#properties","text":"Name Summary dataSource The source that drawable was fetched from. val dataSource: DataSource drawable The loaded Drawable . val drawable: Drawable isSampled True if drawable is sampled (i.e. not loaded into memory at full size). val isSampled: Boolean","title":"Properties"},{"location":"api/coil-base/coil.fetch/-drawable-result/-init-/","text":"coil-base / coil.fetch / DrawableResult / init init DrawableResult(drawable: Drawable , isSampled: Boolean , dataSource: DataSource ) A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource . Parameters drawable - The loaded Drawable . isSampled - True if drawable is sampled (i.e. not loaded into memory at full size). dataSource - The source that drawable was fetched from.","title":" init "},{"location":"api/coil-base/coil.fetch/-drawable-result/-init-/#init","text":"DrawableResult(drawable: Drawable , isSampled: Boolean , dataSource: DataSource ) A direct Drawable result. Return this from a Fetcher if its data cannot be converted into a BufferedSource .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.fetch/-drawable-result/-init-/#parameters","text":"drawable - The loaded Drawable . isSampled - True if drawable is sampled (i.e. not loaded into memory at full size). dataSource - The source that drawable was fetched from.","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-drawable-result/data-source/","text":"coil-base / coil.fetch / DrawableResult / dataSource dataSource val dataSource: DataSource The source that drawable was fetched from.","title":"Data source"},{"location":"api/coil-base/coil.fetch/-drawable-result/data-source/#datasource","text":"val dataSource: DataSource The source that drawable was fetched from.","title":"dataSource"},{"location":"api/coil-base/coil.fetch/-drawable-result/drawable/","text":"coil-base / coil.fetch / DrawableResult / drawable drawable val drawable: Drawable The loaded Drawable .","title":"Drawable"},{"location":"api/coil-base/coil.fetch/-drawable-result/drawable/#drawable","text":"val drawable: Drawable The loaded Drawable .","title":"drawable"},{"location":"api/coil-base/coil.fetch/-drawable-result/is-sampled/","text":"coil-base / coil.fetch / DrawableResult / isSampled isSampled val isSampled: Boolean True if drawable is sampled (i.e. not loaded into memory at full size).","title":"Is sampled"},{"location":"api/coil-base/coil.fetch/-drawable-result/is-sampled/#issampled","text":"val isSampled: Boolean True if drawable is sampled (i.e. not loaded into memory at full size).","title":"isSampled"},{"location":"api/coil-base/coil.fetch/-fetcher/","text":"coil-base / coil.fetch / Fetcher Fetcher interface Fetcher T : Any A Fetcher translates data into either a BufferedSource or a Drawable . To accomplish this, fetchers fit into one of two types: Uses the data as a key to fetch bytes from a remote source (e.g. network or disk) and exposes it as a BufferedSource . e.g. HttpFetcher Reads the data directly and translates it into a Drawable . e.g. BitmapFetcher Functions Name Summary fetch Load the data into memory. Perform any necessary fetching operations. abstract suspend fun fetch(pool: BitmapPool , data: T, size: Size , options: Options ): FetchResult handles Return true if this can load data . open fun handles(data: T): Boolean key Compute the memory cache key for data . abstract fun key(data: T): String ?","title":"Home"},{"location":"api/coil-base/coil.fetch/-fetcher/#fetcher","text":"interface Fetcher T : Any A Fetcher translates data into either a BufferedSource or a Drawable . To accomplish this, fetchers fit into one of two types: Uses the data as a key to fetch bytes from a remote source (e.g. network or disk) and exposes it as a BufferedSource . e.g. HttpFetcher Reads the data directly and translates it into a Drawable . e.g. BitmapFetcher","title":"Fetcher"},{"location":"api/coil-base/coil.fetch/-fetcher/#functions","text":"Name Summary fetch Load the data into memory. Perform any necessary fetching operations. abstract suspend fun fetch(pool: BitmapPool , data: T, size: Size , options: Options ): FetchResult handles Return true if this can load data . open fun handles(data: T): Boolean key Compute the memory cache key for data . abstract fun key(data: T): String ?","title":"Functions"},{"location":"api/coil-base/coil.fetch/-fetcher/fetch/","text":"coil-base / coil.fetch / Fetcher / fetch fetch abstract suspend fun fetch(pool: BitmapPool , data: T, size: Size , options: Options ): FetchResult Load the data into memory. Perform any necessary fetching operations. Parameters pool - A BitmapPool which can be used to request Bitmap instances. data - The data to load. size - The requested dimensions for the image. options - A set of configuration options for this request.","title":"Fetch"},{"location":"api/coil-base/coil.fetch/-fetcher/fetch/#fetch","text":"abstract suspend fun fetch(pool: BitmapPool , data: T, size: Size , options: Options ): FetchResult Load the data into memory. Perform any necessary fetching operations.","title":"fetch"},{"location":"api/coil-base/coil.fetch/-fetcher/fetch/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. data - The data to load. size - The requested dimensions for the image. options - A set of configuration options for this request.","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-fetcher/handles/","text":"coil-base / coil.fetch / Fetcher / handles handles open fun handles(data: T): Boolean Return true if this can load data .","title":"Handles"},{"location":"api/coil-base/coil.fetch/-fetcher/handles/#handles","text":"open fun handles(data: T): Boolean Return true if this can load data .","title":"handles"},{"location":"api/coil-base/coil.fetch/-fetcher/key/","text":"coil-base / coil.fetch / Fetcher / key key abstract fun key(data: T): String ? Compute the memory cache key for data . Items with the same cache key will be treated as equivalent by the MemoryCache . Returning null will prevent the result of fetch from being added to the memory cache.","title":"Key"},{"location":"api/coil-base/coil.fetch/-fetcher/key/#key","text":"abstract fun key(data: T): String ? Compute the memory cache key for data . Items with the same cache key will be treated as equivalent by the MemoryCache . Returning null will prevent the result of fetch from being added to the memory cache.","title":"key"},{"location":"api/coil-base/coil.fetch/-source-result/","text":"coil-base / coil.fetch / SourceResult SourceResult data class SourceResult : FetchResult A raw BufferedSource result, which will be consumed by the relevant Decoder . Parameters source - An unconsumed BufferedSource that will be decoded by a Decoder . mimeType - An optional MIME type for the source . dataSource - Where source was loaded from. Constructors Name Summary init A raw BufferedSource result, which will be consumed by the relevant Decoder . SourceResult(source: BufferedSource , mimeType: String ?, dataSource: DataSource ) Properties Name Summary dataSource Where source was loaded from. val dataSource: DataSource mimeType An optional MIME type for the source . val mimeType: String ? source An unconsumed BufferedSource that will be decoded by a Decoder . val source: BufferedSource","title":"Home"},{"location":"api/coil-base/coil.fetch/-source-result/#sourceresult","text":"data class SourceResult : FetchResult A raw BufferedSource result, which will be consumed by the relevant Decoder .","title":"SourceResult"},{"location":"api/coil-base/coil.fetch/-source-result/#parameters","text":"source - An unconsumed BufferedSource that will be decoded by a Decoder . mimeType - An optional MIME type for the source . dataSource - Where source was loaded from.","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-source-result/#constructors","text":"Name Summary init A raw BufferedSource result, which will be consumed by the relevant Decoder . SourceResult(source: BufferedSource , mimeType: String ?, dataSource: DataSource )","title":"Constructors"},{"location":"api/coil-base/coil.fetch/-source-result/#properties","text":"Name Summary dataSource Where source was loaded from. val dataSource: DataSource mimeType An optional MIME type for the source . val mimeType: String ? source An unconsumed BufferedSource that will be decoded by a Decoder . val source: BufferedSource","title":"Properties"},{"location":"api/coil-base/coil.fetch/-source-result/-init-/","text":"coil-base / coil.fetch / SourceResult / init init SourceResult(source: BufferedSource , mimeType: String ?, dataSource: DataSource ) A raw BufferedSource result, which will be consumed by the relevant Decoder . Parameters source - An unconsumed BufferedSource that will be decoded by a Decoder . mimeType - An optional MIME type for the source . dataSource - Where source was loaded from.","title":" init "},{"location":"api/coil-base/coil.fetch/-source-result/-init-/#init","text":"SourceResult(source: BufferedSource , mimeType: String ?, dataSource: DataSource ) A raw BufferedSource result, which will be consumed by the relevant Decoder .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.fetch/-source-result/-init-/#parameters","text":"source - An unconsumed BufferedSource that will be decoded by a Decoder . mimeType - An optional MIME type for the source . dataSource - Where source was loaded from.","title":"Parameters"},{"location":"api/coil-base/coil.fetch/-source-result/data-source/","text":"coil-base / coil.fetch / SourceResult / dataSource dataSource val dataSource: DataSource Where source was loaded from.","title":"Data source"},{"location":"api/coil-base/coil.fetch/-source-result/data-source/#datasource","text":"val dataSource: DataSource Where source was loaded from.","title":"dataSource"},{"location":"api/coil-base/coil.fetch/-source-result/mime-type/","text":"coil-base / coil.fetch / SourceResult / mimeType mimeType val mimeType: String ? An optional MIME type for the source .","title":"Mime type"},{"location":"api/coil-base/coil.fetch/-source-result/mime-type/#mimetype","text":"val mimeType: String ? An optional MIME type for the source .","title":"mimeType"},{"location":"api/coil-base/coil.fetch/-source-result/source/","text":"coil-base / coil.fetch / SourceResult / source source val source: BufferedSource An unconsumed BufferedSource that will be decoded by a Decoder .","title":"Source"},{"location":"api/coil-base/coil.fetch/-source-result/source/#source","text":"val source: BufferedSource An unconsumed BufferedSource that will be decoded by a Decoder .","title":"source"},{"location":"api/coil-base/coil.intercept/","text":"coil-base / coil.intercept Package coil.intercept Types Name Summary Interceptor Observe, transform, short circuit, or retry requests to an ImageLoader 's image engine. interface Interceptor","title":"Home"},{"location":"api/coil-base/coil.intercept/#package-coilintercept","text":"","title":"Package coil.intercept"},{"location":"api/coil-base/coil.intercept/#types","text":"Name Summary Interceptor Observe, transform, short circuit, or retry requests to an ImageLoader 's image engine. interface Interceptor","title":"Types"},{"location":"api/coil-base/coil.intercept/-interceptor/","text":"coil-base / coil.intercept / Interceptor Interceptor @ExperimentalCoilApi interface Interceptor Observe, transform, short circuit, or retry requests to an ImageLoader 's image engine. NOTE: The interceptor chain is launched from the main thread by default. See ImageLoader.Builder.launchInterceptorChainOnMainThread for more information. Types Name Summary Chain interface Chain Functions Name Summary intercept abstract suspend fun intercept(chain: Chain): ImageResult","title":"Home"},{"location":"api/coil-base/coil.intercept/-interceptor/#interceptor","text":"@ExperimentalCoilApi interface Interceptor Observe, transform, short circuit, or retry requests to an ImageLoader 's image engine. NOTE: The interceptor chain is launched from the main thread by default. See ImageLoader.Builder.launchInterceptorChainOnMainThread for more information.","title":"Interceptor"},{"location":"api/coil-base/coil.intercept/-interceptor/#types","text":"Name Summary Chain interface Chain","title":"Types"},{"location":"api/coil-base/coil.intercept/-interceptor/#functions","text":"Name Summary intercept abstract suspend fun intercept(chain: Chain): ImageResult","title":"Functions"},{"location":"api/coil-base/coil.intercept/-interceptor/intercept/","text":"coil-base / coil.intercept / Interceptor / intercept intercept abstract suspend fun intercept(chain: Chain): ImageResult","title":"Intercept"},{"location":"api/coil-base/coil.intercept/-interceptor/intercept/#intercept","text":"abstract suspend fun intercept(chain: Chain): ImageResult","title":"intercept"},{"location":"api/coil-base/coil.intercept/-interceptor/-chain/","text":"coil-base / coil.intercept / Interceptor / Chain Chain interface Chain Properties Name Summary request abstract val request: ImageRequest size abstract val size: Size Functions Name Summary proceed Continue executing the chain. abstract suspend fun proceed(request: ImageRequest ): ImageResult withSize Set the requested Size to load the image at. abstract fun withSize(size: Size ): Chain","title":"Home"},{"location":"api/coil-base/coil.intercept/-interceptor/-chain/#chain","text":"interface Chain","title":"Chain"},{"location":"api/coil-base/coil.intercept/-interceptor/-chain/#properties","text":"Name Summary request abstract val request: ImageRequest size abstract val size: Size","title":"Properties"},{"location":"api/coil-base/coil.intercept/-interceptor/-chain/#functions","text":"Name Summary proceed Continue executing the chain. abstract suspend fun proceed(request: ImageRequest ): ImageResult withSize Set the requested Size to load the image at. abstract fun withSize(size: Size ): Chain","title":"Functions"},{"location":"api/coil-base/coil.intercept/-interceptor/-chain/proceed/","text":"coil-base / coil.intercept / Interceptor / Chain / proceed proceed abstract suspend fun proceed(request: ImageRequest ): ImageResult Continue executing the chain. Parameters request - The request to proceed with.","title":"Proceed"},{"location":"api/coil-base/coil.intercept/-interceptor/-chain/proceed/#proceed","text":"abstract suspend fun proceed(request: ImageRequest ): ImageResult Continue executing the chain.","title":"proceed"},{"location":"api/coil-base/coil.intercept/-interceptor/-chain/proceed/#parameters","text":"request - The request to proceed with.","title":"Parameters"},{"location":"api/coil-base/coil.intercept/-interceptor/-chain/request/","text":"coil-base / coil.intercept / Interceptor / Chain / request request abstract val request: ImageRequest","title":"Request"},{"location":"api/coil-base/coil.intercept/-interceptor/-chain/request/#request","text":"abstract val request: ImageRequest","title":"request"},{"location":"api/coil-base/coil.intercept/-interceptor/-chain/size/","text":"coil-base / coil.intercept / Interceptor / Chain / size size abstract val size: Size","title":"Size"},{"location":"api/coil-base/coil.intercept/-interceptor/-chain/size/#size","text":"abstract val size: Size","title":"size"},{"location":"api/coil-base/coil.intercept/-interceptor/-chain/with-size/","text":"coil-base / coil.intercept / Interceptor / Chain / withSize withSize abstract fun withSize(size: Size ): Chain Set the requested Size to load the image at. Parameters size - The requested size for the image.","title":"With size"},{"location":"api/coil-base/coil.intercept/-interceptor/-chain/with-size/#withsize","text":"abstract fun withSize(size: Size ): Chain Set the requested Size to load the image at.","title":"withSize"},{"location":"api/coil-base/coil.intercept/-interceptor/-chain/with-size/#parameters","text":"size - The requested size for the image.","title":"Parameters"},{"location":"api/coil-base/coil.map/","text":"coil-base / coil.map Package coil.map Types Name Summary Mapper An interface to convert data of type T into V . interface Mapper T : Any , V : Any","title":"Home"},{"location":"api/coil-base/coil.map/#package-coilmap","text":"","title":"Package coil.map"},{"location":"api/coil-base/coil.map/#types","text":"Name Summary Mapper An interface to convert data of type T into V . interface Mapper T : Any , V : Any","title":"Types"},{"location":"api/coil-base/coil.map/-mapper/","text":"coil-base / coil.map / Mapper Mapper interface Mapper T : Any , V : Any An interface to convert data of type T into V . Use this to map custom data types to a type that can be handled by a Fetcher . Functions Name Summary handles Return true if this can convert data . open fun handles(data: T): Boolean map Convert data into V . abstract fun map(data: T): V","title":"Home"},{"location":"api/coil-base/coil.map/-mapper/#mapper","text":"interface Mapper T : Any , V : Any An interface to convert data of type T into V . Use this to map custom data types to a type that can be handled by a Fetcher .","title":"Mapper"},{"location":"api/coil-base/coil.map/-mapper/#functions","text":"Name Summary handles Return true if this can convert data . open fun handles(data: T): Boolean map Convert data into V . abstract fun map(data: T): V","title":"Functions"},{"location":"api/coil-base/coil.map/-mapper/handles/","text":"coil-base / coil.map / Mapper / handles handles open fun handles(data: T): Boolean Return true if this can convert data .","title":"Handles"},{"location":"api/coil-base/coil.map/-mapper/handles/#handles","text":"open fun handles(data: T): Boolean Return true if this can convert data .","title":"handles"},{"location":"api/coil-base/coil.map/-mapper/map/","text":"coil-base / coil.map / Mapper / map map abstract fun map(data: T): V Convert data into V .","title":"Map"},{"location":"api/coil-base/coil.map/-mapper/map/#map","text":"abstract fun map(data: T): V Convert data into V .","title":"map"},{"location":"api/coil-base/coil.memory/","text":"coil-base / coil.memory Package coil.memory Types Name Summary MemoryCache An in-memory cache of recently loaded images. interface MemoryCache","title":"Home"},{"location":"api/coil-base/coil.memory/#package-coilmemory","text":"","title":"Package coil.memory"},{"location":"api/coil-base/coil.memory/#types","text":"Name Summary MemoryCache An in-memory cache of recently loaded images. interface MemoryCache","title":"Types"},{"location":"api/coil-base/coil.memory/-memory-cache/","text":"coil-base / coil.memory / MemoryCache MemoryCache interface MemoryCache An in-memory cache of recently loaded images. Types Name Summary Key The cache key for an image in the memory cache. sealed class Key : Parcelable Properties Name Summary maxSize The maximum size of the cache in bytes. abstract val maxSize: Int size The current size of the cache in bytes. abstract val size: Int Functions Name Summary clear Remove all values from the memory cache. abstract fun clear(): Unit get Get the Bitmap associated with key . abstract operator fun get(key: Key): Bitmap ? remove Remove the Bitmap referenced by key . abstract fun remove(key: Key): Boolean set Set the Bitmap associated with key . abstract operator fun set(key: Key, bitmap: Bitmap ): Unit","title":"Home"},{"location":"api/coil-base/coil.memory/-memory-cache/#memorycache","text":"interface MemoryCache An in-memory cache of recently loaded images.","title":"MemoryCache"},{"location":"api/coil-base/coil.memory/-memory-cache/#types","text":"Name Summary Key The cache key for an image in the memory cache. sealed class Key : Parcelable","title":"Types"},{"location":"api/coil-base/coil.memory/-memory-cache/#properties","text":"Name Summary maxSize The maximum size of the cache in bytes. abstract val maxSize: Int size The current size of the cache in bytes. abstract val size: Int","title":"Properties"},{"location":"api/coil-base/coil.memory/-memory-cache/#functions","text":"Name Summary clear Remove all values from the memory cache. abstract fun clear(): Unit get Get the Bitmap associated with key . abstract operator fun get(key: Key): Bitmap ? remove Remove the Bitmap referenced by key . abstract fun remove(key: Key): Boolean set Set the Bitmap associated with key . abstract operator fun set(key: Key, bitmap: Bitmap ): Unit","title":"Functions"},{"location":"api/coil-base/coil.memory/-memory-cache/clear/","text":"coil-base / coil.memory / MemoryCache / clear clear abstract fun clear(): Unit Remove all values from the memory cache.","title":"Clear"},{"location":"api/coil-base/coil.memory/-memory-cache/clear/#clear","text":"abstract fun clear(): Unit Remove all values from the memory cache.","title":"clear"},{"location":"api/coil-base/coil.memory/-memory-cache/get/","text":"coil-base / coil.memory / MemoryCache / get get abstract operator fun get(key: Key): Bitmap ? Get the Bitmap associated with key .","title":"Get"},{"location":"api/coil-base/coil.memory/-memory-cache/get/#get","text":"abstract operator fun get(key: Key): Bitmap ? Get the Bitmap associated with key .","title":"get"},{"location":"api/coil-base/coil.memory/-memory-cache/max-size/","text":"coil-base / coil.memory / MemoryCache / maxSize maxSize abstract val maxSize: Int The maximum size of the cache in bytes.","title":"Max size"},{"location":"api/coil-base/coil.memory/-memory-cache/max-size/#maxsize","text":"abstract val maxSize: Int The maximum size of the cache in bytes.","title":"maxSize"},{"location":"api/coil-base/coil.memory/-memory-cache/remove/","text":"coil-base / coil.memory / MemoryCache / remove remove abstract fun remove(key: Key): Boolean Remove the Bitmap referenced by key . Return True if key was present in the cache. Else, return false.","title":"Remove"},{"location":"api/coil-base/coil.memory/-memory-cache/remove/#remove","text":"abstract fun remove(key: Key): Boolean Remove the Bitmap referenced by key . Return True if key was present in the cache. Else, return false.","title":"remove"},{"location":"api/coil-base/coil.memory/-memory-cache/set/","text":"coil-base / coil.memory / MemoryCache / set set abstract operator fun set(key: Key, bitmap: Bitmap ): Unit Set the Bitmap associated with key .","title":"Set"},{"location":"api/coil-base/coil.memory/-memory-cache/set/#set","text":"abstract operator fun set(key: Key, bitmap: Bitmap ): Unit Set the Bitmap associated with key .","title":"set"},{"location":"api/coil-base/coil.memory/-memory-cache/size/","text":"coil-base / coil.memory / MemoryCache / size size abstract val size: Int The current size of the cache in bytes.","title":"Size"},{"location":"api/coil-base/coil.memory/-memory-cache/size/#size","text":"abstract val size: Int The current size of the cache in bytes.","title":"size"},{"location":"api/coil-base/coil.memory/-memory-cache/-key/","text":"coil-base / coil.memory / MemoryCache / Key Key sealed class Key : Parcelable The cache key for an image in the memory cache. Companion Object Functions Name Summary invoke Create a simple memory cache key. operator fun invoke(value: String ): Key","title":"Home"},{"location":"api/coil-base/coil.memory/-memory-cache/-key/#key","text":"sealed class Key : Parcelable The cache key for an image in the memory cache.","title":"Key"},{"location":"api/coil-base/coil.memory/-memory-cache/-key/#companion-object-functions","text":"Name Summary invoke Create a simple memory cache key. operator fun invoke(value: String ): Key","title":"Companion Object Functions"},{"location":"api/coil-base/coil.memory/-memory-cache/-key/invoke/","text":"coil-base / coil.memory / MemoryCache / Key / invoke invoke @JvmStatic @JvmName(\"create\") operator fun invoke(value: String ): Key Create a simple memory cache key.","title":"Invoke"},{"location":"api/coil-base/coil.memory/-memory-cache/-key/invoke/#invoke","text":"@JvmStatic @JvmName(\"create\") operator fun invoke(value: String ): Key Create a simple memory cache key.","title":"invoke"},{"location":"api/coil-base/coil.network/","text":"coil-base / coil.network Package coil.network Exceptions Name Summary HttpException Exception for an unexpected, non-2xx HTTP response. class HttpException : RuntimeException","title":"Home"},{"location":"api/coil-base/coil.network/#package-coilnetwork","text":"","title":"Package coil.network"},{"location":"api/coil-base/coil.network/#exceptions","text":"Name Summary HttpException Exception for an unexpected, non-2xx HTTP response. class HttpException : RuntimeException","title":"Exceptions"},{"location":"api/coil-base/coil.network/-http-exception/","text":"coil-base / coil.network / HttpException HttpException class HttpException : RuntimeException Exception for an unexpected, non-2xx HTTP response. See Also HttpFetcher Constructors Name Summary init Exception for an unexpected, non-2xx HTTP response. HttpException(response: Response ) Properties Name Summary response val response: Response","title":"Home"},{"location":"api/coil-base/coil.network/-http-exception/#httpexception","text":"class HttpException : RuntimeException Exception for an unexpected, non-2xx HTTP response. See Also HttpFetcher","title":"HttpException"},{"location":"api/coil-base/coil.network/-http-exception/#constructors","text":"Name Summary init Exception for an unexpected, non-2xx HTTP response. HttpException(response: Response )","title":"Constructors"},{"location":"api/coil-base/coil.network/-http-exception/#properties","text":"Name Summary response val response: Response","title":"Properties"},{"location":"api/coil-base/coil.network/-http-exception/-init-/","text":"coil-base / coil.network / HttpException / init init HttpException(response: Response ) Exception for an unexpected, non-2xx HTTP response. See Also HttpFetcher","title":" init "},{"location":"api/coil-base/coil.network/-http-exception/-init-/#init","text":"HttpException(response: Response ) Exception for an unexpected, non-2xx HTTP response. See Also HttpFetcher","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.network/-http-exception/response/","text":"coil-base / coil.network / HttpException / response response val response: Response","title":"Response"},{"location":"api/coil-base/coil.network/-http-exception/response/#response","text":"val response: Response","title":"response"},{"location":"api/coil-base/coil.request/","text":"coil-base / coil.request Package coil.request Types Name Summary CachePolicy Represents the read/write policy for a cache source. enum class CachePolicy DefaultRequestOptions A set of default options that are used to fill in unset ImageRequest values. class DefaultRequestOptions DefinedRequestOptions Tracks which values have been set (instead of computed automatically using a default) when building an ImageRequest . class DefinedRequestOptions Disposable Represents the work of an executed ImageRequest . interface Disposable ErrorResult Indicates that an error occurred while executing the request. data class ErrorResult : ImageResult ImageRequest An immutable value object that represents a request for an image. class ImageRequest ImageResult Represents the result of an image request. sealed class ImageResult NullRequestData The value for ImageRequest.data if the request's data was not set or was set to null. object NullRequestData Parameters A map of generic values that can be used to pass custom data to Fetcher s and Decoder s. class Parameters : Iterable Pair String , Entry SuccessResult Indicates that the request completed successfully. data class SuccessResult : ImageResult Exceptions Name Summary NullRequestDataException Exception thrown when an ImageRequest with empty/null data is executed by an ImageLoader . class NullRequestDataException : RuntimeException Functions Name Summary count Returns the number of parameters in this object. fun Parameters .count(): Int get Returns the value associated with key or null if key has no mapping. operator fun Parameters .get(key: String ): Any ? isNotEmpty Return true when the set contains elements. fun Parameters .isNotEmpty(): Boolean","title":"Home"},{"location":"api/coil-base/coil.request/#package-coilrequest","text":"","title":"Package coil.request"},{"location":"api/coil-base/coil.request/#types","text":"Name Summary CachePolicy Represents the read/write policy for a cache source. enum class CachePolicy DefaultRequestOptions A set of default options that are used to fill in unset ImageRequest values. class DefaultRequestOptions DefinedRequestOptions Tracks which values have been set (instead of computed automatically using a default) when building an ImageRequest . class DefinedRequestOptions Disposable Represents the work of an executed ImageRequest . interface Disposable ErrorResult Indicates that an error occurred while executing the request. data class ErrorResult : ImageResult ImageRequest An immutable value object that represents a request for an image. class ImageRequest ImageResult Represents the result of an image request. sealed class ImageResult NullRequestData The value for ImageRequest.data if the request's data was not set or was set to null. object NullRequestData Parameters A map of generic values that can be used to pass custom data to Fetcher s and Decoder s. class Parameters : Iterable Pair String , Entry SuccessResult Indicates that the request completed successfully. data class SuccessResult : ImageResult","title":"Types"},{"location":"api/coil-base/coil.request/#exceptions","text":"Name Summary NullRequestDataException Exception thrown when an ImageRequest with empty/null data is executed by an ImageLoader . class NullRequestDataException : RuntimeException","title":"Exceptions"},{"location":"api/coil-base/coil.request/#functions","text":"Name Summary count Returns the number of parameters in this object. fun Parameters .count(): Int get Returns the value associated with key or null if key has no mapping. operator fun Parameters .get(key: String ): Any ? isNotEmpty Return true when the set contains elements. fun Parameters .isNotEmpty(): Boolean","title":"Functions"},{"location":"api/coil-base/coil.request/count/","text":"coil-base / coil.request / count count fun Parameters .count(): Int Returns the number of parameters in this object.","title":"Count"},{"location":"api/coil-base/coil.request/count/#count","text":"fun Parameters .count(): Int Returns the number of parameters in this object.","title":"count"},{"location":"api/coil-base/coil.request/get/","text":"coil-base / coil.request / get get operator fun Parameters .get(key: String ): Any ? Returns the value associated with key or null if key has no mapping.","title":"Get"},{"location":"api/coil-base/coil.request/get/#get","text":"operator fun Parameters .get(key: String ): Any ? Returns the value associated with key or null if key has no mapping.","title":"get"},{"location":"api/coil-base/coil.request/is-not-empty/","text":"coil-base / coil.request / isNotEmpty isNotEmpty fun Parameters .isNotEmpty(): Boolean Return true when the set contains elements.","title":"Is not empty"},{"location":"api/coil-base/coil.request/is-not-empty/#isnotempty","text":"fun Parameters .isNotEmpty(): Boolean Return true when the set contains elements.","title":"isNotEmpty"},{"location":"api/coil-base/coil.request/-cache-policy/","text":"coil-base / coil.request / CachePolicy CachePolicy enum class CachePolicy Represents the read/write policy for a cache source. See Also ImageRequest.memoryCachePolicy ImageRequest.diskCachePolicy ImageRequest.networkCachePolicy Enum Values Name Summary ENABLED READ_ONLY WRITE_ONLY DISABLED Properties Name Summary readEnabled val readEnabled: Boolean writeEnabled val writeEnabled: Boolean","title":"Home"},{"location":"api/coil-base/coil.request/-cache-policy/#cachepolicy","text":"enum class CachePolicy Represents the read/write policy for a cache source. See Also ImageRequest.memoryCachePolicy ImageRequest.diskCachePolicy ImageRequest.networkCachePolicy","title":"CachePolicy"},{"location":"api/coil-base/coil.request/-cache-policy/#enum-values","text":"Name Summary ENABLED READ_ONLY WRITE_ONLY DISABLED","title":"Enum Values"},{"location":"api/coil-base/coil.request/-cache-policy/#properties","text":"Name Summary readEnabled val readEnabled: Boolean writeEnabled val writeEnabled: Boolean","title":"Properties"},{"location":"api/coil-base/coil.request/-cache-policy/-d-i-s-a-b-l-e-d/","text":"coil-base / coil.request / CachePolicy / DISABLED DISABLED DISABLED","title":" d i s a b l e d"},{"location":"api/coil-base/coil.request/-cache-policy/-d-i-s-a-b-l-e-d/#disabled","text":"DISABLED","title":"DISABLED"},{"location":"api/coil-base/coil.request/-cache-policy/-e-n-a-b-l-e-d/","text":"coil-base / coil.request / CachePolicy / ENABLED ENABLED ENABLED","title":" e n a b l e d"},{"location":"api/coil-base/coil.request/-cache-policy/-e-n-a-b-l-e-d/#enabled","text":"ENABLED","title":"ENABLED"},{"location":"api/coil-base/coil.request/-cache-policy/-r-e-a-d_-o-n-l-y/","text":"coil-base / coil.request / CachePolicy / READ_ONLY READ_ONLY READ_ONLY","title":" r e a d  o n l y"},{"location":"api/coil-base/coil.request/-cache-policy/-r-e-a-d_-o-n-l-y/#read_only","text":"READ_ONLY","title":"READ_ONLY"},{"location":"api/coil-base/coil.request/-cache-policy/-w-r-i-t-e_-o-n-l-y/","text":"coil-base / coil.request / CachePolicy / WRITE_ONLY WRITE_ONLY WRITE_ONLY","title":" w r i t e  o n l y"},{"location":"api/coil-base/coil.request/-cache-policy/-w-r-i-t-e_-o-n-l-y/#write_only","text":"WRITE_ONLY","title":"WRITE_ONLY"},{"location":"api/coil-base/coil.request/-cache-policy/read-enabled/","text":"coil-base / coil.request / CachePolicy / readEnabled readEnabled val readEnabled: Boolean","title":"Read enabled"},{"location":"api/coil-base/coil.request/-cache-policy/read-enabled/#readenabled","text":"val readEnabled: Boolean","title":"readEnabled"},{"location":"api/coil-base/coil.request/-cache-policy/write-enabled/","text":"coil-base / coil.request / CachePolicy / writeEnabled writeEnabled val writeEnabled: Boolean","title":"Write enabled"},{"location":"api/coil-base/coil.request/-cache-policy/write-enabled/#writeenabled","text":"val writeEnabled: Boolean","title":"writeEnabled"},{"location":"api/coil-base/coil.request/-default-request-options/","text":"coil-base / coil.request / DefaultRequestOptions DefaultRequestOptions class DefaultRequestOptions A set of default options that are used to fill in unset ImageRequest values. See Also ImageLoader.defaults ImageRequest.defaults Constructors Name Summary init A set of default options that are used to fill in unset ImageRequest values. DefaultRequestOptions(dispatcher: CoroutineDispatcher = Dispatchers.IO, transition: Transition = Transition.NONE, precision: Precision = Precision.AUTOMATIC, bitmapConfig: Config = Utils.DEFAULT_BITMAP_CONFIG, allowHardware: Boolean = true, allowRgb565: Boolean = false, placeholder: Drawable ? = null, error: Drawable ? = null, fallback: Drawable ? = null, memoryCachePolicy: CachePolicy = CachePolicy.ENABLED, diskCachePolicy: CachePolicy = CachePolicy.ENABLED, networkCachePolicy: CachePolicy = CachePolicy.ENABLED) Properties Name Summary allowHardware val allowHardware: Boolean allowRgb565 val allowRgb565: Boolean bitmapConfig val bitmapConfig: Config diskCachePolicy val diskCachePolicy: CachePolicy dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? fallback val fallback: Drawable ? memoryCachePolicy val memoryCachePolicy: CachePolicy networkCachePolicy val networkCachePolicy: CachePolicy placeholder val placeholder: Drawable ? precision val precision: Precision transition val transition: Transition Functions Name Summary copy fun copy(dispatcher: CoroutineDispatcher = this.dispatcher, transition: Transition = this.transition, precision: Precision = this.precision, bitmapConfig: Config = this.bitmapConfig, allowHardware: Boolean = this.allowHardware, allowRgb565: Boolean = this.allowRgb565, placeholder: Drawable ? = this.placeholder, error: Drawable ? = this.error, fallback: Drawable ? = this.fallback, memoryCachePolicy: CachePolicy = this.memoryCachePolicy, diskCachePolicy: CachePolicy = this.diskCachePolicy, networkCachePolicy: CachePolicy = this.networkCachePolicy): DefaultRequestOptions equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String Companion Object Properties Name Summary INSTANCE val INSTANCE: DefaultRequestOptions","title":"Home"},{"location":"api/coil-base/coil.request/-default-request-options/#defaultrequestoptions","text":"class DefaultRequestOptions A set of default options that are used to fill in unset ImageRequest values. See Also ImageLoader.defaults ImageRequest.defaults","title":"DefaultRequestOptions"},{"location":"api/coil-base/coil.request/-default-request-options/#constructors","text":"Name Summary init A set of default options that are used to fill in unset ImageRequest values. DefaultRequestOptions(dispatcher: CoroutineDispatcher = Dispatchers.IO, transition: Transition = Transition.NONE, precision: Precision = Precision.AUTOMATIC, bitmapConfig: Config = Utils.DEFAULT_BITMAP_CONFIG, allowHardware: Boolean = true, allowRgb565: Boolean = false, placeholder: Drawable ? = null, error: Drawable ? = null, fallback: Drawable ? = null, memoryCachePolicy: CachePolicy = CachePolicy.ENABLED, diskCachePolicy: CachePolicy = CachePolicy.ENABLED, networkCachePolicy: CachePolicy = CachePolicy.ENABLED)","title":"Constructors"},{"location":"api/coil-base/coil.request/-default-request-options/#properties","text":"Name Summary allowHardware val allowHardware: Boolean allowRgb565 val allowRgb565: Boolean bitmapConfig val bitmapConfig: Config diskCachePolicy val diskCachePolicy: CachePolicy dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? fallback val fallback: Drawable ? memoryCachePolicy val memoryCachePolicy: CachePolicy networkCachePolicy val networkCachePolicy: CachePolicy placeholder val placeholder: Drawable ? precision val precision: Precision transition val transition: Transition","title":"Properties"},{"location":"api/coil-base/coil.request/-default-request-options/#functions","text":"Name Summary copy fun copy(dispatcher: CoroutineDispatcher = this.dispatcher, transition: Transition = this.transition, precision: Precision = this.precision, bitmapConfig: Config = this.bitmapConfig, allowHardware: Boolean = this.allowHardware, allowRgb565: Boolean = this.allowRgb565, placeholder: Drawable ? = this.placeholder, error: Drawable ? = this.error, fallback: Drawable ? = this.fallback, memoryCachePolicy: CachePolicy = this.memoryCachePolicy, diskCachePolicy: CachePolicy = this.diskCachePolicy, networkCachePolicy: CachePolicy = this.networkCachePolicy): DefaultRequestOptions equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String","title":"Functions"},{"location":"api/coil-base/coil.request/-default-request-options/#companion-object-properties","text":"Name Summary INSTANCE val INSTANCE: DefaultRequestOptions","title":"Companion Object Properties"},{"location":"api/coil-base/coil.request/-default-request-options/-i-n-s-t-a-n-c-e/","text":"coil-base / coil.request / DefaultRequestOptions / INSTANCE INSTANCE val INSTANCE: DefaultRequestOptions","title":" i n s t a n c e"},{"location":"api/coil-base/coil.request/-default-request-options/-i-n-s-t-a-n-c-e/#instance","text":"val INSTANCE: DefaultRequestOptions","title":"INSTANCE"},{"location":"api/coil-base/coil.request/-default-request-options/-init-/","text":"coil-base / coil.request / DefaultRequestOptions / init init DefaultRequestOptions(dispatcher: CoroutineDispatcher = Dispatchers.IO, transition: Transition = Transition.NONE, precision: Precision = Precision.AUTOMATIC, bitmapConfig: Config = Utils.DEFAULT_BITMAP_CONFIG, allowHardware: Boolean = true, allowRgb565: Boolean = false, placeholder: Drawable ? = null, error: Drawable ? = null, fallback: Drawable ? = null, memoryCachePolicy: CachePolicy = CachePolicy.ENABLED, diskCachePolicy: CachePolicy = CachePolicy.ENABLED, networkCachePolicy: CachePolicy = CachePolicy.ENABLED) A set of default options that are used to fill in unset ImageRequest values. See Also ImageLoader.defaults ImageRequest.defaults","title":" init "},{"location":"api/coil-base/coil.request/-default-request-options/-init-/#init","text":"DefaultRequestOptions(dispatcher: CoroutineDispatcher = Dispatchers.IO, transition: Transition = Transition.NONE, precision: Precision = Precision.AUTOMATIC, bitmapConfig: Config = Utils.DEFAULT_BITMAP_CONFIG, allowHardware: Boolean = true, allowRgb565: Boolean = false, placeholder: Drawable ? = null, error: Drawable ? = null, fallback: Drawable ? = null, memoryCachePolicy: CachePolicy = CachePolicy.ENABLED, diskCachePolicy: CachePolicy = CachePolicy.ENABLED, networkCachePolicy: CachePolicy = CachePolicy.ENABLED) A set of default options that are used to fill in unset ImageRequest values. See Also ImageLoader.defaults ImageRequest.defaults","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-default-request-options/allow-hardware/","text":"coil-base / coil.request / DefaultRequestOptions / allowHardware allowHardware val allowHardware: Boolean","title":"Allow hardware"},{"location":"api/coil-base/coil.request/-default-request-options/allow-hardware/#allowhardware","text":"val allowHardware: Boolean","title":"allowHardware"},{"location":"api/coil-base/coil.request/-default-request-options/allow-rgb565/","text":"coil-base / coil.request / DefaultRequestOptions / allowRgb565 allowRgb565 val allowRgb565: Boolean","title":"Allow rgb565"},{"location":"api/coil-base/coil.request/-default-request-options/allow-rgb565/#allowrgb565","text":"val allowRgb565: Boolean","title":"allowRgb565"},{"location":"api/coil-base/coil.request/-default-request-options/bitmap-config/","text":"coil-base / coil.request / DefaultRequestOptions / bitmapConfig bitmapConfig val bitmapConfig: Config","title":"Bitmap config"},{"location":"api/coil-base/coil.request/-default-request-options/bitmap-config/#bitmapconfig","text":"val bitmapConfig: Config","title":"bitmapConfig"},{"location":"api/coil-base/coil.request/-default-request-options/copy/","text":"coil-base / coil.request / DefaultRequestOptions / copy copy fun copy(dispatcher: CoroutineDispatcher = this.dispatcher, transition: Transition = this.transition, precision: Precision = this.precision, bitmapConfig: Config = this.bitmapConfig, allowHardware: Boolean = this.allowHardware, allowRgb565: Boolean = this.allowRgb565, placeholder: Drawable ? = this.placeholder, error: Drawable ? = this.error, fallback: Drawable ? = this.fallback, memoryCachePolicy: CachePolicy = this.memoryCachePolicy, diskCachePolicy: CachePolicy = this.diskCachePolicy, networkCachePolicy: CachePolicy = this.networkCachePolicy): DefaultRequestOptions","title":"Copy"},{"location":"api/coil-base/coil.request/-default-request-options/copy/#copy","text":"fun copy(dispatcher: CoroutineDispatcher = this.dispatcher, transition: Transition = this.transition, precision: Precision = this.precision, bitmapConfig: Config = this.bitmapConfig, allowHardware: Boolean = this.allowHardware, allowRgb565: Boolean = this.allowRgb565, placeholder: Drawable ? = this.placeholder, error: Drawable ? = this.error, fallback: Drawable ? = this.fallback, memoryCachePolicy: CachePolicy = this.memoryCachePolicy, diskCachePolicy: CachePolicy = this.diskCachePolicy, networkCachePolicy: CachePolicy = this.networkCachePolicy): DefaultRequestOptions","title":"copy"},{"location":"api/coil-base/coil.request/-default-request-options/disk-cache-policy/","text":"coil-base / coil.request / DefaultRequestOptions / diskCachePolicy diskCachePolicy val diskCachePolicy: CachePolicy","title":"Disk cache policy"},{"location":"api/coil-base/coil.request/-default-request-options/disk-cache-policy/#diskcachepolicy","text":"val diskCachePolicy: CachePolicy","title":"diskCachePolicy"},{"location":"api/coil-base/coil.request/-default-request-options/dispatcher/","text":"coil-base / coil.request / DefaultRequestOptions / dispatcher dispatcher val dispatcher: CoroutineDispatcher","title":"Dispatcher"},{"location":"api/coil-base/coil.request/-default-request-options/dispatcher/#dispatcher","text":"val dispatcher: CoroutineDispatcher","title":"dispatcher"},{"location":"api/coil-base/coil.request/-default-request-options/equals/","text":"coil-base / coil.request / DefaultRequestOptions / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/coil-base/coil.request/-default-request-options/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/coil-base/coil.request/-default-request-options/error/","text":"coil-base / coil.request / DefaultRequestOptions / error error val error: Drawable ?","title":"Error"},{"location":"api/coil-base/coil.request/-default-request-options/error/#error","text":"val error: Drawable ?","title":"error"},{"location":"api/coil-base/coil.request/-default-request-options/fallback/","text":"coil-base / coil.request / DefaultRequestOptions / fallback fallback val fallback: Drawable ?","title":"Fallback"},{"location":"api/coil-base/coil.request/-default-request-options/fallback/#fallback","text":"val fallback: Drawable ?","title":"fallback"},{"location":"api/coil-base/coil.request/-default-request-options/hash-code/","text":"coil-base / coil.request / DefaultRequestOptions / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"api/coil-base/coil.request/-default-request-options/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"api/coil-base/coil.request/-default-request-options/memory-cache-policy/","text":"coil-base / coil.request / DefaultRequestOptions / memoryCachePolicy memoryCachePolicy val memoryCachePolicy: CachePolicy","title":"Memory cache policy"},{"location":"api/coil-base/coil.request/-default-request-options/memory-cache-policy/#memorycachepolicy","text":"val memoryCachePolicy: CachePolicy","title":"memoryCachePolicy"},{"location":"api/coil-base/coil.request/-default-request-options/network-cache-policy/","text":"coil-base / coil.request / DefaultRequestOptions / networkCachePolicy networkCachePolicy val networkCachePolicy: CachePolicy","title":"Network cache policy"},{"location":"api/coil-base/coil.request/-default-request-options/network-cache-policy/#networkcachepolicy","text":"val networkCachePolicy: CachePolicy","title":"networkCachePolicy"},{"location":"api/coil-base/coil.request/-default-request-options/placeholder/","text":"coil-base / coil.request / DefaultRequestOptions / placeholder placeholder val placeholder: Drawable ?","title":"Placeholder"},{"location":"api/coil-base/coil.request/-default-request-options/placeholder/#placeholder","text":"val placeholder: Drawable ?","title":"placeholder"},{"location":"api/coil-base/coil.request/-default-request-options/precision/","text":"coil-base / coil.request / DefaultRequestOptions / precision precision val precision: Precision","title":"Precision"},{"location":"api/coil-base/coil.request/-default-request-options/precision/#precision","text":"val precision: Precision","title":"precision"},{"location":"api/coil-base/coil.request/-default-request-options/to-string/","text":"coil-base / coil.request / DefaultRequestOptions / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.request/-default-request-options/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.request/-default-request-options/transition/","text":"coil-base / coil.request / DefaultRequestOptions / transition transition val transition: Transition","title":"Transition"},{"location":"api/coil-base/coil.request/-default-request-options/transition/#transition","text":"val transition: Transition","title":"transition"},{"location":"api/coil-base/coil.request/-defined-request-options/","text":"coil-base / coil.request / DefinedRequestOptions DefinedRequestOptions class DefinedRequestOptions Tracks which values have been set (instead of computed automatically using a default) when building an ImageRequest . See Also ImageRequest.defined Constructors Name Summary init Tracks which values have been set (instead of computed automatically using a default) when building an ImageRequest . DefinedRequestOptions(lifecycle: Lifecycle ?, sizeResolver: SizeResolver ?, scale: Scale ?, dispatcher: CoroutineDispatcher ?, transition: Transition ?, precision: Precision ?, bitmapConfig: Config ?, allowHardware: Boolean ?, allowRgb565: Boolean ?, memoryCachePolicy: CachePolicy ?, diskCachePolicy: CachePolicy ?, networkCachePolicy: CachePolicy ?) Properties Name Summary allowHardware val allowHardware: Boolean ? allowRgb565 val allowRgb565: Boolean ? bitmapConfig val bitmapConfig: Config ? diskCachePolicy val diskCachePolicy: CachePolicy ? dispatcher val dispatcher: CoroutineDispatcher ? lifecycle val lifecycle: Lifecycle ? memoryCachePolicy val memoryCachePolicy: CachePolicy ? networkCachePolicy val networkCachePolicy: CachePolicy ? precision val precision: Precision ? scale val scale: Scale ? sizeResolver val sizeResolver: SizeResolver ? transition val transition: Transition ? Functions Name Summary copy fun copy(lifecycle: Lifecycle ? = this.lifecycle, sizeResolver: SizeResolver ? = this.sizeResolver, scale: Scale ? = this.scale, dispatcher: CoroutineDispatcher ? = this.dispatcher, transition: Transition ? = this.transition, precision: Precision ? = this.precision, bitmapConfig: Config ? = this.bitmapConfig, allowHardware: Boolean ? = this.allowHardware, allowRgb565: Boolean ? = this.allowRgb565, memoryCachePolicy: CachePolicy ? = this.memoryCachePolicy, diskCachePolicy: CachePolicy ? = this.diskCachePolicy, networkCachePolicy: CachePolicy ? = this.networkCachePolicy): DefinedRequestOptions equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String","title":"Home"},{"location":"api/coil-base/coil.request/-defined-request-options/#definedrequestoptions","text":"class DefinedRequestOptions Tracks which values have been set (instead of computed automatically using a default) when building an ImageRequest . See Also ImageRequest.defined","title":"DefinedRequestOptions"},{"location":"api/coil-base/coil.request/-defined-request-options/#constructors","text":"Name Summary init Tracks which values have been set (instead of computed automatically using a default) when building an ImageRequest . DefinedRequestOptions(lifecycle: Lifecycle ?, sizeResolver: SizeResolver ?, scale: Scale ?, dispatcher: CoroutineDispatcher ?, transition: Transition ?, precision: Precision ?, bitmapConfig: Config ?, allowHardware: Boolean ?, allowRgb565: Boolean ?, memoryCachePolicy: CachePolicy ?, diskCachePolicy: CachePolicy ?, networkCachePolicy: CachePolicy ?)","title":"Constructors"},{"location":"api/coil-base/coil.request/-defined-request-options/#properties","text":"Name Summary allowHardware val allowHardware: Boolean ? allowRgb565 val allowRgb565: Boolean ? bitmapConfig val bitmapConfig: Config ? diskCachePolicy val diskCachePolicy: CachePolicy ? dispatcher val dispatcher: CoroutineDispatcher ? lifecycle val lifecycle: Lifecycle ? memoryCachePolicy val memoryCachePolicy: CachePolicy ? networkCachePolicy val networkCachePolicy: CachePolicy ? precision val precision: Precision ? scale val scale: Scale ? sizeResolver val sizeResolver: SizeResolver ? transition val transition: Transition ?","title":"Properties"},{"location":"api/coil-base/coil.request/-defined-request-options/#functions","text":"Name Summary copy fun copy(lifecycle: Lifecycle ? = this.lifecycle, sizeResolver: SizeResolver ? = this.sizeResolver, scale: Scale ? = this.scale, dispatcher: CoroutineDispatcher ? = this.dispatcher, transition: Transition ? = this.transition, precision: Precision ? = this.precision, bitmapConfig: Config ? = this.bitmapConfig, allowHardware: Boolean ? = this.allowHardware, allowRgb565: Boolean ? = this.allowRgb565, memoryCachePolicy: CachePolicy ? = this.memoryCachePolicy, diskCachePolicy: CachePolicy ? = this.diskCachePolicy, networkCachePolicy: CachePolicy ? = this.networkCachePolicy): DefinedRequestOptions equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String","title":"Functions"},{"location":"api/coil-base/coil.request/-defined-request-options/-init-/","text":"coil-base / coil.request / DefinedRequestOptions / init init DefinedRequestOptions(lifecycle: Lifecycle ?, sizeResolver: SizeResolver ?, scale: Scale ?, dispatcher: CoroutineDispatcher ?, transition: Transition ?, precision: Precision ?, bitmapConfig: Config ?, allowHardware: Boolean ?, allowRgb565: Boolean ?, memoryCachePolicy: CachePolicy ?, diskCachePolicy: CachePolicy ?, networkCachePolicy: CachePolicy ?) Tracks which values have been set (instead of computed automatically using a default) when building an ImageRequest . See Also ImageRequest.defined","title":" init "},{"location":"api/coil-base/coil.request/-defined-request-options/-init-/#init","text":"DefinedRequestOptions(lifecycle: Lifecycle ?, sizeResolver: SizeResolver ?, scale: Scale ?, dispatcher: CoroutineDispatcher ?, transition: Transition ?, precision: Precision ?, bitmapConfig: Config ?, allowHardware: Boolean ?, allowRgb565: Boolean ?, memoryCachePolicy: CachePolicy ?, diskCachePolicy: CachePolicy ?, networkCachePolicy: CachePolicy ?) Tracks which values have been set (instead of computed automatically using a default) when building an ImageRequest . See Also ImageRequest.defined","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-defined-request-options/allow-hardware/","text":"coil-base / coil.request / DefinedRequestOptions / allowHardware allowHardware val allowHardware: Boolean ?","title":"Allow hardware"},{"location":"api/coil-base/coil.request/-defined-request-options/allow-hardware/#allowhardware","text":"val allowHardware: Boolean ?","title":"allowHardware"},{"location":"api/coil-base/coil.request/-defined-request-options/allow-rgb565/","text":"coil-base / coil.request / DefinedRequestOptions / allowRgb565 allowRgb565 val allowRgb565: Boolean ?","title":"Allow rgb565"},{"location":"api/coil-base/coil.request/-defined-request-options/allow-rgb565/#allowrgb565","text":"val allowRgb565: Boolean ?","title":"allowRgb565"},{"location":"api/coil-base/coil.request/-defined-request-options/bitmap-config/","text":"coil-base / coil.request / DefinedRequestOptions / bitmapConfig bitmapConfig val bitmapConfig: Config ?","title":"Bitmap config"},{"location":"api/coil-base/coil.request/-defined-request-options/bitmap-config/#bitmapconfig","text":"val bitmapConfig: Config ?","title":"bitmapConfig"},{"location":"api/coil-base/coil.request/-defined-request-options/copy/","text":"coil-base / coil.request / DefinedRequestOptions / copy copy fun copy(lifecycle: Lifecycle ? = this.lifecycle, sizeResolver: SizeResolver ? = this.sizeResolver, scale: Scale ? = this.scale, dispatcher: CoroutineDispatcher ? = this.dispatcher, transition: Transition ? = this.transition, precision: Precision ? = this.precision, bitmapConfig: Config ? = this.bitmapConfig, allowHardware: Boolean ? = this.allowHardware, allowRgb565: Boolean ? = this.allowRgb565, memoryCachePolicy: CachePolicy ? = this.memoryCachePolicy, diskCachePolicy: CachePolicy ? = this.diskCachePolicy, networkCachePolicy: CachePolicy ? = this.networkCachePolicy): DefinedRequestOptions","title":"Copy"},{"location":"api/coil-base/coil.request/-defined-request-options/copy/#copy","text":"fun copy(lifecycle: Lifecycle ? = this.lifecycle, sizeResolver: SizeResolver ? = this.sizeResolver, scale: Scale ? = this.scale, dispatcher: CoroutineDispatcher ? = this.dispatcher, transition: Transition ? = this.transition, precision: Precision ? = this.precision, bitmapConfig: Config ? = this.bitmapConfig, allowHardware: Boolean ? = this.allowHardware, allowRgb565: Boolean ? = this.allowRgb565, memoryCachePolicy: CachePolicy ? = this.memoryCachePolicy, diskCachePolicy: CachePolicy ? = this.diskCachePolicy, networkCachePolicy: CachePolicy ? = this.networkCachePolicy): DefinedRequestOptions","title":"copy"},{"location":"api/coil-base/coil.request/-defined-request-options/disk-cache-policy/","text":"coil-base / coil.request / DefinedRequestOptions / diskCachePolicy diskCachePolicy val diskCachePolicy: CachePolicy ?","title":"Disk cache policy"},{"location":"api/coil-base/coil.request/-defined-request-options/disk-cache-policy/#diskcachepolicy","text":"val diskCachePolicy: CachePolicy ?","title":"diskCachePolicy"},{"location":"api/coil-base/coil.request/-defined-request-options/dispatcher/","text":"coil-base / coil.request / DefinedRequestOptions / dispatcher dispatcher val dispatcher: CoroutineDispatcher ?","title":"Dispatcher"},{"location":"api/coil-base/coil.request/-defined-request-options/dispatcher/#dispatcher","text":"val dispatcher: CoroutineDispatcher ?","title":"dispatcher"},{"location":"api/coil-base/coil.request/-defined-request-options/equals/","text":"coil-base / coil.request / DefinedRequestOptions / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/coil-base/coil.request/-defined-request-options/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/coil-base/coil.request/-defined-request-options/hash-code/","text":"coil-base / coil.request / DefinedRequestOptions / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"api/coil-base/coil.request/-defined-request-options/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"api/coil-base/coil.request/-defined-request-options/lifecycle/","text":"coil-base / coil.request / DefinedRequestOptions / lifecycle lifecycle val lifecycle: Lifecycle ?","title":"Lifecycle"},{"location":"api/coil-base/coil.request/-defined-request-options/lifecycle/#lifecycle","text":"val lifecycle: Lifecycle ?","title":"lifecycle"},{"location":"api/coil-base/coil.request/-defined-request-options/memory-cache-policy/","text":"coil-base / coil.request / DefinedRequestOptions / memoryCachePolicy memoryCachePolicy val memoryCachePolicy: CachePolicy ?","title":"Memory cache policy"},{"location":"api/coil-base/coil.request/-defined-request-options/memory-cache-policy/#memorycachepolicy","text":"val memoryCachePolicy: CachePolicy ?","title":"memoryCachePolicy"},{"location":"api/coil-base/coil.request/-defined-request-options/network-cache-policy/","text":"coil-base / coil.request / DefinedRequestOptions / networkCachePolicy networkCachePolicy val networkCachePolicy: CachePolicy ?","title":"Network cache policy"},{"location":"api/coil-base/coil.request/-defined-request-options/network-cache-policy/#networkcachepolicy","text":"val networkCachePolicy: CachePolicy ?","title":"networkCachePolicy"},{"location":"api/coil-base/coil.request/-defined-request-options/precision/","text":"coil-base / coil.request / DefinedRequestOptions / precision precision val precision: Precision ?","title":"Precision"},{"location":"api/coil-base/coil.request/-defined-request-options/precision/#precision","text":"val precision: Precision ?","title":"precision"},{"location":"api/coil-base/coil.request/-defined-request-options/scale/","text":"coil-base / coil.request / DefinedRequestOptions / scale scale val scale: Scale ?","title":"Scale"},{"location":"api/coil-base/coil.request/-defined-request-options/scale/#scale","text":"val scale: Scale ?","title":"scale"},{"location":"api/coil-base/coil.request/-defined-request-options/size-resolver/","text":"coil-base / coil.request / DefinedRequestOptions / sizeResolver sizeResolver val sizeResolver: SizeResolver ?","title":"Size resolver"},{"location":"api/coil-base/coil.request/-defined-request-options/size-resolver/#sizeresolver","text":"val sizeResolver: SizeResolver ?","title":"sizeResolver"},{"location":"api/coil-base/coil.request/-defined-request-options/to-string/","text":"coil-base / coil.request / DefinedRequestOptions / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.request/-defined-request-options/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.request/-defined-request-options/transition/","text":"coil-base / coil.request / DefinedRequestOptions / transition transition val transition: Transition ?","title":"Transition"},{"location":"api/coil-base/coil.request/-defined-request-options/transition/#transition","text":"val transition: Transition ?","title":"transition"},{"location":"api/coil-base/coil.request/-disposable/","text":"coil-base / coil.request / Disposable Disposable interface Disposable Represents the work of an executed ImageRequest . Properties Name Summary isDisposed Returns true if the request is complete or cancelling. abstract val isDisposed: Boolean Functions Name Summary await Suspends until any in progress work completes. abstract suspend fun await(): Unit dispose Cancels any in progress work and frees any resources associated with this request. This method is idempotent. abstract fun dispose(): Unit","title":"Home"},{"location":"api/coil-base/coil.request/-disposable/#disposable","text":"interface Disposable Represents the work of an executed ImageRequest .","title":"Disposable"},{"location":"api/coil-base/coil.request/-disposable/#properties","text":"Name Summary isDisposed Returns true if the request is complete or cancelling. abstract val isDisposed: Boolean","title":"Properties"},{"location":"api/coil-base/coil.request/-disposable/#functions","text":"Name Summary await Suspends until any in progress work completes. abstract suspend fun await(): Unit dispose Cancels any in progress work and frees any resources associated with this request. This method is idempotent. abstract fun dispose(): Unit","title":"Functions"},{"location":"api/coil-base/coil.request/-disposable/await/","text":"coil-base / coil.request / Disposable / await await @ExperimentalCoilApi abstract suspend fun await(): Unit Suspends until any in progress work completes.","title":"Await"},{"location":"api/coil-base/coil.request/-disposable/await/#await","text":"@ExperimentalCoilApi abstract suspend fun await(): Unit Suspends until any in progress work completes.","title":"await"},{"location":"api/coil-base/coil.request/-disposable/dispose/","text":"coil-base / coil.request / Disposable / dispose dispose abstract fun dispose(): Unit Cancels any in progress work and frees any resources associated with this request. This method is idempotent.","title":"Dispose"},{"location":"api/coil-base/coil.request/-disposable/dispose/#dispose","text":"abstract fun dispose(): Unit Cancels any in progress work and frees any resources associated with this request. This method is idempotent.","title":"dispose"},{"location":"api/coil-base/coil.request/-disposable/is-disposed/","text":"coil-base / coil.request / Disposable / isDisposed isDisposed abstract val isDisposed: Boolean Returns true if the request is complete or cancelling.","title":"Is disposed"},{"location":"api/coil-base/coil.request/-disposable/is-disposed/#isdisposed","text":"abstract val isDisposed: Boolean Returns true if the request is complete or cancelling.","title":"isDisposed"},{"location":"api/coil-base/coil.request/-error-result/","text":"coil-base / coil.request / ErrorResult ErrorResult data class ErrorResult : ImageResult Indicates that an error occurred while executing the request. Parameters drawable - The error drawable. request - The request that was executed to create this result. throwable - The error that failed the request. Constructors Name Summary init Indicates that an error occurred while executing the request. ErrorResult(drawable: Drawable ?, request: ImageRequest , throwable: Throwable ) Properties Name Summary drawable The error drawable. val drawable: Drawable ? request The request that was executed to create this result. val request: ImageRequest throwable The error that failed the request. val throwable: Throwable","title":"Home"},{"location":"api/coil-base/coil.request/-error-result/#errorresult","text":"data class ErrorResult : ImageResult Indicates that an error occurred while executing the request.","title":"ErrorResult"},{"location":"api/coil-base/coil.request/-error-result/#parameters","text":"drawable - The error drawable. request - The request that was executed to create this result. throwable - The error that failed the request.","title":"Parameters"},{"location":"api/coil-base/coil.request/-error-result/#constructors","text":"Name Summary init Indicates that an error occurred while executing the request. ErrorResult(drawable: Drawable ?, request: ImageRequest , throwable: Throwable )","title":"Constructors"},{"location":"api/coil-base/coil.request/-error-result/#properties","text":"Name Summary drawable The error drawable. val drawable: Drawable ? request The request that was executed to create this result. val request: ImageRequest throwable The error that failed the request. val throwable: Throwable","title":"Properties"},{"location":"api/coil-base/coil.request/-error-result/-init-/","text":"coil-base / coil.request / ErrorResult / init init ErrorResult(drawable: Drawable ?, request: ImageRequest , throwable: Throwable ) Indicates that an error occurred while executing the request. Parameters drawable - The error drawable. request - The request that was executed to create this result. throwable - The error that failed the request.","title":" init "},{"location":"api/coil-base/coil.request/-error-result/-init-/#init","text":"ErrorResult(drawable: Drawable ?, request: ImageRequest , throwable: Throwable ) Indicates that an error occurred while executing the request.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-error-result/-init-/#parameters","text":"drawable - The error drawable. request - The request that was executed to create this result. throwable - The error that failed the request.","title":"Parameters"},{"location":"api/coil-base/coil.request/-error-result/drawable/","text":"coil-base / coil.request / ErrorResult / drawable drawable val drawable: Drawable ? The error drawable.","title":"Drawable"},{"location":"api/coil-base/coil.request/-error-result/drawable/#drawable","text":"val drawable: Drawable ? The error drawable.","title":"drawable"},{"location":"api/coil-base/coil.request/-error-result/request/","text":"coil-base / coil.request / ErrorResult / request request val request: ImageRequest The request that was executed to create this result.","title":"Request"},{"location":"api/coil-base/coil.request/-error-result/request/#request","text":"val request: ImageRequest The request that was executed to create this result.","title":"request"},{"location":"api/coil-base/coil.request/-error-result/throwable/","text":"coil-base / coil.request / ErrorResult / throwable throwable val throwable: Throwable The error that failed the request.","title":"Throwable"},{"location":"api/coil-base/coil.request/-error-result/throwable/#throwable","text":"val throwable: Throwable The error that failed the request.","title":"throwable"},{"location":"api/coil-base/coil.request/-image-request/","text":"coil-base / coil.request / ImageRequest ImageRequest class ImageRequest An immutable value object that represents a request for an image. See Also ImageLoader.enqueue ImageLoader.execute Types Name Summary Builder class Builder Listener A set of callbacks for an ImageRequest . interface Listener Properties Name Summary allowHardware val allowHardware: Boolean allowRgb565 val allowRgb565: Boolean bitmapConfig val bitmapConfig: Config colorSpace val colorSpace: ColorSpace ? context val context: Context data val data: Any decoder val decoder: Decoder ? defaults The defaults used to fill unset values. val defaults: DefaultRequestOptions defined The raw values set on Builder . val defined: DefinedRequestOptions diskCachePolicy val diskCachePolicy: CachePolicy dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? fallback val fallback: Drawable ? fetcher val fetcher: Pair Fetcher * , Class * ? headers val headers: Headers lifecycle val lifecycle: Lifecycle listener val listener: Listener? memoryCacheKey val memoryCacheKey: Key? memoryCachePolicy val memoryCachePolicy: CachePolicy networkCachePolicy val networkCachePolicy: CachePolicy parameters val parameters: Parameters placeholder val placeholder: Drawable ? placeholderMemoryCacheKey val placeholderMemoryCacheKey: Key? precision val precision: Precision premultipliedAlpha val premultipliedAlpha: Boolean scale val scale: Scale sizeResolver val sizeResolver: SizeResolver target val target: Target ? transformations val transformations: List Transformation transition val transition: Transition Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(context: Context = this.context): Builder toString fun toString(): String","title":"Home"},{"location":"api/coil-base/coil.request/-image-request/#imagerequest","text":"class ImageRequest An immutable value object that represents a request for an image. See Also ImageLoader.enqueue ImageLoader.execute","title":"ImageRequest"},{"location":"api/coil-base/coil.request/-image-request/#types","text":"Name Summary Builder class Builder Listener A set of callbacks for an ImageRequest . interface Listener","title":"Types"},{"location":"api/coil-base/coil.request/-image-request/#properties","text":"Name Summary allowHardware val allowHardware: Boolean allowRgb565 val allowRgb565: Boolean bitmapConfig val bitmapConfig: Config colorSpace val colorSpace: ColorSpace ? context val context: Context data val data: Any decoder val decoder: Decoder ? defaults The defaults used to fill unset values. val defaults: DefaultRequestOptions defined The raw values set on Builder . val defined: DefinedRequestOptions diskCachePolicy val diskCachePolicy: CachePolicy dispatcher val dispatcher: CoroutineDispatcher error val error: Drawable ? fallback val fallback: Drawable ? fetcher val fetcher: Pair Fetcher * , Class * ? headers val headers: Headers lifecycle val lifecycle: Lifecycle listener val listener: Listener? memoryCacheKey val memoryCacheKey: Key? memoryCachePolicy val memoryCachePolicy: CachePolicy networkCachePolicy val networkCachePolicy: CachePolicy parameters val parameters: Parameters placeholder val placeholder: Drawable ? placeholderMemoryCacheKey val placeholderMemoryCacheKey: Key? precision val precision: Precision premultipliedAlpha val premultipliedAlpha: Boolean scale val scale: Scale sizeResolver val sizeResolver: SizeResolver target val target: Target ? transformations val transformations: List Transformation transition val transition: Transition","title":"Properties"},{"location":"api/coil-base/coil.request/-image-request/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int newBuilder fun newBuilder(context: Context = this.context): Builder toString fun toString(): String","title":"Functions"},{"location":"api/coil-base/coil.request/-image-request/allow-hardware/","text":"coil-base / coil.request / ImageRequest / allowHardware allowHardware val allowHardware: Boolean See Also Builder.allowHardware","title":"Allow hardware"},{"location":"api/coil-base/coil.request/-image-request/allow-hardware/#allowhardware","text":"val allowHardware: Boolean See Also Builder.allowHardware","title":"allowHardware"},{"location":"api/coil-base/coil.request/-image-request/allow-rgb565/","text":"coil-base / coil.request / ImageRequest / allowRgb565 allowRgb565 val allowRgb565: Boolean See Also Builder.allowRgb565","title":"Allow rgb565"},{"location":"api/coil-base/coil.request/-image-request/allow-rgb565/#allowrgb565","text":"val allowRgb565: Boolean See Also Builder.allowRgb565","title":"allowRgb565"},{"location":"api/coil-base/coil.request/-image-request/bitmap-config/","text":"coil-base / coil.request / ImageRequest / bitmapConfig bitmapConfig val bitmapConfig: Config See Also Builder.bitmapConfig","title":"Bitmap config"},{"location":"api/coil-base/coil.request/-image-request/bitmap-config/#bitmapconfig","text":"val bitmapConfig: Config See Also Builder.bitmapConfig","title":"bitmapConfig"},{"location":"api/coil-base/coil.request/-image-request/color-space/","text":"coil-base / coil.request / ImageRequest / colorSpace colorSpace val colorSpace: ColorSpace ? See Also Builder.colorSpace","title":"Color space"},{"location":"api/coil-base/coil.request/-image-request/color-space/#colorspace","text":"val colorSpace: ColorSpace ? See Also Builder.colorSpace","title":"colorSpace"},{"location":"api/coil-base/coil.request/-image-request/context/","text":"coil-base / coil.request / ImageRequest / context context val context: Context","title":"Context"},{"location":"api/coil-base/coil.request/-image-request/context/#context","text":"val context: Context","title":"context"},{"location":"api/coil-base/coil.request/-image-request/data/","text":"coil-base / coil.request / ImageRequest / data data val data: Any See Also Builder.data","title":"Data"},{"location":"api/coil-base/coil.request/-image-request/data/#data","text":"val data: Any See Also Builder.data","title":"data"},{"location":"api/coil-base/coil.request/-image-request/decoder/","text":"coil-base / coil.request / ImageRequest / decoder decoder val decoder: Decoder ? See Also Builder.decoder","title":"Decoder"},{"location":"api/coil-base/coil.request/-image-request/decoder/#decoder","text":"val decoder: Decoder ? See Also Builder.decoder","title":"decoder"},{"location":"api/coil-base/coil.request/-image-request/defaults/","text":"coil-base / coil.request / ImageRequest / defaults defaults val defaults: DefaultRequestOptions The defaults used to fill unset values.","title":"Defaults"},{"location":"api/coil-base/coil.request/-image-request/defaults/#defaults","text":"val defaults: DefaultRequestOptions The defaults used to fill unset values.","title":"defaults"},{"location":"api/coil-base/coil.request/-image-request/defined/","text":"coil-base / coil.request / ImageRequest / defined defined val defined: DefinedRequestOptions The raw values set on Builder .","title":"Defined"},{"location":"api/coil-base/coil.request/-image-request/defined/#defined","text":"val defined: DefinedRequestOptions The raw values set on Builder .","title":"defined"},{"location":"api/coil-base/coil.request/-image-request/disk-cache-policy/","text":"coil-base / coil.request / ImageRequest / diskCachePolicy diskCachePolicy val diskCachePolicy: CachePolicy See Also Builder.diskCachePolicy","title":"Disk cache policy"},{"location":"api/coil-base/coil.request/-image-request/disk-cache-policy/#diskcachepolicy","text":"val diskCachePolicy: CachePolicy See Also Builder.diskCachePolicy","title":"diskCachePolicy"},{"location":"api/coil-base/coil.request/-image-request/dispatcher/","text":"coil-base / coil.request / ImageRequest / dispatcher dispatcher val dispatcher: CoroutineDispatcher See Also Builder.dispatcher","title":"Dispatcher"},{"location":"api/coil-base/coil.request/-image-request/dispatcher/#dispatcher","text":"val dispatcher: CoroutineDispatcher See Also Builder.dispatcher","title":"dispatcher"},{"location":"api/coil-base/coil.request/-image-request/equals/","text":"coil-base / coil.request / ImageRequest / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/coil-base/coil.request/-image-request/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/coil-base/coil.request/-image-request/error/","text":"coil-base / coil.request / ImageRequest / error error val error: Drawable ? See Also Builder.error","title":"Error"},{"location":"api/coil-base/coil.request/-image-request/error/#error","text":"val error: Drawable ? See Also Builder.error","title":"error"},{"location":"api/coil-base/coil.request/-image-request/fallback/","text":"coil-base / coil.request / ImageRequest / fallback fallback val fallback: Drawable ? See Also Builder.fallback","title":"Fallback"},{"location":"api/coil-base/coil.request/-image-request/fallback/#fallback","text":"val fallback: Drawable ? See Also Builder.fallback","title":"fallback"},{"location":"api/coil-base/coil.request/-image-request/fetcher/","text":"coil-base / coil.request / ImageRequest / fetcher fetcher val fetcher: Pair Fetcher * , Class * ? See Also Builder.fetcher","title":"Fetcher"},{"location":"api/coil-base/coil.request/-image-request/fetcher/#fetcher","text":"val fetcher: Pair Fetcher * , Class * ? See Also Builder.fetcher","title":"fetcher"},{"location":"api/coil-base/coil.request/-image-request/hash-code/","text":"coil-base / coil.request / ImageRequest / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"api/coil-base/coil.request/-image-request/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"api/coil-base/coil.request/-image-request/headers/","text":"coil-base / coil.request / ImageRequest / headers headers val headers: Headers See Also Builder.headers","title":"Headers"},{"location":"api/coil-base/coil.request/-image-request/headers/#headers","text":"val headers: Headers See Also Builder.headers","title":"headers"},{"location":"api/coil-base/coil.request/-image-request/lifecycle/","text":"coil-base / coil.request / ImageRequest / lifecycle lifecycle val lifecycle: Lifecycle See Also Builder.lifecycle","title":"Lifecycle"},{"location":"api/coil-base/coil.request/-image-request/lifecycle/#lifecycle","text":"val lifecycle: Lifecycle See Also Builder.lifecycle","title":"lifecycle"},{"location":"api/coil-base/coil.request/-image-request/listener/","text":"coil-base / coil.request / ImageRequest / listener listener val listener: Listener? See Also Builder.listener","title":"Listener"},{"location":"api/coil-base/coil.request/-image-request/listener/#listener","text":"val listener: Listener? See Also Builder.listener","title":"listener"},{"location":"api/coil-base/coil.request/-image-request/memory-cache-key/","text":"coil-base / coil.request / ImageRequest / memoryCacheKey memoryCacheKey val memoryCacheKey: Key? See Also Builder.memoryCacheKey","title":"Memory cache key"},{"location":"api/coil-base/coil.request/-image-request/memory-cache-key/#memorycachekey","text":"val memoryCacheKey: Key? See Also Builder.memoryCacheKey","title":"memoryCacheKey"},{"location":"api/coil-base/coil.request/-image-request/memory-cache-policy/","text":"coil-base / coil.request / ImageRequest / memoryCachePolicy memoryCachePolicy val memoryCachePolicy: CachePolicy See Also Builder.memoryCachePolicy","title":"Memory cache policy"},{"location":"api/coil-base/coil.request/-image-request/memory-cache-policy/#memorycachepolicy","text":"val memoryCachePolicy: CachePolicy See Also Builder.memoryCachePolicy","title":"memoryCachePolicy"},{"location":"api/coil-base/coil.request/-image-request/network-cache-policy/","text":"coil-base / coil.request / ImageRequest / networkCachePolicy networkCachePolicy val networkCachePolicy: CachePolicy See Also Builder.networkCachePolicy","title":"Network cache policy"},{"location":"api/coil-base/coil.request/-image-request/network-cache-policy/#networkcachepolicy","text":"val networkCachePolicy: CachePolicy See Also Builder.networkCachePolicy","title":"networkCachePolicy"},{"location":"api/coil-base/coil.request/-image-request/new-builder/","text":"coil-base / coil.request / ImageRequest / newBuilder newBuilder @JvmOverloads fun newBuilder(context: Context = this.context): Builder","title":"New builder"},{"location":"api/coil-base/coil.request/-image-request/new-builder/#newbuilder","text":"@JvmOverloads fun newBuilder(context: Context = this.context): Builder","title":"newBuilder"},{"location":"api/coil-base/coil.request/-image-request/parameters/","text":"coil-base / coil.request / ImageRequest / parameters parameters val parameters: Parameters See Also Builder.parameters","title":"Parameters"},{"location":"api/coil-base/coil.request/-image-request/parameters/#parameters","text":"val parameters: Parameters See Also Builder.parameters","title":"parameters"},{"location":"api/coil-base/coil.request/-image-request/placeholder-memory-cache-key/","text":"coil-base / coil.request / ImageRequest / placeholderMemoryCacheKey placeholderMemoryCacheKey val placeholderMemoryCacheKey: Key? See Also Builder.placeholderMemoryCacheKey","title":"Placeholder memory cache key"},{"location":"api/coil-base/coil.request/-image-request/placeholder-memory-cache-key/#placeholdermemorycachekey","text":"val placeholderMemoryCacheKey: Key? See Also Builder.placeholderMemoryCacheKey","title":"placeholderMemoryCacheKey"},{"location":"api/coil-base/coil.request/-image-request/placeholder/","text":"coil-base / coil.request / ImageRequest / placeholder placeholder val placeholder: Drawable ? See Also Builder.placeholder","title":"Placeholder"},{"location":"api/coil-base/coil.request/-image-request/placeholder/#placeholder","text":"val placeholder: Drawable ? See Also Builder.placeholder","title":"placeholder"},{"location":"api/coil-base/coil.request/-image-request/precision/","text":"coil-base / coil.request / ImageRequest / precision precision val precision: Precision See Also Builder.precision","title":"Precision"},{"location":"api/coil-base/coil.request/-image-request/precision/#precision","text":"val precision: Precision See Also Builder.precision","title":"precision"},{"location":"api/coil-base/coil.request/-image-request/premultiplied-alpha/","text":"coil-base / coil.request / ImageRequest / premultipliedAlpha premultipliedAlpha val premultipliedAlpha: Boolean See Also Builder.premultipliedAlpha","title":"Premultiplied alpha"},{"location":"api/coil-base/coil.request/-image-request/premultiplied-alpha/#premultipliedalpha","text":"val premultipliedAlpha: Boolean See Also Builder.premultipliedAlpha","title":"premultipliedAlpha"},{"location":"api/coil-base/coil.request/-image-request/scale/","text":"coil-base / coil.request / ImageRequest / scale scale val scale: Scale See Also Builder.scale","title":"Scale"},{"location":"api/coil-base/coil.request/-image-request/scale/#scale","text":"val scale: Scale See Also Builder.scale","title":"scale"},{"location":"api/coil-base/coil.request/-image-request/size-resolver/","text":"coil-base / coil.request / ImageRequest / sizeResolver sizeResolver val sizeResolver: SizeResolver See Also Builder.sizeResolver","title":"Size resolver"},{"location":"api/coil-base/coil.request/-image-request/size-resolver/#sizeresolver","text":"val sizeResolver: SizeResolver See Also Builder.sizeResolver","title":"sizeResolver"},{"location":"api/coil-base/coil.request/-image-request/target/","text":"coil-base / coil.request / ImageRequest / target target val target: Target ? See Also Builder.target","title":"Target"},{"location":"api/coil-base/coil.request/-image-request/target/#target","text":"val target: Target ? See Also Builder.target","title":"target"},{"location":"api/coil-base/coil.request/-image-request/to-string/","text":"coil-base / coil.request / ImageRequest / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.request/-image-request/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.request/-image-request/transformations/","text":"coil-base / coil.request / ImageRequest / transformations transformations val transformations: List Transformation See Also Builder.transformations","title":"Transformations"},{"location":"api/coil-base/coil.request/-image-request/transformations/#transformations","text":"val transformations: List Transformation See Also Builder.transformations","title":"transformations"},{"location":"api/coil-base/coil.request/-image-request/transition/","text":"coil-base / coil.request / ImageRequest / transition transition val transition: Transition See Also Builder.transition","title":"Transition"},{"location":"api/coil-base/coil.request/-image-request/transition/#transition","text":"val transition: Transition See Also Builder.transition","title":"transition"},{"location":"api/coil-base/coil.request/-image-request/-builder/","text":"coil-base / coil.request / ImageRequest / Builder Builder class Builder Constructors Name Summary init Builder(context: Context ) Builder(request: ImageRequest , context: Context = request.context) Functions Name Summary addHeader Add a header for any network operations performed by this request. fun addHeader(name: String , value: String ): Builder allowHardware fun allowHardware(enable: Boolean ): Builder allowRgb565 fun allowRgb565(enable: Boolean ): Builder bitmapConfig fun bitmapConfig(config: Config ): Builder build Create a new ImageRequest . fun build(): ImageRequest colorSpace Set the preferred ColorSpace . fun colorSpace(colorSpace: ColorSpace ): Builder crossfade fun crossfade(enable: Boolean ): Builder fun crossfade(durationMillis: Int ): Builder data Set the data to load. fun data(data: Any ?): Builder decoder Use decoder to handle decoding any image data. fun decoder(decoder: Decoder ): Builder defaults Set the defaults for any unset request values. fun defaults(defaults: DefaultRequestOptions ): Builder diskCachePolicy Enable/disable reading/writing from/to the disk cache. fun diskCachePolicy(policy: CachePolicy ): Builder dispatcher Set the CoroutineDispatcher to launch the request. fun dispatcher(dispatcher: CoroutineDispatcher ): Builder error Set the error drawable to use if the request fails. fun error(drawableResId: Int ): Builder fun error(drawable: Drawable ?): Builder fallback Set the fallback drawable to use if data is null. fun fallback(drawableResId: Int ): Builder fun fallback(drawable: Drawable ?): Builder fetcher Use fetcher to handle fetching any image data. fun T : Any fetcher(fetcher: Fetcher T ): Builder headers Set the Headers for any network operations performed by this request. fun headers(headers: Headers ): Builder lifecycle Set the Lifecycle for this request. fun lifecycle(owner: LifecycleOwner ?): Builder fun lifecycle(lifecycle: Lifecycle ?): Builder listener Convenience function to create and set the Listener . fun listener(onStart: (request: ImageRequest ) - Unit = {}, onCancel: (request: ImageRequest ) - Unit = {}, onError: (request: ImageRequest , throwable: Throwable ) - Unit = { _, _ - }, onSuccess: (request: ImageRequest , metadata: Metadata) - Unit = { _, _ - }): Builder Set the Listener . fun listener(listener: Listener?): Builder memoryCacheKey Set the memory cache key for this request. fun memoryCacheKey(key: String ?): Builder fun memoryCacheKey(key: Key?): Builder memoryCachePolicy Enable/disable reading/writing from/to the memory cache. fun memoryCachePolicy(policy: CachePolicy ): Builder networkCachePolicy Enable/disable reading from the network. fun networkCachePolicy(policy: CachePolicy ): Builder parameters Set the parameters for this request. fun parameters(parameters: Parameters ): Builder placeholder Set the placeholder drawable to use when the request starts. fun placeholder(drawableResId: Int ): Builder fun placeholder(drawable: Drawable ?): Builder placeholderMemoryCacheKey Set the memory cache key whose value will be used as the placeholder drawable. fun placeholderMemoryCacheKey(key: String ?): Builder fun placeholderMemoryCacheKey(key: Key?): Builder precision Set the precision for the size of the loaded image. fun precision(precision: Precision ): Builder premultipliedAlpha Enable/disable pre-multiplication of the color (RGB) channels of the decoded image by the alpha channel. fun premultipliedAlpha(enable: Boolean ): Builder removeHeader Remove all network headers with the key name . fun removeHeader(name: String ): Builder removeParameter Remove a parameter from this request. fun removeParameter(key: String ): Builder scale Set the scaling algorithm that will be used to fit/fill the image into the size provided by sizeResolver . fun scale(scale: Scale ): Builder setHeader Set a header for any network operations performed by this request. fun setHeader(name: String , value: String ): Builder setParameter Set a parameter for this request. fun setParameter(key: String , value: Any ?, cacheKey: String ? = value?.toString()): Builder size Set the requested width/height. fun size(size: Int ): Builder fun size(width: Int , height: Int ): Builder fun size(size: Size ): Builder Set the SizeResolver to resolve the requested width/height. fun size(resolver: SizeResolver ): Builder target Convenience function to set imageView as the Target . fun target(imageView: ImageView ): Builder Convenience function to create and set the Target . fun target(onStart: (placeholder: Drawable ?) - Unit = {}, onError: (error: Drawable ?) - Unit = {}, onSuccess: (result: Drawable ) - Unit = {}): Builder Set the Target . fun target(target: Target ?): Builder transformations Set the list of Transformation s to be applied to this request. fun transformations(vararg transformations: Transformation ): Builder fun transformations(transformations: List Transformation ): Builder transition fun transition(transition: Transition ): Builder","title":"Home"},{"location":"api/coil-base/coil.request/-image-request/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"api/coil-base/coil.request/-image-request/-builder/#constructors","text":"Name Summary init Builder(context: Context ) Builder(request: ImageRequest , context: Context = request.context)","title":"Constructors"},{"location":"api/coil-base/coil.request/-image-request/-builder/#functions","text":"Name Summary addHeader Add a header for any network operations performed by this request. fun addHeader(name: String , value: String ): Builder allowHardware fun allowHardware(enable: Boolean ): Builder allowRgb565 fun allowRgb565(enable: Boolean ): Builder bitmapConfig fun bitmapConfig(config: Config ): Builder build Create a new ImageRequest . fun build(): ImageRequest colorSpace Set the preferred ColorSpace . fun colorSpace(colorSpace: ColorSpace ): Builder crossfade fun crossfade(enable: Boolean ): Builder fun crossfade(durationMillis: Int ): Builder data Set the data to load. fun data(data: Any ?): Builder decoder Use decoder to handle decoding any image data. fun decoder(decoder: Decoder ): Builder defaults Set the defaults for any unset request values. fun defaults(defaults: DefaultRequestOptions ): Builder diskCachePolicy Enable/disable reading/writing from/to the disk cache. fun diskCachePolicy(policy: CachePolicy ): Builder dispatcher Set the CoroutineDispatcher to launch the request. fun dispatcher(dispatcher: CoroutineDispatcher ): Builder error Set the error drawable to use if the request fails. fun error(drawableResId: Int ): Builder fun error(drawable: Drawable ?): Builder fallback Set the fallback drawable to use if data is null. fun fallback(drawableResId: Int ): Builder fun fallback(drawable: Drawable ?): Builder fetcher Use fetcher to handle fetching any image data. fun T : Any fetcher(fetcher: Fetcher T ): Builder headers Set the Headers for any network operations performed by this request. fun headers(headers: Headers ): Builder lifecycle Set the Lifecycle for this request. fun lifecycle(owner: LifecycleOwner ?): Builder fun lifecycle(lifecycle: Lifecycle ?): Builder listener Convenience function to create and set the Listener . fun listener(onStart: (request: ImageRequest ) - Unit = {}, onCancel: (request: ImageRequest ) - Unit = {}, onError: (request: ImageRequest , throwable: Throwable ) - Unit = { _, _ - }, onSuccess: (request: ImageRequest , metadata: Metadata) - Unit = { _, _ - }): Builder Set the Listener . fun listener(listener: Listener?): Builder memoryCacheKey Set the memory cache key for this request. fun memoryCacheKey(key: String ?): Builder fun memoryCacheKey(key: Key?): Builder memoryCachePolicy Enable/disable reading/writing from/to the memory cache. fun memoryCachePolicy(policy: CachePolicy ): Builder networkCachePolicy Enable/disable reading from the network. fun networkCachePolicy(policy: CachePolicy ): Builder parameters Set the parameters for this request. fun parameters(parameters: Parameters ): Builder placeholder Set the placeholder drawable to use when the request starts. fun placeholder(drawableResId: Int ): Builder fun placeholder(drawable: Drawable ?): Builder placeholderMemoryCacheKey Set the memory cache key whose value will be used as the placeholder drawable. fun placeholderMemoryCacheKey(key: String ?): Builder fun placeholderMemoryCacheKey(key: Key?): Builder precision Set the precision for the size of the loaded image. fun precision(precision: Precision ): Builder premultipliedAlpha Enable/disable pre-multiplication of the color (RGB) channels of the decoded image by the alpha channel. fun premultipliedAlpha(enable: Boolean ): Builder removeHeader Remove all network headers with the key name . fun removeHeader(name: String ): Builder removeParameter Remove a parameter from this request. fun removeParameter(key: String ): Builder scale Set the scaling algorithm that will be used to fit/fill the image into the size provided by sizeResolver . fun scale(scale: Scale ): Builder setHeader Set a header for any network operations performed by this request. fun setHeader(name: String , value: String ): Builder setParameter Set a parameter for this request. fun setParameter(key: String , value: Any ?, cacheKey: String ? = value?.toString()): Builder size Set the requested width/height. fun size(size: Int ): Builder fun size(width: Int , height: Int ): Builder fun size(size: Size ): Builder Set the SizeResolver to resolve the requested width/height. fun size(resolver: SizeResolver ): Builder target Convenience function to set imageView as the Target . fun target(imageView: ImageView ): Builder Convenience function to create and set the Target . fun target(onStart: (placeholder: Drawable ?) - Unit = {}, onError: (error: Drawable ?) - Unit = {}, onSuccess: (result: Drawable ) - Unit = {}): Builder Set the Target . fun target(target: Target ?): Builder transformations Set the list of Transformation s to be applied to this request. fun transformations(vararg transformations: Transformation ): Builder fun transformations(transformations: List Transformation ): Builder transition fun transition(transition: Transition ): Builder","title":"Functions"},{"location":"api/coil-base/coil.request/-image-request/-builder/-init-/","text":"coil-base / coil.request / ImageRequest / Builder / init init Builder(context: Context ) Builder(request: ImageRequest , context: Context = request.context)","title":" init "},{"location":"api/coil-base/coil.request/-image-request/-builder/-init-/#init","text":"Builder(context: Context ) Builder(request: ImageRequest , context: Context = request.context)","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-image-request/-builder/add-header/","text":"coil-base / coil.request / ImageRequest / Builder / addHeader addHeader fun addHeader(name: String , value: String ): Builder Add a header for any network operations performed by this request. See Also Headers.Builder.add","title":"Add header"},{"location":"api/coil-base/coil.request/-image-request/-builder/add-header/#addheader","text":"fun addHeader(name: String , value: String ): Builder Add a header for any network operations performed by this request. See Also Headers.Builder.add","title":"addHeader"},{"location":"api/coil-base/coil.request/-image-request/-builder/allow-hardware/","text":"coil-base / coil.request / ImageRequest / Builder / allowHardware allowHardware fun allowHardware(enable: Boolean ): Builder See Also ImageLoader.Builder.allowHardware","title":"Allow hardware"},{"location":"api/coil-base/coil.request/-image-request/-builder/allow-hardware/#allowhardware","text":"fun allowHardware(enable: Boolean ): Builder See Also ImageLoader.Builder.allowHardware","title":"allowHardware"},{"location":"api/coil-base/coil.request/-image-request/-builder/allow-rgb565/","text":"coil-base / coil.request / ImageRequest / Builder / allowRgb565 allowRgb565 fun allowRgb565(enable: Boolean ): Builder See Also ImageLoader.Builder.allowRgb565","title":"Allow rgb565"},{"location":"api/coil-base/coil.request/-image-request/-builder/allow-rgb565/#allowrgb565","text":"fun allowRgb565(enable: Boolean ): Builder See Also ImageLoader.Builder.allowRgb565","title":"allowRgb565"},{"location":"api/coil-base/coil.request/-image-request/-builder/bitmap-config/","text":"coil-base / coil.request / ImageRequest / Builder / bitmapConfig bitmapConfig fun bitmapConfig(config: Config ): Builder See Also ImageLoader.Builder.bitmapConfig","title":"Bitmap config"},{"location":"api/coil-base/coil.request/-image-request/-builder/bitmap-config/#bitmapconfig","text":"fun bitmapConfig(config: Config ): Builder See Also ImageLoader.Builder.bitmapConfig","title":"bitmapConfig"},{"location":"api/coil-base/coil.request/-image-request/-builder/build/","text":"coil-base / coil.request / ImageRequest / Builder / build build fun build(): ImageRequest Create a new ImageRequest .","title":"Build"},{"location":"api/coil-base/coil.request/-image-request/-builder/build/#build","text":"fun build(): ImageRequest Create a new ImageRequest .","title":"build"},{"location":"api/coil-base/coil.request/-image-request/-builder/color-space/","text":"coil-base / coil.request / ImageRequest / Builder / colorSpace colorSpace @RequiresApi(26) fun colorSpace(colorSpace: ColorSpace ): Builder Set the preferred ColorSpace . This is not guaranteed and a different color space may be used in some situations.","title":"Color space"},{"location":"api/coil-base/coil.request/-image-request/-builder/color-space/#colorspace","text":"@RequiresApi(26) fun colorSpace(colorSpace: ColorSpace ): Builder Set the preferred ColorSpace . This is not guaranteed and a different color space may be used in some situations.","title":"colorSpace"},{"location":"api/coil-base/coil.request/-image-request/-builder/crossfade/","text":"coil-base / coil.request / ImageRequest / Builder / crossfade crossfade fun crossfade(enable: Boolean ): Builder fun crossfade(durationMillis: Int ): Builder See Also ImageLoader.Builder.crossfade","title":"Crossfade"},{"location":"api/coil-base/coil.request/-image-request/-builder/crossfade/#crossfade","text":"fun crossfade(enable: Boolean ): Builder fun crossfade(durationMillis: Int ): Builder See Also ImageLoader.Builder.crossfade","title":"crossfade"},{"location":"api/coil-base/coil.request/-image-request/-builder/data/","text":"coil-base / coil.request / ImageRequest / Builder / data data fun data(data: Any ?): Builder Set the data to load. The default supported data types are: String (mapped to a Uri ) Uri (\"android.resource\", \"content\", \"file\", \"http\", and \"https\" schemes only) HttpUrl File DrawableRes Drawable Bitmap","title":"Data"},{"location":"api/coil-base/coil.request/-image-request/-builder/data/#data","text":"fun data(data: Any ?): Builder Set the data to load. The default supported data types are: String (mapped to a Uri ) Uri (\"android.resource\", \"content\", \"file\", \"http\", and \"https\" schemes only) HttpUrl File DrawableRes Drawable Bitmap","title":"data"},{"location":"api/coil-base/coil.request/-image-request/-builder/decoder/","text":"coil-base / coil.request / ImageRequest / Builder / decoder decoder fun decoder(decoder: Decoder ): Builder Use decoder to handle decoding any image data. If this is null or is not set the ImageLoader will find an applicable decoder in its ComponentRegistry .","title":"Decoder"},{"location":"api/coil-base/coil.request/-image-request/-builder/decoder/#decoder","text":"fun decoder(decoder: Decoder ): Builder Use decoder to handle decoding any image data. If this is null or is not set the ImageLoader will find an applicable decoder in its ComponentRegistry .","title":"decoder"},{"location":"api/coil-base/coil.request/-image-request/-builder/defaults/","text":"coil-base / coil.request / ImageRequest / Builder / defaults defaults fun defaults(defaults: DefaultRequestOptions ): Builder Set the defaults for any unset request values.","title":"Defaults"},{"location":"api/coil-base/coil.request/-image-request/-builder/defaults/#defaults","text":"fun defaults(defaults: DefaultRequestOptions ): Builder Set the defaults for any unset request values.","title":"defaults"},{"location":"api/coil-base/coil.request/-image-request/-builder/disk-cache-policy/","text":"coil-base / coil.request / ImageRequest / Builder / diskCachePolicy diskCachePolicy fun diskCachePolicy(policy: CachePolicy ): Builder Enable/disable reading/writing from/to the disk cache.","title":"Disk cache policy"},{"location":"api/coil-base/coil.request/-image-request/-builder/disk-cache-policy/#diskcachepolicy","text":"fun diskCachePolicy(policy: CachePolicy ): Builder Enable/disable reading/writing from/to the disk cache.","title":"diskCachePolicy"},{"location":"api/coil-base/coil.request/-image-request/-builder/dispatcher/","text":"coil-base / coil.request / ImageRequest / Builder / dispatcher dispatcher fun dispatcher(dispatcher: CoroutineDispatcher ): Builder Set the CoroutineDispatcher to launch the request.","title":"Dispatcher"},{"location":"api/coil-base/coil.request/-image-request/-builder/dispatcher/#dispatcher","text":"fun dispatcher(dispatcher: CoroutineDispatcher ): Builder Set the CoroutineDispatcher to launch the request.","title":"dispatcher"},{"location":"api/coil-base/coil.request/-image-request/-builder/error/","text":"coil-base / coil.request / ImageRequest / Builder / error error fun error(@DrawableRes drawableResId: Int ): Builder fun error(drawable: Drawable ?): Builder Set the error drawable to use if the request fails.","title":"Error"},{"location":"api/coil-base/coil.request/-image-request/-builder/error/#error","text":"fun error(@DrawableRes drawableResId: Int ): Builder fun error(drawable: Drawable ?): Builder Set the error drawable to use if the request fails.","title":"error"},{"location":"api/coil-base/coil.request/-image-request/-builder/fallback/","text":"coil-base / coil.request / ImageRequest / Builder / fallback fallback fun fallback(@DrawableRes drawableResId: Int ): Builder fun fallback(drawable: Drawable ?): Builder Set the fallback drawable to use if data is null.","title":"Fallback"},{"location":"api/coil-base/coil.request/-image-request/-builder/fallback/#fallback","text":"fun fallback(@DrawableRes drawableResId: Int ): Builder fun fallback(drawable: Drawable ?): Builder Set the fallback drawable to use if data is null.","title":"fallback"},{"location":"api/coil-base/coil.request/-image-request/-builder/fetcher/","text":"coil-base / coil.request / ImageRequest / Builder / fetcher fetcher fun reified T : Any fetcher(fetcher: Fetcher T ): Builder Use fetcher to handle fetching any image data. If this is null or is not set the ImageLoader will find an applicable fetcher in its ComponentRegistry .","title":"Fetcher"},{"location":"api/coil-base/coil.request/-image-request/-builder/fetcher/#fetcher","text":"fun reified T : Any fetcher(fetcher: Fetcher T ): Builder Use fetcher to handle fetching any image data. If this is null or is not set the ImageLoader will find an applicable fetcher in its ComponentRegistry .","title":"fetcher"},{"location":"api/coil-base/coil.request/-image-request/-builder/headers/","text":"coil-base / coil.request / ImageRequest / Builder / headers headers fun headers(headers: Headers ): Builder Set the Headers for any network operations performed by this request.","title":"Headers"},{"location":"api/coil-base/coil.request/-image-request/-builder/headers/#headers","text":"fun headers(headers: Headers ): Builder Set the Headers for any network operations performed by this request.","title":"headers"},{"location":"api/coil-base/coil.request/-image-request/-builder/lifecycle/","text":"coil-base / coil.request / ImageRequest / Builder / lifecycle lifecycle fun lifecycle(owner: LifecycleOwner ?): Builder Set the Lifecycle for this request. fun lifecycle(lifecycle: Lifecycle ?): Builder Set the Lifecycle for this request. Requests are queued while the lifecycle is not at least Lifecycle.State.STARTED . Requests are cancelled when the lifecycle reaches Lifecycle.State.DESTROYED . If this is null or is not set the ImageLoader will attempt to find the lifecycle for this request through its context .","title":"Lifecycle"},{"location":"api/coil-base/coil.request/-image-request/-builder/lifecycle/#lifecycle","text":"fun lifecycle(owner: LifecycleOwner ?): Builder Set the Lifecycle for this request. fun lifecycle(lifecycle: Lifecycle ?): Builder Set the Lifecycle for this request. Requests are queued while the lifecycle is not at least Lifecycle.State.STARTED . Requests are cancelled when the lifecycle reaches Lifecycle.State.DESTROYED . If this is null or is not set the ImageLoader will attempt to find the lifecycle for this request through its context .","title":"lifecycle"},{"location":"api/coil-base/coil.request/-image-request/-builder/listener/","text":"coil-base / coil.request / ImageRequest / Builder / listener listener inline fun listener(crossinline onStart: (request: ImageRequest ) - Unit = {}, crossinline onCancel: (request: ImageRequest ) - Unit = {}, crossinline onError: (request: ImageRequest , throwable: Throwable ) - Unit = { _, _ - }, crossinline onSuccess: (request: ImageRequest , metadata: Metadata) - Unit = { _, _ - }): Builder Convenience function to create and set the Listener . fun listener(listener: Listener?): Builder Set the Listener .","title":"Listener"},{"location":"api/coil-base/coil.request/-image-request/-builder/listener/#listener","text":"inline fun listener(crossinline onStart: (request: ImageRequest ) - Unit = {}, crossinline onCancel: (request: ImageRequest ) - Unit = {}, crossinline onError: (request: ImageRequest , throwable: Throwable ) - Unit = { _, _ - }, crossinline onSuccess: (request: ImageRequest , metadata: Metadata) - Unit = { _, _ - }): Builder Convenience function to create and set the Listener . fun listener(listener: Listener?): Builder Set the Listener .","title":"listener"},{"location":"api/coil-base/coil.request/-image-request/-builder/memory-cache-key/","text":"coil-base / coil.request / ImageRequest / Builder / memoryCacheKey memoryCacheKey fun memoryCacheKey(key: String ?): Builder fun memoryCacheKey(key: Key?): Builder Set the memory cache key for this request. If this is null or is not set the ImageLoader will compute a memory cache key.","title":"Memory cache key"},{"location":"api/coil-base/coil.request/-image-request/-builder/memory-cache-key/#memorycachekey","text":"fun memoryCacheKey(key: String ?): Builder fun memoryCacheKey(key: Key?): Builder Set the memory cache key for this request. If this is null or is not set the ImageLoader will compute a memory cache key.","title":"memoryCacheKey"},{"location":"api/coil-base/coil.request/-image-request/-builder/memory-cache-policy/","text":"coil-base / coil.request / ImageRequest / Builder / memoryCachePolicy memoryCachePolicy fun memoryCachePolicy(policy: CachePolicy ): Builder Enable/disable reading/writing from/to the memory cache.","title":"Memory cache policy"},{"location":"api/coil-base/coil.request/-image-request/-builder/memory-cache-policy/#memorycachepolicy","text":"fun memoryCachePolicy(policy: CachePolicy ): Builder Enable/disable reading/writing from/to the memory cache.","title":"memoryCachePolicy"},{"location":"api/coil-base/coil.request/-image-request/-builder/network-cache-policy/","text":"coil-base / coil.request / ImageRequest / Builder / networkCachePolicy networkCachePolicy fun networkCachePolicy(policy: CachePolicy ): Builder Enable/disable reading from the network. NOTE: Disabling writes has no effect.","title":"Network cache policy"},{"location":"api/coil-base/coil.request/-image-request/-builder/network-cache-policy/#networkcachepolicy","text":"fun networkCachePolicy(policy: CachePolicy ): Builder Enable/disable reading from the network. NOTE: Disabling writes has no effect.","title":"networkCachePolicy"},{"location":"api/coil-base/coil.request/-image-request/-builder/parameters/","text":"coil-base / coil.request / ImageRequest / Builder / parameters parameters fun parameters(parameters: Parameters ): Builder Set the parameters for this request.","title":"Parameters"},{"location":"api/coil-base/coil.request/-image-request/-builder/parameters/#parameters","text":"fun parameters(parameters: Parameters ): Builder Set the parameters for this request.","title":"parameters"},{"location":"api/coil-base/coil.request/-image-request/-builder/placeholder-memory-cache-key/","text":"coil-base / coil.request / ImageRequest / Builder / placeholderMemoryCacheKey placeholderMemoryCacheKey fun placeholderMemoryCacheKey(key: String ?): Builder fun placeholderMemoryCacheKey(key: Key?): Builder Set the memory cache key whose value will be used as the placeholder drawable. If there is no value in the memory cache for key , fall back to placeholder .","title":"Placeholder memory cache key"},{"location":"api/coil-base/coil.request/-image-request/-builder/placeholder-memory-cache-key/#placeholdermemorycachekey","text":"fun placeholderMemoryCacheKey(key: String ?): Builder fun placeholderMemoryCacheKey(key: Key?): Builder Set the memory cache key whose value will be used as the placeholder drawable. If there is no value in the memory cache for key , fall back to placeholder .","title":"placeholderMemoryCacheKey"},{"location":"api/coil-base/coil.request/-image-request/-builder/placeholder/","text":"coil-base / coil.request / ImageRequest / Builder / placeholder placeholder fun placeholder(@DrawableRes drawableResId: Int ): Builder fun placeholder(drawable: Drawable ?): Builder Set the placeholder drawable to use when the request starts.","title":"Placeholder"},{"location":"api/coil-base/coil.request/-image-request/-builder/placeholder/#placeholder","text":"fun placeholder(@DrawableRes drawableResId: Int ): Builder fun placeholder(drawable: Drawable ?): Builder Set the placeholder drawable to use when the request starts.","title":"placeholder"},{"location":"api/coil-base/coil.request/-image-request/-builder/precision/","text":"coil-base / coil.request / ImageRequest / Builder / precision precision fun precision(precision: Precision ): Builder Set the precision for the size of the loaded image. The default value is Precision.AUTOMATIC , which uses the logic in allowInexactSize to determine if output image's dimensions must match the input size and scale exactly. NOTE: If size is OriginalSize , the returned image's size will always be equal to or greater than the image's original size. See Also Precision","title":"Precision"},{"location":"api/coil-base/coil.request/-image-request/-builder/precision/#precision","text":"fun precision(precision: Precision ): Builder Set the precision for the size of the loaded image. The default value is Precision.AUTOMATIC , which uses the logic in allowInexactSize to determine if output image's dimensions must match the input size and scale exactly. NOTE: If size is OriginalSize , the returned image's size will always be equal to or greater than the image's original size. See Also Precision","title":"precision"},{"location":"api/coil-base/coil.request/-image-request/-builder/premultiplied-alpha/","text":"coil-base / coil.request / ImageRequest / Builder / premultipliedAlpha premultipliedAlpha fun premultipliedAlpha(enable: Boolean ): Builder Enable/disable pre-multiplication of the color (RGB) channels of the decoded image by the alpha channel. The default behavior is to enable pre-multiplication but in some environments it can be necessary to disable this feature to leave the source pixels unmodified.","title":"Premultiplied alpha"},{"location":"api/coil-base/coil.request/-image-request/-builder/premultiplied-alpha/#premultipliedalpha","text":"fun premultipliedAlpha(enable: Boolean ): Builder Enable/disable pre-multiplication of the color (RGB) channels of the decoded image by the alpha channel. The default behavior is to enable pre-multiplication but in some environments it can be necessary to disable this feature to leave the source pixels unmodified.","title":"premultipliedAlpha"},{"location":"api/coil-base/coil.request/-image-request/-builder/remove-header/","text":"coil-base / coil.request / ImageRequest / Builder / removeHeader removeHeader fun removeHeader(name: String ): Builder Remove all network headers with the key name .","title":"Remove header"},{"location":"api/coil-base/coil.request/-image-request/-builder/remove-header/#removeheader","text":"fun removeHeader(name: String ): Builder Remove all network headers with the key name .","title":"removeHeader"},{"location":"api/coil-base/coil.request/-image-request/-builder/remove-parameter/","text":"coil-base / coil.request / ImageRequest / Builder / removeParameter removeParameter fun removeParameter(key: String ): Builder Remove a parameter from this request. See Also Parameters.Builder.remove","title":"Remove parameter"},{"location":"api/coil-base/coil.request/-image-request/-builder/remove-parameter/#removeparameter","text":"fun removeParameter(key: String ): Builder Remove a parameter from this request. See Also Parameters.Builder.remove","title":"removeParameter"},{"location":"api/coil-base/coil.request/-image-request/-builder/scale/","text":"coil-base / coil.request / ImageRequest / Builder / scale scale fun scale(scale: Scale ): Builder Set the scaling algorithm that will be used to fit/fill the image into the size provided by sizeResolver . NOTE: If scale is not set, it is automatically computed for ImageView targets.","title":"Scale"},{"location":"api/coil-base/coil.request/-image-request/-builder/scale/#scale","text":"fun scale(scale: Scale ): Builder Set the scaling algorithm that will be used to fit/fill the image into the size provided by sizeResolver . NOTE: If scale is not set, it is automatically computed for ImageView targets.","title":"scale"},{"location":"api/coil-base/coil.request/-image-request/-builder/set-header/","text":"coil-base / coil.request / ImageRequest / Builder / setHeader setHeader fun setHeader(name: String , value: String ): Builder Set a header for any network operations performed by this request. See Also Headers.Builder.set","title":"Set header"},{"location":"api/coil-base/coil.request/-image-request/-builder/set-header/#setheader","text":"fun setHeader(name: String , value: String ): Builder Set a header for any network operations performed by this request. See Also Headers.Builder.set","title":"setHeader"},{"location":"api/coil-base/coil.request/-image-request/-builder/set-parameter/","text":"coil-base / coil.request / ImageRequest / Builder / setParameter setParameter @JvmOverloads fun setParameter(key: String , value: Any ?, cacheKey: String ? = value?.toString()): Builder Set a parameter for this request. See Also Parameters.Builder.set","title":"Set parameter"},{"location":"api/coil-base/coil.request/-image-request/-builder/set-parameter/#setparameter","text":"@JvmOverloads fun setParameter(key: String , value: Any ?, cacheKey: String ? = value?.toString()): Builder Set a parameter for this request. See Also Parameters.Builder.set","title":"setParameter"},{"location":"api/coil-base/coil.request/-image-request/-builder/size/","text":"coil-base / coil.request / ImageRequest / Builder / size size fun size(@Px size: Int ): Builder fun size(@Px width: Int , @Px height: Int ): Builder fun size(size: Size ): Builder Set the requested width/height. fun size(resolver: SizeResolver ): Builder Set the SizeResolver to resolve the requested width/height.","title":"Size"},{"location":"api/coil-base/coil.request/-image-request/-builder/size/#size","text":"fun size(@Px size: Int ): Builder fun size(@Px width: Int , @Px height: Int ): Builder fun size(size: Size ): Builder Set the requested width/height. fun size(resolver: SizeResolver ): Builder Set the SizeResolver to resolve the requested width/height.","title":"size"},{"location":"api/coil-base/coil.request/-image-request/-builder/target/","text":"coil-base / coil.request / ImageRequest / Builder / target target fun target(imageView: ImageView ): Builder Convenience function to set imageView as the Target . inline fun target(crossinline onStart: (placeholder: Drawable ?) - Unit = {}, crossinline onError: (error: Drawable ?) - Unit = {}, crossinline onSuccess: (result: Drawable ) - Unit = {}): Builder Convenience function to create and set the Target . fun target(target: Target ?): Builder Set the Target .","title":"Target"},{"location":"api/coil-base/coil.request/-image-request/-builder/target/#target","text":"fun target(imageView: ImageView ): Builder Convenience function to set imageView as the Target . inline fun target(crossinline onStart: (placeholder: Drawable ?) - Unit = {}, crossinline onError: (error: Drawable ?) - Unit = {}, crossinline onSuccess: (result: Drawable ) - Unit = {}): Builder Convenience function to create and set the Target . fun target(target: Target ?): Builder Set the Target .","title":"target"},{"location":"api/coil-base/coil.request/-image-request/-builder/transformations/","text":"coil-base / coil.request / ImageRequest / Builder / transformations transformations fun transformations(vararg transformations: Transformation ): Builder fun transformations(transformations: List Transformation ): Builder Set the list of Transformation s to be applied to this request.","title":"Transformations"},{"location":"api/coil-base/coil.request/-image-request/-builder/transformations/#transformations","text":"fun transformations(vararg transformations: Transformation ): Builder fun transformations(transformations: List Transformation ): Builder Set the list of Transformation s to be applied to this request.","title":"transformations"},{"location":"api/coil-base/coil.request/-image-request/-builder/transition/","text":"coil-base / coil.request / ImageRequest / Builder / transition transition @ExperimentalCoilApi fun transition(transition: Transition ): Builder See Also ImageLoader.Builder.transition","title":"Transition"},{"location":"api/coil-base/coil.request/-image-request/-builder/transition/#transition","text":"@ExperimentalCoilApi fun transition(transition: Transition ): Builder See Also ImageLoader.Builder.transition","title":"transition"},{"location":"api/coil-base/coil.request/-image-request/-listener/","text":"coil-base / coil.request / ImageRequest / Listener Listener interface Listener A set of callbacks for an ImageRequest . Functions Name Summary onCancel Called if the request is cancelled. open fun onCancel(request: ImageRequest ): Unit onError Called if an error occurs while executing the request. open fun onError(request: ImageRequest , throwable: Throwable ): Unit onStart Called immediately after Target.onStart . open fun onStart(request: ImageRequest ): Unit onSuccess Called if the request completes successfully. open fun onSuccess(request: ImageRequest , metadata: Metadata): Unit","title":"Home"},{"location":"api/coil-base/coil.request/-image-request/-listener/#listener","text":"interface Listener A set of callbacks for an ImageRequest .","title":"Listener"},{"location":"api/coil-base/coil.request/-image-request/-listener/#functions","text":"Name Summary onCancel Called if the request is cancelled. open fun onCancel(request: ImageRequest ): Unit onError Called if an error occurs while executing the request. open fun onError(request: ImageRequest , throwable: Throwable ): Unit onStart Called immediately after Target.onStart . open fun onStart(request: ImageRequest ): Unit onSuccess Called if the request completes successfully. open fun onSuccess(request: ImageRequest , metadata: Metadata): Unit","title":"Functions"},{"location":"api/coil-base/coil.request/-image-request/-listener/on-cancel/","text":"coil-base / coil.request / ImageRequest / Listener / onCancel onCancel @MainThread open fun onCancel(request: ImageRequest ): Unit Called if the request is cancelled.","title":"On cancel"},{"location":"api/coil-base/coil.request/-image-request/-listener/on-cancel/#oncancel","text":"@MainThread open fun onCancel(request: ImageRequest ): Unit Called if the request is cancelled.","title":"onCancel"},{"location":"api/coil-base/coil.request/-image-request/-listener/on-error/","text":"coil-base / coil.request / ImageRequest / Listener / onError onError @MainThread open fun onError(request: ImageRequest , throwable: Throwable ): Unit Called if an error occurs while executing the request.","title":"On error"},{"location":"api/coil-base/coil.request/-image-request/-listener/on-error/#onerror","text":"@MainThread open fun onError(request: ImageRequest , throwable: Throwable ): Unit Called if an error occurs while executing the request.","title":"onError"},{"location":"api/coil-base/coil.request/-image-request/-listener/on-start/","text":"coil-base / coil.request / ImageRequest / Listener / onStart onStart @MainThread open fun onStart(request: ImageRequest ): Unit Called immediately after Target.onStart .","title":"On start"},{"location":"api/coil-base/coil.request/-image-request/-listener/on-start/#onstart","text":"@MainThread open fun onStart(request: ImageRequest ): Unit Called immediately after Target.onStart .","title":"onStart"},{"location":"api/coil-base/coil.request/-image-request/-listener/on-success/","text":"coil-base / coil.request / ImageRequest / Listener / onSuccess onSuccess @MainThread open fun onSuccess(request: ImageRequest , metadata: Metadata): Unit Called if the request completes successfully.","title":"On success"},{"location":"api/coil-base/coil.request/-image-request/-listener/on-success/#onsuccess","text":"@MainThread open fun onSuccess(request: ImageRequest , metadata: Metadata): Unit Called if the request completes successfully.","title":"onSuccess"},{"location":"api/coil-base/coil.request/-image-result/","text":"coil-base / coil.request / ImageResult ImageResult sealed class ImageResult Represents the result of an image request. See Also ImageLoader.execute Types Name Summary Metadata Supplemental information about a successful image request. data class Metadata Properties Name Summary drawable abstract val drawable: Drawable ? request abstract val request: ImageRequest Inheritors Name Summary ErrorResult Indicates that an error occurred while executing the request. data class ErrorResult : ImageResult SuccessResult Indicates that the request completed successfully. data class SuccessResult : ImageResult","title":"Home"},{"location":"api/coil-base/coil.request/-image-result/#imageresult","text":"sealed class ImageResult Represents the result of an image request. See Also ImageLoader.execute","title":"ImageResult"},{"location":"api/coil-base/coil.request/-image-result/#types","text":"Name Summary Metadata Supplemental information about a successful image request. data class Metadata","title":"Types"},{"location":"api/coil-base/coil.request/-image-result/#properties","text":"Name Summary drawable abstract val drawable: Drawable ? request abstract val request: ImageRequest","title":"Properties"},{"location":"api/coil-base/coil.request/-image-result/#inheritors","text":"Name Summary ErrorResult Indicates that an error occurred while executing the request. data class ErrorResult : ImageResult SuccessResult Indicates that the request completed successfully. data class SuccessResult : ImageResult","title":"Inheritors"},{"location":"api/coil-base/coil.request/-image-result/drawable/","text":"coil-base / coil.request / ImageResult / drawable drawable abstract val drawable: Drawable ?","title":"Drawable"},{"location":"api/coil-base/coil.request/-image-result/drawable/#drawable","text":"abstract val drawable: Drawable ?","title":"drawable"},{"location":"api/coil-base/coil.request/-image-result/request/","text":"coil-base / coil.request / ImageResult / request request abstract val request: ImageRequest","title":"Request"},{"location":"api/coil-base/coil.request/-image-result/request/#request","text":"abstract val request: ImageRequest","title":"request"},{"location":"api/coil-base/coil.request/-image-result/-metadata/","text":"coil-base / coil.request / ImageResult / Metadata Metadata data class Metadata Supplemental information about a successful image request. Parameters memoryCacheKey - The cache key for the image in the memory cache. It is null if the image was not written to the memory cache. isSampled - True if the image is sampled (i.e. loaded into memory at less than its original size). dataSource - The data source that the image was loaded from. isPlaceholderMemoryCacheKeyPresent - True if the request's ImageRequest.placeholderMemoryCacheKey was present in the memory cache and was set as the placeholder. Constructors Name Summary init Supplemental information about a successful image request. Metadata(memoryCacheKey: Key?, isSampled: Boolean , dataSource: DataSource , isPlaceholderMemoryCacheKeyPresent: Boolean ) Properties Name Summary dataSource The data source that the image was loaded from. val dataSource: DataSource isPlaceholderMemoryCacheKeyPresent True if the request's ImageRequest.placeholderMemoryCacheKey was present in the memory cache and was set as the placeholder. val isPlaceholderMemoryCacheKeyPresent: Boolean isSampled True if the image is sampled (i.e. loaded into memory at less than its original size). val isSampled: Boolean memoryCacheKey The cache key for the image in the memory cache. It is null if the image was not written to the memory cache. val memoryCacheKey: Key?","title":"Home"},{"location":"api/coil-base/coil.request/-image-result/-metadata/#metadata","text":"data class Metadata Supplemental information about a successful image request.","title":"Metadata"},{"location":"api/coil-base/coil.request/-image-result/-metadata/#parameters","text":"memoryCacheKey - The cache key for the image in the memory cache. It is null if the image was not written to the memory cache. isSampled - True if the image is sampled (i.e. loaded into memory at less than its original size). dataSource - The data source that the image was loaded from. isPlaceholderMemoryCacheKeyPresent - True if the request's ImageRequest.placeholderMemoryCacheKey was present in the memory cache and was set as the placeholder.","title":"Parameters"},{"location":"api/coil-base/coil.request/-image-result/-metadata/#constructors","text":"Name Summary init Supplemental information about a successful image request. Metadata(memoryCacheKey: Key?, isSampled: Boolean , dataSource: DataSource , isPlaceholderMemoryCacheKeyPresent: Boolean )","title":"Constructors"},{"location":"api/coil-base/coil.request/-image-result/-metadata/#properties","text":"Name Summary dataSource The data source that the image was loaded from. val dataSource: DataSource isPlaceholderMemoryCacheKeyPresent True if the request's ImageRequest.placeholderMemoryCacheKey was present in the memory cache and was set as the placeholder. val isPlaceholderMemoryCacheKeyPresent: Boolean isSampled True if the image is sampled (i.e. loaded into memory at less than its original size). val isSampled: Boolean memoryCacheKey The cache key for the image in the memory cache. It is null if the image was not written to the memory cache. val memoryCacheKey: Key?","title":"Properties"},{"location":"api/coil-base/coil.request/-image-result/-metadata/-init-/","text":"coil-base / coil.request / ImageResult / Metadata / init init Metadata(memoryCacheKey: Key?, isSampled: Boolean , dataSource: DataSource , isPlaceholderMemoryCacheKeyPresent: Boolean ) Supplemental information about a successful image request. Parameters memoryCacheKey - The cache key for the image in the memory cache. It is null if the image was not written to the memory cache. isSampled - True if the image is sampled (i.e. loaded into memory at less than its original size). dataSource - The data source that the image was loaded from. isPlaceholderMemoryCacheKeyPresent - True if the request's ImageRequest.placeholderMemoryCacheKey was present in the memory cache and was set as the placeholder.","title":" init "},{"location":"api/coil-base/coil.request/-image-result/-metadata/-init-/#init","text":"Metadata(memoryCacheKey: Key?, isSampled: Boolean , dataSource: DataSource , isPlaceholderMemoryCacheKeyPresent: Boolean ) Supplemental information about a successful image request.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-image-result/-metadata/-init-/#parameters","text":"memoryCacheKey - The cache key for the image in the memory cache. It is null if the image was not written to the memory cache. isSampled - True if the image is sampled (i.e. loaded into memory at less than its original size). dataSource - The data source that the image was loaded from. isPlaceholderMemoryCacheKeyPresent - True if the request's ImageRequest.placeholderMemoryCacheKey was present in the memory cache and was set as the placeholder.","title":"Parameters"},{"location":"api/coil-base/coil.request/-image-result/-metadata/data-source/","text":"coil-base / coil.request / ImageResult / Metadata / dataSource dataSource val dataSource: DataSource The data source that the image was loaded from.","title":"Data source"},{"location":"api/coil-base/coil.request/-image-result/-metadata/data-source/#datasource","text":"val dataSource: DataSource The data source that the image was loaded from.","title":"dataSource"},{"location":"api/coil-base/coil.request/-image-result/-metadata/is-placeholder-memory-cache-key-present/","text":"coil-base / coil.request / ImageResult / Metadata / isPlaceholderMemoryCacheKeyPresent isPlaceholderMemoryCacheKeyPresent val isPlaceholderMemoryCacheKeyPresent: Boolean True if the request's ImageRequest.placeholderMemoryCacheKey was present in the memory cache and was set as the placeholder.","title":"Is placeholder memory cache key present"},{"location":"api/coil-base/coil.request/-image-result/-metadata/is-placeholder-memory-cache-key-present/#isplaceholdermemorycachekeypresent","text":"val isPlaceholderMemoryCacheKeyPresent: Boolean True if the request's ImageRequest.placeholderMemoryCacheKey was present in the memory cache and was set as the placeholder.","title":"isPlaceholderMemoryCacheKeyPresent"},{"location":"api/coil-base/coil.request/-image-result/-metadata/is-sampled/","text":"coil-base / coil.request / ImageResult / Metadata / isSampled isSampled val isSampled: Boolean True if the image is sampled (i.e. loaded into memory at less than its original size).","title":"Is sampled"},{"location":"api/coil-base/coil.request/-image-result/-metadata/is-sampled/#issampled","text":"val isSampled: Boolean True if the image is sampled (i.e. loaded into memory at less than its original size).","title":"isSampled"},{"location":"api/coil-base/coil.request/-image-result/-metadata/memory-cache-key/","text":"coil-base / coil.request / ImageResult / Metadata / memoryCacheKey memoryCacheKey val memoryCacheKey: Key? The cache key for the image in the memory cache. It is null if the image was not written to the memory cache.","title":"Memory cache key"},{"location":"api/coil-base/coil.request/-image-result/-metadata/memory-cache-key/#memorycachekey","text":"val memoryCacheKey: Key? The cache key for the image in the memory cache. It is null if the image was not written to the memory cache.","title":"memoryCacheKey"},{"location":"api/coil-base/coil.request/-null-request-data/","text":"coil-base / coil.request / NullRequestData NullRequestData object NullRequestData The value for ImageRequest.data if the request's data was not set or was set to null. See Also ImageRequest.data Functions Name Summary toString fun toString(): String","title":"Home"},{"location":"api/coil-base/coil.request/-null-request-data/#nullrequestdata","text":"object NullRequestData The value for ImageRequest.data if the request's data was not set or was set to null. See Also ImageRequest.data","title":"NullRequestData"},{"location":"api/coil-base/coil.request/-null-request-data/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/coil-base/coil.request/-null-request-data/to-string/","text":"coil-base / coil.request / NullRequestData / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.request/-null-request-data/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.request/-null-request-data-exception/","text":"coil-base / coil.request / NullRequestDataException NullRequestDataException class NullRequestDataException : RuntimeException Exception thrown when an ImageRequest with empty/null data is executed by an ImageLoader . Constructors Name Summary init Exception thrown when an ImageRequest with empty/null data is executed by an ImageLoader . NullRequestDataException()","title":"Home"},{"location":"api/coil-base/coil.request/-null-request-data-exception/#nullrequestdataexception","text":"class NullRequestDataException : RuntimeException Exception thrown when an ImageRequest with empty/null data is executed by an ImageLoader .","title":"NullRequestDataException"},{"location":"api/coil-base/coil.request/-null-request-data-exception/#constructors","text":"Name Summary init Exception thrown when an ImageRequest with empty/null data is executed by an ImageLoader . NullRequestDataException()","title":"Constructors"},{"location":"api/coil-base/coil.request/-null-request-data-exception/-init-/","text":"coil-base / coil.request / NullRequestDataException / init init NullRequestDataException() Exception thrown when an ImageRequest with empty/null data is executed by an ImageLoader .","title":" init "},{"location":"api/coil-base/coil.request/-null-request-data-exception/-init-/#init","text":"NullRequestDataException() Exception thrown when an ImageRequest with empty/null data is executed by an ImageLoader .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-parameters/","text":"coil-base / coil.request / Parameters Parameters class Parameters : Iterable Pair String , Entry A map of generic values that can be used to pass custom data to Fetcher s and Decoder s. Types Name Summary Builder class Builder Entry data class Entry Constructors Name Summary init Parameters() Properties Name Summary size Returns the number of parameters in this object. val size: Int Functions Name Summary cacheKey Returns the cache key associated with key or null if key has no mapping. fun cacheKey(key: String ): String ? cacheKeys Returns a map of keys to non null cache keys. Parameters with a null cache key are filtered out. fun cacheKeys(): Map String , String entry Returns the entry associated with key or null if key has no mapping. fun entry(key: String ): Entry? equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int isEmpty Returns true if this object has no parameters. fun isEmpty(): Boolean iterator Returns an Iterator over the entries in the Parameters . operator fun iterator(): Iterator Pair String , Entry newBuilder fun newBuilder(): Builder toString fun toString(): String value Returns the value associated with key or null if key has no mapping. fun value(key: String ): Any ? values Returns a map of keys to values. fun values(): Map String , Any ? Companion Object Properties Name Summary EMPTY val EMPTY: Parameters Extension Functions Name Summary count Returns the number of parameters in this object. fun Parameters .count(): Int get Returns the value associated with key or null if key has no mapping. operator fun Parameters .get(key: String ): Any ? isNotEmpty Return true when the set contains elements. fun Parameters .isNotEmpty(): Boolean","title":"Home"},{"location":"api/coil-base/coil.request/-parameters/#parameters","text":"class Parameters : Iterable Pair String , Entry A map of generic values that can be used to pass custom data to Fetcher s and Decoder s.","title":"Parameters"},{"location":"api/coil-base/coil.request/-parameters/#types","text":"Name Summary Builder class Builder Entry data class Entry","title":"Types"},{"location":"api/coil-base/coil.request/-parameters/#constructors","text":"Name Summary init Parameters()","title":"Constructors"},{"location":"api/coil-base/coil.request/-parameters/#properties","text":"Name Summary size Returns the number of parameters in this object. val size: Int","title":"Properties"},{"location":"api/coil-base/coil.request/-parameters/#functions","text":"Name Summary cacheKey Returns the cache key associated with key or null if key has no mapping. fun cacheKey(key: String ): String ? cacheKeys Returns a map of keys to non null cache keys. Parameters with a null cache key are filtered out. fun cacheKeys(): Map String , String entry Returns the entry associated with key or null if key has no mapping. fun entry(key: String ): Entry? equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int isEmpty Returns true if this object has no parameters. fun isEmpty(): Boolean iterator Returns an Iterator over the entries in the Parameters . operator fun iterator(): Iterator Pair String , Entry newBuilder fun newBuilder(): Builder toString fun toString(): String value Returns the value associated with key or null if key has no mapping. fun value(key: String ): Any ? values Returns a map of keys to values. fun values(): Map String , Any ?","title":"Functions"},{"location":"api/coil-base/coil.request/-parameters/#companion-object-properties","text":"Name Summary EMPTY val EMPTY: Parameters","title":"Companion Object Properties"},{"location":"api/coil-base/coil.request/-parameters/#extension-functions","text":"Name Summary count Returns the number of parameters in this object. fun Parameters .count(): Int get Returns the value associated with key or null if key has no mapping. operator fun Parameters .get(key: String ): Any ? isNotEmpty Return true when the set contains elements. fun Parameters .isNotEmpty(): Boolean","title":"Extension Functions"},{"location":"api/coil-base/coil.request/-parameters/-e-m-p-t-y/","text":"coil-base / coil.request / Parameters / EMPTY EMPTY val EMPTY: Parameters","title":" e m p t y"},{"location":"api/coil-base/coil.request/-parameters/-e-m-p-t-y/#empty","text":"val EMPTY: Parameters","title":"EMPTY"},{"location":"api/coil-base/coil.request/-parameters/-init-/","text":"coil-base / coil.request / Parameters / init init Parameters()","title":" init "},{"location":"api/coil-base/coil.request/-parameters/-init-/#init","text":"Parameters()","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-parameters/cache-key/","text":"coil-base / coil.request / Parameters / cacheKey cacheKey fun cacheKey(key: String ): String ? Returns the cache key associated with key or null if key has no mapping.","title":"Cache key"},{"location":"api/coil-base/coil.request/-parameters/cache-key/#cachekey","text":"fun cacheKey(key: String ): String ? Returns the cache key associated with key or null if key has no mapping.","title":"cacheKey"},{"location":"api/coil-base/coil.request/-parameters/cache-keys/","text":"coil-base / coil.request / Parameters / cacheKeys cacheKeys fun cacheKeys(): Map String , String Returns a map of keys to non null cache keys. Parameters with a null cache key are filtered out.","title":"Cache keys"},{"location":"api/coil-base/coil.request/-parameters/cache-keys/#cachekeys","text":"fun cacheKeys(): Map String , String Returns a map of keys to non null cache keys. Parameters with a null cache key are filtered out.","title":"cacheKeys"},{"location":"api/coil-base/coil.request/-parameters/entry/","text":"coil-base / coil.request / Parameters / entry entry fun entry(key: String ): Entry? Returns the entry associated with key or null if key has no mapping.","title":"Entry"},{"location":"api/coil-base/coil.request/-parameters/entry/#entry","text":"fun entry(key: String ): Entry? Returns the entry associated with key or null if key has no mapping.","title":"entry"},{"location":"api/coil-base/coil.request/-parameters/equals/","text":"coil-base / coil.request / Parameters / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/coil-base/coil.request/-parameters/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/coil-base/coil.request/-parameters/hash-code/","text":"coil-base / coil.request / Parameters / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"api/coil-base/coil.request/-parameters/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"api/coil-base/coil.request/-parameters/is-empty/","text":"coil-base / coil.request / Parameters / isEmpty isEmpty fun isEmpty(): Boolean Returns true if this object has no parameters.","title":"Is empty"},{"location":"api/coil-base/coil.request/-parameters/is-empty/#isempty","text":"fun isEmpty(): Boolean Returns true if this object has no parameters.","title":"isEmpty"},{"location":"api/coil-base/coil.request/-parameters/iterator/","text":"coil-base / coil.request / Parameters / iterator iterator operator fun iterator(): Iterator Pair String , Entry Returns an Iterator over the entries in the Parameters .","title":"Iterator"},{"location":"api/coil-base/coil.request/-parameters/iterator/#iterator","text":"operator fun iterator(): Iterator Pair String , Entry Returns an Iterator over the entries in the Parameters .","title":"iterator"},{"location":"api/coil-base/coil.request/-parameters/new-builder/","text":"coil-base / coil.request / Parameters / newBuilder newBuilder fun newBuilder(): Builder","title":"New builder"},{"location":"api/coil-base/coil.request/-parameters/new-builder/#newbuilder","text":"fun newBuilder(): Builder","title":"newBuilder"},{"location":"api/coil-base/coil.request/-parameters/size/","text":"coil-base / coil.request / Parameters / size size val size: Int Returns the number of parameters in this object.","title":"Size"},{"location":"api/coil-base/coil.request/-parameters/size/#size","text":"val size: Int Returns the number of parameters in this object.","title":"size"},{"location":"api/coil-base/coil.request/-parameters/to-string/","text":"coil-base / coil.request / Parameters / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.request/-parameters/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.request/-parameters/value/","text":"coil-base / coil.request / Parameters / value value fun value(key: String ): Any ? Returns the value associated with key or null if key has no mapping.","title":"Value"},{"location":"api/coil-base/coil.request/-parameters/value/#value","text":"fun value(key: String ): Any ? Returns the value associated with key or null if key has no mapping.","title":"value"},{"location":"api/coil-base/coil.request/-parameters/values/","text":"coil-base / coil.request / Parameters / values values fun values(): Map String , Any ? Returns a map of keys to values.","title":"Values"},{"location":"api/coil-base/coil.request/-parameters/values/#values","text":"fun values(): Map String , Any ? Returns a map of keys to values.","title":"values"},{"location":"api/coil-base/coil.request/-parameters/-builder/","text":"coil-base / coil.request / Parameters / Builder Builder class Builder Constructors Name Summary init Builder() Builder(parameters: Parameters ) Functions Name Summary build Create a new Parameters instance. fun build(): Parameters remove Remove a parameter. fun remove(key: String ): Builder set Set a parameter. fun set(key: String , value: Any ?, cacheKey: String ? = value?.toString()): Builder","title":"Home"},{"location":"api/coil-base/coil.request/-parameters/-builder/#builder","text":"class Builder","title":"Builder"},{"location":"api/coil-base/coil.request/-parameters/-builder/#constructors","text":"Name Summary init Builder() Builder(parameters: Parameters )","title":"Constructors"},{"location":"api/coil-base/coil.request/-parameters/-builder/#functions","text":"Name Summary build Create a new Parameters instance. fun build(): Parameters remove Remove a parameter. fun remove(key: String ): Builder set Set a parameter. fun set(key: String , value: Any ?, cacheKey: String ? = value?.toString()): Builder","title":"Functions"},{"location":"api/coil-base/coil.request/-parameters/-builder/-init-/","text":"coil-base / coil.request / Parameters / Builder / init init Builder() Builder(parameters: Parameters )","title":" init "},{"location":"api/coil-base/coil.request/-parameters/-builder/-init-/#init","text":"Builder() Builder(parameters: Parameters )","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-parameters/-builder/build/","text":"coil-base / coil.request / Parameters / Builder / build build fun build(): Parameters Create a new Parameters instance.","title":"Build"},{"location":"api/coil-base/coil.request/-parameters/-builder/build/#build","text":"fun build(): Parameters Create a new Parameters instance.","title":"build"},{"location":"api/coil-base/coil.request/-parameters/-builder/remove/","text":"coil-base / coil.request / Parameters / Builder / remove remove fun remove(key: String ): Builder Remove a parameter. Parameters key - The parameter's key.","title":"Remove"},{"location":"api/coil-base/coil.request/-parameters/-builder/remove/#remove","text":"fun remove(key: String ): Builder Remove a parameter.","title":"remove"},{"location":"api/coil-base/coil.request/-parameters/-builder/remove/#parameters","text":"key - The parameter's key.","title":"Parameters"},{"location":"api/coil-base/coil.request/-parameters/-builder/set/","text":"coil-base / coil.request / Parameters / Builder / set set @JvmOverloads fun set(key: String , value: Any ?, cacheKey: String ? = value?.toString()): Builder Set a parameter. Parameters key - The parameter's key. value - The parameter's value. cacheKey - The parameter's cache key. If not null, this value will be added to a request's cache key.","title":"Set"},{"location":"api/coil-base/coil.request/-parameters/-builder/set/#set","text":"@JvmOverloads fun set(key: String , value: Any ?, cacheKey: String ? = value?.toString()): Builder Set a parameter.","title":"set"},{"location":"api/coil-base/coil.request/-parameters/-builder/set/#parameters","text":"key - The parameter's key. value - The parameter's value. cacheKey - The parameter's cache key. If not null, this value will be added to a request's cache key.","title":"Parameters"},{"location":"api/coil-base/coil.request/-parameters/-entry/","text":"coil-base / coil.request / Parameters / Entry Entry data class Entry Constructors Name Summary init Entry(value: Any ?, cacheKey: String ?) Properties Name Summary cacheKey val cacheKey: String ? value val value: Any ?","title":"Home"},{"location":"api/coil-base/coil.request/-parameters/-entry/#entry","text":"data class Entry","title":"Entry"},{"location":"api/coil-base/coil.request/-parameters/-entry/#constructors","text":"Name Summary init Entry(value: Any ?, cacheKey: String ?)","title":"Constructors"},{"location":"api/coil-base/coil.request/-parameters/-entry/#properties","text":"Name Summary cacheKey val cacheKey: String ? value val value: Any ?","title":"Properties"},{"location":"api/coil-base/coil.request/-parameters/-entry/-init-/","text":"coil-base / coil.request / Parameters / Entry / init init Entry(value: Any ?, cacheKey: String ?)","title":" init "},{"location":"api/coil-base/coil.request/-parameters/-entry/-init-/#init","text":"Entry(value: Any ?, cacheKey: String ?)","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-parameters/-entry/cache-key/","text":"coil-base / coil.request / Parameters / Entry / cacheKey cacheKey val cacheKey: String ?","title":"Cache key"},{"location":"api/coil-base/coil.request/-parameters/-entry/cache-key/#cachekey","text":"val cacheKey: String ?","title":"cacheKey"},{"location":"api/coil-base/coil.request/-parameters/-entry/value/","text":"coil-base / coil.request / Parameters / Entry / value value val value: Any ?","title":"Value"},{"location":"api/coil-base/coil.request/-parameters/-entry/value/#value","text":"val value: Any ?","title":"value"},{"location":"api/coil-base/coil.request/-success-result/","text":"coil-base / coil.request / SuccessResult SuccessResult data class SuccessResult : ImageResult Indicates that the request completed successfully. Parameters drawable - The success drawable. request - The request that was executed to create this result. metadata - Metadata about the request that created this result. Constructors Name Summary init Indicates that the request completed successfully. SuccessResult(drawable: Drawable , request: ImageRequest , metadata: Metadata) Properties Name Summary drawable The success drawable. val drawable: Drawable metadata Metadata about the request that created this result. val metadata: Metadata request The request that was executed to create this result. val request: ImageRequest","title":"Home"},{"location":"api/coil-base/coil.request/-success-result/#successresult","text":"data class SuccessResult : ImageResult Indicates that the request completed successfully.","title":"SuccessResult"},{"location":"api/coil-base/coil.request/-success-result/#parameters","text":"drawable - The success drawable. request - The request that was executed to create this result. metadata - Metadata about the request that created this result.","title":"Parameters"},{"location":"api/coil-base/coil.request/-success-result/#constructors","text":"Name Summary init Indicates that the request completed successfully. SuccessResult(drawable: Drawable , request: ImageRequest , metadata: Metadata)","title":"Constructors"},{"location":"api/coil-base/coil.request/-success-result/#properties","text":"Name Summary drawable The success drawable. val drawable: Drawable metadata Metadata about the request that created this result. val metadata: Metadata request The request that was executed to create this result. val request: ImageRequest","title":"Properties"},{"location":"api/coil-base/coil.request/-success-result/-init-/","text":"coil-base / coil.request / SuccessResult / init init SuccessResult(drawable: Drawable , request: ImageRequest , metadata: Metadata) Indicates that the request completed successfully. Parameters drawable - The success drawable. request - The request that was executed to create this result. metadata - Metadata about the request that created this result.","title":" init "},{"location":"api/coil-base/coil.request/-success-result/-init-/#init","text":"SuccessResult(drawable: Drawable , request: ImageRequest , metadata: Metadata) Indicates that the request completed successfully.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.request/-success-result/-init-/#parameters","text":"drawable - The success drawable. request - The request that was executed to create this result. metadata - Metadata about the request that created this result.","title":"Parameters"},{"location":"api/coil-base/coil.request/-success-result/drawable/","text":"coil-base / coil.request / SuccessResult / drawable drawable val drawable: Drawable The success drawable.","title":"Drawable"},{"location":"api/coil-base/coil.request/-success-result/drawable/#drawable","text":"val drawable: Drawable The success drawable.","title":"drawable"},{"location":"api/coil-base/coil.request/-success-result/metadata/","text":"coil-base / coil.request / SuccessResult / metadata metadata val metadata: Metadata Metadata about the request that created this result.","title":"Metadata"},{"location":"api/coil-base/coil.request/-success-result/metadata/#metadata","text":"val metadata: Metadata Metadata about the request that created this result.","title":"metadata"},{"location":"api/coil-base/coil.request/-success-result/request/","text":"coil-base / coil.request / SuccessResult / request request val request: ImageRequest The request that was executed to create this result.","title":"Request"},{"location":"api/coil-base/coil.request/-success-result/request/#request","text":"val request: ImageRequest The request that was executed to create this result.","title":"request"},{"location":"api/coil-base/coil.size/","text":"coil-base / coil.size Package coil.size Types Name Summary DisplaySizeResolver A SizeResolver that measures the size of the display. class DisplaySizeResolver : SizeResolver OriginalSize Represents the width and height of the source image. object OriginalSize : Size PixelSize A positive width and height in pixels. data class PixelSize : Size Precision Represents the required precision for the size of an image in an image request. enum class Precision Scale Represents a scaling policy. enum class Scale Size Represents the target size of an image request. sealed class Size : Parcelable SizeResolver An interface for measuring the target size for an image request. interface SizeResolver ViewSizeResolver A SizeResolver that measures the size of a View . interface ViewSizeResolver T : View : SizeResolver","title":"Home"},{"location":"api/coil-base/coil.size/#package-coilsize","text":"","title":"Package coil.size"},{"location":"api/coil-base/coil.size/#types","text":"Name Summary DisplaySizeResolver A SizeResolver that measures the size of the display. class DisplaySizeResolver : SizeResolver OriginalSize Represents the width and height of the source image. object OriginalSize : Size PixelSize A positive width and height in pixels. data class PixelSize : Size Precision Represents the required precision for the size of an image in an image request. enum class Precision Scale Represents a scaling policy. enum class Scale Size Represents the target size of an image request. sealed class Size : Parcelable SizeResolver An interface for measuring the target size for an image request. interface SizeResolver ViewSizeResolver A SizeResolver that measures the size of a View . interface ViewSizeResolver T : View : SizeResolver","title":"Types"},{"location":"api/coil-base/coil.size/-size/","text":"coil-base / coil.size / Size Size sealed class Size : Parcelable Represents the target size of an image request. See Also ImageRequest.Builder.size SizeResolver.size Inheritors Name Summary OriginalSize Represents the width and height of the source image. object OriginalSize : Size PixelSize A positive width and height in pixels. data class PixelSize : Size","title":" size"},{"location":"api/coil-base/coil.size/-size/#size","text":"sealed class Size : Parcelable Represents the target size of an image request. See Also ImageRequest.Builder.size SizeResolver.size","title":"Size"},{"location":"api/coil-base/coil.size/-size/#inheritors","text":"Name Summary OriginalSize Represents the width and height of the source image. object OriginalSize : Size PixelSize A positive width and height in pixels. data class PixelSize : Size","title":"Inheritors"},{"location":"api/coil-base/coil.size/-display-size-resolver/","text":"coil-base / coil.size / DisplaySizeResolver DisplaySizeResolver class DisplaySizeResolver : SizeResolver A SizeResolver that measures the size of the display. This is used as the fallback SizeResolver for ImageRequest s. Constructors Name Summary init A SizeResolver that measures the size of the display. DisplaySizeResolver(context: Context ) Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int size Return the Size that the image should be loaded at. suspend fun size(): Size toString fun toString(): String","title":"Home"},{"location":"api/coil-base/coil.size/-display-size-resolver/#displaysizeresolver","text":"class DisplaySizeResolver : SizeResolver A SizeResolver that measures the size of the display. This is used as the fallback SizeResolver for ImageRequest s.","title":"DisplaySizeResolver"},{"location":"api/coil-base/coil.size/-display-size-resolver/#constructors","text":"Name Summary init A SizeResolver that measures the size of the display. DisplaySizeResolver(context: Context )","title":"Constructors"},{"location":"api/coil-base/coil.size/-display-size-resolver/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int size Return the Size that the image should be loaded at. suspend fun size(): Size toString fun toString(): String","title":"Functions"},{"location":"api/coil-base/coil.size/-display-size-resolver/-init-/","text":"coil-base / coil.size / DisplaySizeResolver / init init DisplaySizeResolver(context: Context ) A SizeResolver that measures the size of the display. This is used as the fallback SizeResolver for ImageRequest s.","title":" init "},{"location":"api/coil-base/coil.size/-display-size-resolver/-init-/#init","text":"DisplaySizeResolver(context: Context ) A SizeResolver that measures the size of the display. This is used as the fallback SizeResolver for ImageRequest s.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.size/-display-size-resolver/equals/","text":"coil-base / coil.size / DisplaySizeResolver / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/coil-base/coil.size/-display-size-resolver/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/coil-base/coil.size/-display-size-resolver/hash-code/","text":"coil-base / coil.size / DisplaySizeResolver / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"api/coil-base/coil.size/-display-size-resolver/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"api/coil-base/coil.size/-display-size-resolver/size/","text":"coil-base / coil.size / DisplaySizeResolver / size size suspend fun size(): Size Return the Size that the image should be loaded at.","title":"Size"},{"location":"api/coil-base/coil.size/-display-size-resolver/size/#size","text":"suspend fun size(): Size Return the Size that the image should be loaded at.","title":"size"},{"location":"api/coil-base/coil.size/-display-size-resolver/to-string/","text":"coil-base / coil.size / DisplaySizeResolver / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.size/-display-size-resolver/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.size/-original-size/","text":"coil-base / coil.size / OriginalSize OriginalSize object OriginalSize : Size Represents the width and height of the source image. Functions Name Summary toString fun toString(): String","title":"Home"},{"location":"api/coil-base/coil.size/-original-size/#originalsize","text":"object OriginalSize : Size Represents the width and height of the source image.","title":"OriginalSize"},{"location":"api/coil-base/coil.size/-original-size/#functions","text":"Name Summary toString fun toString(): String","title":"Functions"},{"location":"api/coil-base/coil.size/-original-size/to-string/","text":"coil-base / coil.size / OriginalSize / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.size/-original-size/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.size/-pixel-size/","text":"coil-base / coil.size / PixelSize PixelSize data class PixelSize : Size A positive width and height in pixels. Constructors Name Summary init A positive width and height in pixels. PixelSize(width: Int , height: Int ) Properties Name Summary height val height: Int width val width: Int","title":"Home"},{"location":"api/coil-base/coil.size/-pixel-size/#pixelsize","text":"data class PixelSize : Size A positive width and height in pixels.","title":"PixelSize"},{"location":"api/coil-base/coil.size/-pixel-size/#constructors","text":"Name Summary init A positive width and height in pixels. PixelSize(width: Int , height: Int )","title":"Constructors"},{"location":"api/coil-base/coil.size/-pixel-size/#properties","text":"Name Summary height val height: Int width val width: Int","title":"Properties"},{"location":"api/coil-base/coil.size/-pixel-size/-init-/","text":"coil-base / coil.size / PixelSize / init init PixelSize(@Px width: Int , @Px height: Int ) A positive width and height in pixels.","title":" init "},{"location":"api/coil-base/coil.size/-pixel-size/-init-/#init","text":"PixelSize(@Px width: Int , @Px height: Int ) A positive width and height in pixels.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.size/-pixel-size/height/","text":"coil-base / coil.size / PixelSize / height height val height: Int","title":"Height"},{"location":"api/coil-base/coil.size/-pixel-size/height/#height","text":"val height: Int","title":"height"},{"location":"api/coil-base/coil.size/-pixel-size/width/","text":"coil-base / coil.size / PixelSize / width width val width: Int","title":"Width"},{"location":"api/coil-base/coil.size/-pixel-size/width/#width","text":"val width: Int","title":"width"},{"location":"api/coil-base/coil.size/-precision/","text":"coil-base / coil.size / Precision Precision enum class Precision Represents the required precision for the size of an image in an image request. See Also ImageRequest.Builder.precision Enum Values Name Summary EXACT Require that the loaded image's dimensions match the request's size and scale exactly. INEXACT Allow the size of the loaded image to not match the requested dimensions exactly. This enables several optimizations: AUTOMATIC Allow Coil to automatically determine if the size needs to be exact for this request.","title":"Home"},{"location":"api/coil-base/coil.size/-precision/#precision","text":"enum class Precision Represents the required precision for the size of an image in an image request. See Also ImageRequest.Builder.precision","title":"Precision"},{"location":"api/coil-base/coil.size/-precision/#enum-values","text":"Name Summary EXACT Require that the loaded image's dimensions match the request's size and scale exactly. INEXACT Allow the size of the loaded image to not match the requested dimensions exactly. This enables several optimizations: AUTOMATIC Allow Coil to automatically determine if the size needs to be exact for this request.","title":"Enum Values"},{"location":"api/coil-base/coil.size/-precision/-a-u-t-o-m-a-t-i-c/","text":"coil-base / coil.size / Precision / AUTOMATIC AUTOMATIC AUTOMATIC Allow Coil to automatically determine if the size needs to be exact for this request.","title":" a u t o m a t i c"},{"location":"api/coil-base/coil.size/-precision/-a-u-t-o-m-a-t-i-c/#automatic","text":"AUTOMATIC Allow Coil to automatically determine if the size needs to be exact for this request.","title":"AUTOMATIC"},{"location":"api/coil-base/coil.size/-precision/-e-x-a-c-t/","text":"coil-base / coil.size / Precision / EXACT EXACT EXACT Require that the loaded image's dimensions match the request's size and scale exactly.","title":" e x a c t"},{"location":"api/coil-base/coil.size/-precision/-e-x-a-c-t/#exact","text":"EXACT Require that the loaded image's dimensions match the request's size and scale exactly.","title":"EXACT"},{"location":"api/coil-base/coil.size/-precision/-i-n-e-x-a-c-t/","text":"coil-base / coil.size / Precision / INEXACT INEXACT INEXACT Allow the size of the loaded image to not match the requested dimensions exactly. This enables several optimizations: If the requested dimensions are larger than the original size of the image, it will be loaded using its original dimensions. This uses less memory. If the image is present in the memory cache at a larger size than the request's dimensions, it will be returned. This increases the hit rate of the memory cache. Prefer this option if your target can scale the loaded image (e.g. ImageView ).","title":" i n e x a c t"},{"location":"api/coil-base/coil.size/-precision/-i-n-e-x-a-c-t/#inexact","text":"INEXACT Allow the size of the loaded image to not match the requested dimensions exactly. This enables several optimizations: If the requested dimensions are larger than the original size of the image, it will be loaded using its original dimensions. This uses less memory. If the image is present in the memory cache at a larger size than the request's dimensions, it will be returned. This increases the hit rate of the memory cache. Prefer this option if your target can scale the loaded image (e.g. ImageView ).","title":"INEXACT"},{"location":"api/coil-base/coil.size/-scale/","text":"coil-base / coil.size / Scale Scale enum class Scale Represents a scaling policy. Conceptually, you can think of this as ImageView.ScaleType without any knowledge of an image's gravity in the view. See Also ImageRequest.Builder.scale Enum Values Name Summary FILL Fill the image in the view such that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view. FIT Fit the image to the view so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view.","title":"Home"},{"location":"api/coil-base/coil.size/-scale/#scale","text":"enum class Scale Represents a scaling policy. Conceptually, you can think of this as ImageView.ScaleType without any knowledge of an image's gravity in the view. See Also ImageRequest.Builder.scale","title":"Scale"},{"location":"api/coil-base/coil.size/-scale/#enum-values","text":"Name Summary FILL Fill the image in the view such that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view. FIT Fit the image to the view so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view.","title":"Enum Values"},{"location":"api/coil-base/coil.size/-scale/-f-i-l-l/","text":"coil-base / coil.size / Scale / FILL FILL FILL Fill the image in the view such that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view.","title":" f i l l"},{"location":"api/coil-base/coil.size/-scale/-f-i-l-l/#fill","text":"FILL Fill the image in the view such that both dimensions (width and height) of the image will be equal to or larger than the corresponding dimension of the view.","title":"FILL"},{"location":"api/coil-base/coil.size/-scale/-f-i-t/","text":"coil-base / coil.size / Scale / FIT FIT FIT Fit the image to the view so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view. Generally, this is the default value for functions that accept a Scale .","title":" f i t"},{"location":"api/coil-base/coil.size/-scale/-f-i-t/#fit","text":"FIT Fit the image to the view so that both dimensions (width and height) of the image will be equal to or less than the corresponding dimension of the view. Generally, this is the default value for functions that accept a Scale .","title":"FIT"},{"location":"api/coil-base/coil.size/-size-resolver/","text":"coil-base / coil.size / SizeResolver SizeResolver interface SizeResolver An interface for measuring the target size for an image request. See Also ImageRequest.Builder.size Functions Name Summary size Return the Size that the image should be loaded at. abstract suspend fun size(): Size Companion Object Functions Name Summary invoke Create a SizeResolver with a fixed size . operator fun invoke(size: Size ): SizeResolver Inheritors Name Summary DisplaySizeResolver A SizeResolver that measures the size of the display. class DisplaySizeResolver : SizeResolver ViewSizeResolver A SizeResolver that measures the size of a View . interface ViewSizeResolver T : View : SizeResolver","title":"Home"},{"location":"api/coil-base/coil.size/-size-resolver/#sizeresolver","text":"interface SizeResolver An interface for measuring the target size for an image request. See Also ImageRequest.Builder.size","title":"SizeResolver"},{"location":"api/coil-base/coil.size/-size-resolver/#functions","text":"Name Summary size Return the Size that the image should be loaded at. abstract suspend fun size(): Size","title":"Functions"},{"location":"api/coil-base/coil.size/-size-resolver/#companion-object-functions","text":"Name Summary invoke Create a SizeResolver with a fixed size . operator fun invoke(size: Size ): SizeResolver","title":"Companion Object Functions"},{"location":"api/coil-base/coil.size/-size-resolver/#inheritors","text":"Name Summary DisplaySizeResolver A SizeResolver that measures the size of the display. class DisplaySizeResolver : SizeResolver ViewSizeResolver A SizeResolver that measures the size of a View . interface ViewSizeResolver T : View : SizeResolver","title":"Inheritors"},{"location":"api/coil-base/coil.size/-size-resolver/invoke/","text":"coil-base / coil.size / SizeResolver / invoke invoke @JvmStatic @JvmName(\"create\") operator fun invoke(size: Size ): SizeResolver Create a SizeResolver with a fixed size .","title":"Invoke"},{"location":"api/coil-base/coil.size/-size-resolver/invoke/#invoke","text":"@JvmStatic @JvmName(\"create\") operator fun invoke(size: Size ): SizeResolver Create a SizeResolver with a fixed size .","title":"invoke"},{"location":"api/coil-base/coil.size/-size-resolver/size/","text":"coil-base / coil.size / SizeResolver / size size @MainThread abstract suspend fun size(): Size Return the Size that the image should be loaded at.","title":"Size"},{"location":"api/coil-base/coil.size/-size-resolver/size/#size","text":"@MainThread abstract suspend fun size(): Size Return the Size that the image should be loaded at.","title":"size"},{"location":"api/coil-base/coil.size/-view-size-resolver/","text":"coil-base / coil.size / ViewSizeResolver ViewSizeResolver interface ViewSizeResolver T : View : SizeResolver A SizeResolver that measures the size of a View . Properties Name Summary subtractPadding If true, the view 's padding will be subtracted from its size. open val subtractPadding: Boolean view The View to measure. This field should be immutable. abstract val view: T Functions Name Summary size Return the Size that the image should be loaded at. open suspend fun size(): Size Companion Object Functions Name Summary invoke Create a ViewSizeResolver using the default View measurement implementation. operator fun T : View invoke(view: T, subtractPadding: Boolean = true): ViewSizeResolver T","title":"Home"},{"location":"api/coil-base/coil.size/-view-size-resolver/#viewsizeresolver","text":"interface ViewSizeResolver T : View : SizeResolver A SizeResolver that measures the size of a View .","title":"ViewSizeResolver"},{"location":"api/coil-base/coil.size/-view-size-resolver/#properties","text":"Name Summary subtractPadding If true, the view 's padding will be subtracted from its size. open val subtractPadding: Boolean view The View to measure. This field should be immutable. abstract val view: T","title":"Properties"},{"location":"api/coil-base/coil.size/-view-size-resolver/#functions","text":"Name Summary size Return the Size that the image should be loaded at. open suspend fun size(): Size","title":"Functions"},{"location":"api/coil-base/coil.size/-view-size-resolver/#companion-object-functions","text":"Name Summary invoke Create a ViewSizeResolver using the default View measurement implementation. operator fun T : View invoke(view: T, subtractPadding: Boolean = true): ViewSizeResolver T","title":"Companion Object Functions"},{"location":"api/coil-base/coil.size/-view-size-resolver/invoke/","text":"coil-base / coil.size / ViewSizeResolver / invoke invoke @JvmStatic @JvmOverloads @JvmName(\"create\") operator fun T : View invoke(view: T, subtractPadding: Boolean = true): ViewSizeResolver T Create a ViewSizeResolver using the default View measurement implementation. Parameters view - The view to measure. subtractPadding - If true, the view's padding will be subtracted from its size.","title":"Invoke"},{"location":"api/coil-base/coil.size/-view-size-resolver/invoke/#invoke","text":"@JvmStatic @JvmOverloads @JvmName(\"create\") operator fun T : View invoke(view: T, subtractPadding: Boolean = true): ViewSizeResolver T Create a ViewSizeResolver using the default View measurement implementation.","title":"invoke"},{"location":"api/coil-base/coil.size/-view-size-resolver/invoke/#parameters","text":"view - The view to measure. subtractPadding - If true, the view's padding will be subtracted from its size.","title":"Parameters"},{"location":"api/coil-base/coil.size/-view-size-resolver/size/","text":"coil-base / coil.size / ViewSizeResolver / size size open suspend fun size(): Size Return the Size that the image should be loaded at.","title":"Size"},{"location":"api/coil-base/coil.size/-view-size-resolver/size/#size","text":"open suspend fun size(): Size Return the Size that the image should be loaded at.","title":"size"},{"location":"api/coil-base/coil.size/-view-size-resolver/subtract-padding/","text":"coil-base / coil.size / ViewSizeResolver / subtractPadding subtractPadding open val subtractPadding: Boolean If true, the view 's padding will be subtracted from its size.","title":"Subtract padding"},{"location":"api/coil-base/coil.size/-view-size-resolver/subtract-padding/#subtractpadding","text":"open val subtractPadding: Boolean If true, the view 's padding will be subtracted from its size.","title":"subtractPadding"},{"location":"api/coil-base/coil.size/-view-size-resolver/view/","text":"coil-base / coil.size / ViewSizeResolver / view view abstract val view: T The View to measure. This field should be immutable.","title":"View"},{"location":"api/coil-base/coil.size/-view-size-resolver/view/#view","text":"abstract val view: T The View to measure. This field should be immutable.","title":"view"},{"location":"api/coil-base/coil.target/","text":"coil-base / coil.target Package coil.target Types Name Summary ImageViewTarget A Target that handles setting images on an ImageView . open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget , DefaultLifecycleObserver PoolableViewTarget A ViewTarget that supports Bitmap pooling. interface PoolableViewTarget T : View : ViewTarget T Target A listener that accepts the result of an image request. interface Target ViewTarget A Target with an associated View . Prefer this to Target if the given drawables will only be used by view . interface ViewTarget T : View : Target","title":"Home"},{"location":"api/coil-base/coil.target/#package-coiltarget","text":"","title":"Package coil.target"},{"location":"api/coil-base/coil.target/#types","text":"Name Summary ImageViewTarget A Target that handles setting images on an ImageView . open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget , DefaultLifecycleObserver PoolableViewTarget A ViewTarget that supports Bitmap pooling. interface PoolableViewTarget T : View : ViewTarget T Target A listener that accepts the result of an image request. interface Target ViewTarget A Target with an associated View . Prefer this to Target if the given drawables will only be used by view . interface ViewTarget T : View : Target","title":"Types"},{"location":"api/coil-base/coil.target/-image-view-target/","text":"coil-base / coil.target / ImageViewTarget ImageViewTarget open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget , DefaultLifecycleObserver A Target that handles setting images on an ImageView . Constructors Name Summary init A Target that handles setting images on an ImageView . ImageViewTarget(view: ImageView ) Properties Name Summary drawable The view 's current Drawable . open val drawable: Drawable ? view The View used by this Target . This field should be immutable. open val view: ImageView Functions Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int onClear Called when the current drawable is no longer usable. Targets must stop using the current Drawable. open fun onClear(): Unit onError Called if an error occurs while executing the request. open fun onError(error: Drawable ?): Unit onStart Called when the request starts. open fun onStart(placeholder: Drawable ?): Unit open fun onStart(owner: LifecycleOwner ): Unit onStop open fun onStop(owner: LifecycleOwner ): Unit onSuccess Called if the request completes successfully. open fun onSuccess(result: Drawable ): Unit setDrawable Replace the ImageView 's current drawable with drawable . open fun setDrawable(drawable: Drawable ?): Unit toString open fun toString(): String updateAnimation Start/stop the current Drawable 's animation based on the current lifecycle state. open fun updateAnimation(): Unit","title":"Home"},{"location":"api/coil-base/coil.target/-image-view-target/#imageviewtarget","text":"open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget , DefaultLifecycleObserver A Target that handles setting images on an ImageView .","title":"ImageViewTarget"},{"location":"api/coil-base/coil.target/-image-view-target/#constructors","text":"Name Summary init A Target that handles setting images on an ImageView . ImageViewTarget(view: ImageView )","title":"Constructors"},{"location":"api/coil-base/coil.target/-image-view-target/#properties","text":"Name Summary drawable The view 's current Drawable . open val drawable: Drawable ? view The View used by this Target . This field should be immutable. open val view: ImageView","title":"Properties"},{"location":"api/coil-base/coil.target/-image-view-target/#functions","text":"Name Summary equals open fun equals(other: Any ?): Boolean hashCode open fun hashCode(): Int onClear Called when the current drawable is no longer usable. Targets must stop using the current Drawable. open fun onClear(): Unit onError Called if an error occurs while executing the request. open fun onError(error: Drawable ?): Unit onStart Called when the request starts. open fun onStart(placeholder: Drawable ?): Unit open fun onStart(owner: LifecycleOwner ): Unit onStop open fun onStop(owner: LifecycleOwner ): Unit onSuccess Called if the request completes successfully. open fun onSuccess(result: Drawable ): Unit setDrawable Replace the ImageView 's current drawable with drawable . open fun setDrawable(drawable: Drawable ?): Unit toString open fun toString(): String updateAnimation Start/stop the current Drawable 's animation based on the current lifecycle state. open fun updateAnimation(): Unit","title":"Functions"},{"location":"api/coil-base/coil.target/-image-view-target/-init-/","text":"coil-base / coil.target / ImageViewTarget / init init ImageViewTarget(view: ImageView ) A Target that handles setting images on an ImageView .","title":" init "},{"location":"api/coil-base/coil.target/-image-view-target/-init-/#init","text":"ImageViewTarget(view: ImageView ) A Target that handles setting images on an ImageView .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.target/-image-view-target/drawable/","text":"coil-base / coil.target / ImageViewTarget / drawable drawable open val drawable: Drawable ? The view 's current Drawable .","title":"Drawable"},{"location":"api/coil-base/coil.target/-image-view-target/drawable/#drawable","text":"open val drawable: Drawable ? The view 's current Drawable .","title":"drawable"},{"location":"api/coil-base/coil.target/-image-view-target/equals/","text":"coil-base / coil.target / ImageViewTarget / equals equals open fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/coil-base/coil.target/-image-view-target/equals/#equals","text":"open fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/coil-base/coil.target/-image-view-target/hash-code/","text":"coil-base / coil.target / ImageViewTarget / hashCode hashCode open fun hashCode(): Int","title":"Hash code"},{"location":"api/coil-base/coil.target/-image-view-target/hash-code/#hashcode","text":"open fun hashCode(): Int","title":"hashCode"},{"location":"api/coil-base/coil.target/-image-view-target/on-clear/","text":"coil-base / coil.target / ImageViewTarget / onClear onClear open fun onClear(): Unit Called when the current drawable is no longer usable. Targets must stop using the current Drawable. In practice, this will only be called when the view is detached or about to be destroyed.","title":"On clear"},{"location":"api/coil-base/coil.target/-image-view-target/on-clear/#onclear","text":"open fun onClear(): Unit Called when the current drawable is no longer usable. Targets must stop using the current Drawable. In practice, this will only be called when the view is detached or about to be destroyed.","title":"onClear"},{"location":"api/coil-base/coil.target/-image-view-target/on-error/","text":"coil-base / coil.target / ImageViewTarget / onError onError open fun onError(error: Drawable ?): Unit Called if an error occurs while executing the request.","title":"On error"},{"location":"api/coil-base/coil.target/-image-view-target/on-error/#onerror","text":"open fun onError(error: Drawable ?): Unit Called if an error occurs while executing the request.","title":"onError"},{"location":"api/coil-base/coil.target/-image-view-target/on-start/","text":"coil-base / coil.target / ImageViewTarget / onStart onStart open fun onStart(placeholder: Drawable ?): Unit Called when the request starts. open fun onStart(owner: LifecycleOwner ): Unit","title":"On start"},{"location":"api/coil-base/coil.target/-image-view-target/on-start/#onstart","text":"open fun onStart(placeholder: Drawable ?): Unit Called when the request starts. open fun onStart(owner: LifecycleOwner ): Unit","title":"onStart"},{"location":"api/coil-base/coil.target/-image-view-target/on-stop/","text":"coil-base / coil.target / ImageViewTarget / onStop onStop open fun onStop(owner: LifecycleOwner ): Unit","title":"On stop"},{"location":"api/coil-base/coil.target/-image-view-target/on-stop/#onstop","text":"open fun onStop(owner: LifecycleOwner ): Unit","title":"onStop"},{"location":"api/coil-base/coil.target/-image-view-target/on-success/","text":"coil-base / coil.target / ImageViewTarget / onSuccess onSuccess open fun onSuccess(result: Drawable ): Unit Called if the request completes successfully.","title":"On success"},{"location":"api/coil-base/coil.target/-image-view-target/on-success/#onsuccess","text":"open fun onSuccess(result: Drawable ): Unit Called if the request completes successfully.","title":"onSuccess"},{"location":"api/coil-base/coil.target/-image-view-target/set-drawable/","text":"coil-base / coil.target / ImageViewTarget / setDrawable setDrawable protected open fun setDrawable(drawable: Drawable ?): Unit Replace the ImageView 's current drawable with drawable .","title":"Set drawable"},{"location":"api/coil-base/coil.target/-image-view-target/set-drawable/#setdrawable","text":"protected open fun setDrawable(drawable: Drawable ?): Unit Replace the ImageView 's current drawable with drawable .","title":"setDrawable"},{"location":"api/coil-base/coil.target/-image-view-target/to-string/","text":"coil-base / coil.target / ImageViewTarget / toString toString open fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.target/-image-view-target/to-string/#tostring","text":"open fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.target/-image-view-target/update-animation/","text":"coil-base / coil.target / ImageViewTarget / updateAnimation updateAnimation protected open fun updateAnimation(): Unit Start/stop the current Drawable 's animation based on the current lifecycle state.","title":"Update animation"},{"location":"api/coil-base/coil.target/-image-view-target/update-animation/#updateanimation","text":"protected open fun updateAnimation(): Unit Start/stop the current Drawable 's animation based on the current lifecycle state.","title":"updateAnimation"},{"location":"api/coil-base/coil.target/-image-view-target/view/","text":"coil-base / coil.target / ImageViewTarget / view view open val view: ImageView The View used by this Target . This field should be immutable.","title":"View"},{"location":"api/coil-base/coil.target/-image-view-target/view/#view","text":"open val view: ImageView The View used by this Target . This field should be immutable.","title":"view"},{"location":"api/coil-base/coil.target/-poolable-view-target/","text":"coil-base / coil.target / PoolableViewTarget PoolableViewTarget interface PoolableViewTarget T : View : ViewTarget T A ViewTarget that supports Bitmap pooling. Implementing PoolableViewTarget opts this target into bitmap pooling. This allows Coil to re-use Bitmap s given to this target, which can conserve memory by avoiding a new Bitmap allocation. To opt out of bitmap pooling, implement ViewTarget instead. Implementing PoolableViewTarget requires that you must stop using the previous Drawable as soon as the next PoolableViewTarget lifecycle method is called; one of: Target.onStart , Target.onSuccess , Target.onError , PoolableViewTarget.onClear . For example, a PoolableViewTarget must stop using the placeholder drawable from Target.onStart as soon as Target.onSuccess is called. Continuing to use the previous Drawable after the next lifecycle method is called can cause rendering issues and/or throw exceptions. See Also ViewTarget ImageViewTarget Functions Name Summary onClear Called when the current drawable is no longer usable. Targets must stop using the current Drawable. abstract fun onClear(): Unit Inheritors Name Summary ImageViewTarget A Target that handles setting images on an ImageView . open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget , DefaultLifecycleObserver","title":"Home"},{"location":"api/coil-base/coil.target/-poolable-view-target/#poolableviewtarget","text":"interface PoolableViewTarget T : View : ViewTarget T A ViewTarget that supports Bitmap pooling. Implementing PoolableViewTarget opts this target into bitmap pooling. This allows Coil to re-use Bitmap s given to this target, which can conserve memory by avoiding a new Bitmap allocation. To opt out of bitmap pooling, implement ViewTarget instead. Implementing PoolableViewTarget requires that you must stop using the previous Drawable as soon as the next PoolableViewTarget lifecycle method is called; one of: Target.onStart , Target.onSuccess , Target.onError , PoolableViewTarget.onClear . For example, a PoolableViewTarget must stop using the placeholder drawable from Target.onStart as soon as Target.onSuccess is called. Continuing to use the previous Drawable after the next lifecycle method is called can cause rendering issues and/or throw exceptions. See Also ViewTarget ImageViewTarget","title":"PoolableViewTarget"},{"location":"api/coil-base/coil.target/-poolable-view-target/#functions","text":"Name Summary onClear Called when the current drawable is no longer usable. Targets must stop using the current Drawable. abstract fun onClear(): Unit","title":"Functions"},{"location":"api/coil-base/coil.target/-poolable-view-target/#inheritors","text":"Name Summary ImageViewTarget A Target that handles setting images on an ImageView . open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget , DefaultLifecycleObserver","title":"Inheritors"},{"location":"api/coil-base/coil.target/-poolable-view-target/on-clear/","text":"coil-base / coil.target / PoolableViewTarget / onClear onClear @MainThread abstract fun onClear(): Unit Called when the current drawable is no longer usable. Targets must stop using the current Drawable. In practice, this will only be called when the view is detached or about to be destroyed.","title":"On clear"},{"location":"api/coil-base/coil.target/-poolable-view-target/on-clear/#onclear","text":"@MainThread abstract fun onClear(): Unit Called when the current drawable is no longer usable. Targets must stop using the current Drawable. In practice, this will only be called when the view is detached or about to be destroyed.","title":"onClear"},{"location":"api/coil-base/coil.target/-target/","text":"coil-base / coil.target / Target Target interface Target A listener that accepts the result of an image request. Functions Name Summary onError Called if an error occurs while executing the request. open fun onError(error: Drawable ?): Unit onStart Called when the request starts. open fun onStart(placeholder: Drawable ?): Unit onSuccess Called if the request completes successfully. open fun onSuccess(result: Drawable ): Unit Inheritors Name Summary TransitionTarget A Target that supports applying Transition s. interface TransitionTarget : Target ViewTarget A Target with an associated View . Prefer this to Target if the given drawables will only be used by view . interface ViewTarget T : View : Target","title":"Home"},{"location":"api/coil-base/coil.target/-target/#target","text":"interface Target A listener that accepts the result of an image request.","title":"Target"},{"location":"api/coil-base/coil.target/-target/#functions","text":"Name Summary onError Called if an error occurs while executing the request. open fun onError(error: Drawable ?): Unit onStart Called when the request starts. open fun onStart(placeholder: Drawable ?): Unit onSuccess Called if the request completes successfully. open fun onSuccess(result: Drawable ): Unit","title":"Functions"},{"location":"api/coil-base/coil.target/-target/#inheritors","text":"Name Summary TransitionTarget A Target that supports applying Transition s. interface TransitionTarget : Target ViewTarget A Target with an associated View . Prefer this to Target if the given drawables will only be used by view . interface ViewTarget T : View : Target","title":"Inheritors"},{"location":"api/coil-base/coil.target/-target/on-error/","text":"coil-base / coil.target / Target / onError onError @MainThread open fun onError(error: Drawable ?): Unit Called if an error occurs while executing the request.","title":"On error"},{"location":"api/coil-base/coil.target/-target/on-error/#onerror","text":"@MainThread open fun onError(error: Drawable ?): Unit Called if an error occurs while executing the request.","title":"onError"},{"location":"api/coil-base/coil.target/-target/on-start/","text":"coil-base / coil.target / Target / onStart onStart @MainThread open fun onStart(placeholder: Drawable ?): Unit Called when the request starts.","title":"On start"},{"location":"api/coil-base/coil.target/-target/on-start/#onstart","text":"@MainThread open fun onStart(placeholder: Drawable ?): Unit Called when the request starts.","title":"onStart"},{"location":"api/coil-base/coil.target/-target/on-success/","text":"coil-base / coil.target / Target / onSuccess onSuccess @MainThread open fun onSuccess(result: Drawable ): Unit Called if the request completes successfully.","title":"On success"},{"location":"api/coil-base/coil.target/-target/on-success/#onsuccess","text":"@MainThread open fun onSuccess(result: Drawable ): Unit Called if the request completes successfully.","title":"onSuccess"},{"location":"api/coil-base/coil.target/-view-target/","text":"coil-base / coil.target / ViewTarget ViewTarget interface ViewTarget T : View : Target A Target with an associated View . Prefer this to Target if the given drawables will only be used by view . Optionally, ViewTarget s can implement LifecycleObserver . They are automatically registered when the request starts and unregistered when the request completes. Properties Name Summary view The View used by this Target . This field should be immutable. abstract val view: T Inheritors Name Summary PoolableViewTarget A ViewTarget that supports Bitmap pooling. interface PoolableViewTarget T : View : ViewTarget T","title":"Home"},{"location":"api/coil-base/coil.target/-view-target/#viewtarget","text":"interface ViewTarget T : View : Target A Target with an associated View . Prefer this to Target if the given drawables will only be used by view . Optionally, ViewTarget s can implement LifecycleObserver . They are automatically registered when the request starts and unregistered when the request completes.","title":"ViewTarget"},{"location":"api/coil-base/coil.target/-view-target/#properties","text":"Name Summary view The View used by this Target . This field should be immutable. abstract val view: T","title":"Properties"},{"location":"api/coil-base/coil.target/-view-target/#inheritors","text":"Name Summary PoolableViewTarget A ViewTarget that supports Bitmap pooling. interface PoolableViewTarget T : View : ViewTarget T","title":"Inheritors"},{"location":"api/coil-base/coil.target/-view-target/view/","text":"coil-base / coil.target / ViewTarget / view view abstract val view: T The View used by this Target . This field should be immutable.","title":"View"},{"location":"api/coil-base/coil.target/-view-target/view/#view","text":"abstract val view: T The View used by this Target . This field should be immutable.","title":"view"},{"location":"api/coil-base/coil.transform/","text":"coil-base / coil.transform Package coil.transform Types Name Summary BlurTransformation A Transformation that applies a Gaussian blur to an image. class BlurTransformation : Transformation CircleCropTransformation A Transformation that crops an image using a centered circle as the mask. class CircleCropTransformation : Transformation GrayscaleTransformation A Transformation that converts an image to shades of gray. class GrayscaleTransformation : Transformation RoundedCornersTransformation A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. class RoundedCornersTransformation : Transformation Transformation An interface for making transformations to an image's pixel data. interface Transformation","title":"Home"},{"location":"api/coil-base/coil.transform/#package-coiltransform","text":"","title":"Package coil.transform"},{"location":"api/coil-base/coil.transform/#types","text":"Name Summary BlurTransformation A Transformation that applies a Gaussian blur to an image. class BlurTransformation : Transformation CircleCropTransformation A Transformation that crops an image using a centered circle as the mask. class CircleCropTransformation : Transformation GrayscaleTransformation A Transformation that converts an image to shades of gray. class GrayscaleTransformation : Transformation RoundedCornersTransformation A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. class RoundedCornersTransformation : Transformation Transformation An interface for making transformations to an image's pixel data. interface Transformation","title":"Types"},{"location":"api/coil-base/coil.transform/-blur-transformation/","text":"coil-base / coil.transform / BlurTransformation BlurTransformation @RequiresApi(18) class BlurTransformation : Transformation A Transformation that applies a Gaussian blur to an image. Parameters context - The Context used to create a RenderScript instance. radius - The radius of the blur. sampling - The sampling multiplier used to scale the image. Values 1 will downscale the image. Values between 0 and 1 will upscale the image. Constructors Name Summary init A Transformation that applies a Gaussian blur to an image. BlurTransformation(context: Context , radius: Float = DEFAULT_RADIUS, sampling: Float = DEFAULT_SAMPLING) Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int key Return a unique key for this transformation. fun key(): String toString fun toString(): String transform Apply the transformation to input and return the transformed Bitmap . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Home"},{"location":"api/coil-base/coil.transform/-blur-transformation/#blurtransformation","text":"@RequiresApi(18) class BlurTransformation : Transformation A Transformation that applies a Gaussian blur to an image.","title":"BlurTransformation"},{"location":"api/coil-base/coil.transform/-blur-transformation/#parameters","text":"context - The Context used to create a RenderScript instance. radius - The radius of the blur. sampling - The sampling multiplier used to scale the image. Values 1 will downscale the image. Values between 0 and 1 will upscale the image.","title":"Parameters"},{"location":"api/coil-base/coil.transform/-blur-transformation/#constructors","text":"Name Summary init A Transformation that applies a Gaussian blur to an image. BlurTransformation(context: Context , radius: Float = DEFAULT_RADIUS, sampling: Float = DEFAULT_SAMPLING)","title":"Constructors"},{"location":"api/coil-base/coil.transform/-blur-transformation/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int key Return a unique key for this transformation. fun key(): String toString fun toString(): String transform Apply the transformation to input and return the transformed Bitmap . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Functions"},{"location":"api/coil-base/coil.transform/-blur-transformation/-init-/","text":"coil-base / coil.transform / BlurTransformation / init init BlurTransformation(context: Context , radius: Float = DEFAULT_RADIUS, sampling: Float = DEFAULT_SAMPLING) A Transformation that applies a Gaussian blur to an image. Parameters context - The Context used to create a RenderScript instance. radius - The radius of the blur. sampling - The sampling multiplier used to scale the image. Values 1 will downscale the image. Values between 0 and 1 will upscale the image.","title":" init "},{"location":"api/coil-base/coil.transform/-blur-transformation/-init-/#init","text":"BlurTransformation(context: Context , radius: Float = DEFAULT_RADIUS, sampling: Float = DEFAULT_SAMPLING) A Transformation that applies a Gaussian blur to an image.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transform/-blur-transformation/-init-/#parameters","text":"context - The Context used to create a RenderScript instance. radius - The radius of the blur. sampling - The sampling multiplier used to scale the image. Values 1 will downscale the image. Values between 0 and 1 will upscale the image.","title":"Parameters"},{"location":"api/coil-base/coil.transform/-blur-transformation/equals/","text":"coil-base / coil.transform / BlurTransformation / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/coil-base/coil.transform/-blur-transformation/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/coil-base/coil.transform/-blur-transformation/hash-code/","text":"coil-base / coil.transform / BlurTransformation / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"api/coil-base/coil.transform/-blur-transformation/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"api/coil-base/coil.transform/-blur-transformation/key/","text":"coil-base / coil.transform / BlurTransformation / key key fun key(): String Return a unique key for this transformation. The key is added to the image request's memory cache key and should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-blur-transformation/key/#key","text":"fun key(): String Return a unique key for this transformation. The key is added to the image request's memory cache key and should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-blur-transformation/to-string/","text":"coil-base / coil.transform / BlurTransformation / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.transform/-blur-transformation/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.transform/-blur-transformation/transform/","text":"coil-base / coil.transform / BlurTransformation / transform transform suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input and return the transformed Bitmap . Parameters pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. Return The transformed Bitmap .","title":"Transform"},{"location":"api/coil-base/coil.transform/-blur-transformation/transform/#transform","text":"suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input and return the transformed Bitmap .","title":"transform"},{"location":"api/coil-base/coil.transform/-blur-transformation/transform/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. Return The transformed Bitmap .","title":"Parameters"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/","text":"coil-base / coil.transform / CircleCropTransformation CircleCropTransformation class CircleCropTransformation : Transformation A Transformation that crops an image using a centered circle as the mask. Constructors Name Summary init A Transformation that crops an image using a centered circle as the mask. CircleCropTransformation() Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int key Return a unique key for this transformation. fun key(): String toString fun toString(): String transform Apply the transformation to input and return the transformed Bitmap . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Home"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/#circlecroptransformation","text":"class CircleCropTransformation : Transformation A Transformation that crops an image using a centered circle as the mask.","title":"CircleCropTransformation"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/#constructors","text":"Name Summary init A Transformation that crops an image using a centered circle as the mask. CircleCropTransformation()","title":"Constructors"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int key Return a unique key for this transformation. fun key(): String toString fun toString(): String transform Apply the transformation to input and return the transformed Bitmap . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Functions"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/-init-/","text":"coil-base / coil.transform / CircleCropTransformation / init init CircleCropTransformation() A Transformation that crops an image using a centered circle as the mask.","title":" init "},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/-init-/#init","text":"CircleCropTransformation() A Transformation that crops an image using a centered circle as the mask.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/equals/","text":"coil-base / coil.transform / CircleCropTransformation / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/hash-code/","text":"coil-base / coil.transform / CircleCropTransformation / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/key/","text":"coil-base / coil.transform / CircleCropTransformation / key key fun key(): String Return a unique key for this transformation. The key is added to the image request's memory cache key and should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/key/#key","text":"fun key(): String Return a unique key for this transformation. The key is added to the image request's memory cache key and should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/to-string/","text":"coil-base / coil.transform / CircleCropTransformation / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/transform/","text":"coil-base / coil.transform / CircleCropTransformation / transform transform suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input and return the transformed Bitmap . Parameters pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. Return The transformed Bitmap .","title":"Transform"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/transform/#transform","text":"suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input and return the transformed Bitmap .","title":"transform"},{"location":"api/coil-base/coil.transform/-circle-crop-transformation/transform/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. Return The transformed Bitmap .","title":"Parameters"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/","text":"coil-base / coil.transform / GrayscaleTransformation GrayscaleTransformation class GrayscaleTransformation : Transformation A Transformation that converts an image to shades of gray. Constructors Name Summary init A Transformation that converts an image to shades of gray. GrayscaleTransformation() Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int key Return a unique key for this transformation. fun key(): String toString fun toString(): String transform Apply the transformation to input and return the transformed Bitmap . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Home"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/#grayscaletransformation","text":"class GrayscaleTransformation : Transformation A Transformation that converts an image to shades of gray.","title":"GrayscaleTransformation"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/#constructors","text":"Name Summary init A Transformation that converts an image to shades of gray. GrayscaleTransformation()","title":"Constructors"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int key Return a unique key for this transformation. fun key(): String toString fun toString(): String transform Apply the transformation to input and return the transformed Bitmap . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Functions"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/-init-/","text":"coil-base / coil.transform / GrayscaleTransformation / init init GrayscaleTransformation() A Transformation that converts an image to shades of gray.","title":" init "},{"location":"api/coil-base/coil.transform/-grayscale-transformation/-init-/#init","text":"GrayscaleTransformation() A Transformation that converts an image to shades of gray.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/equals/","text":"coil-base / coil.transform / GrayscaleTransformation / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/hash-code/","text":"coil-base / coil.transform / GrayscaleTransformation / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/key/","text":"coil-base / coil.transform / GrayscaleTransformation / key key fun key(): String Return a unique key for this transformation. The key is added to the image request's memory cache key and should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/key/#key","text":"fun key(): String Return a unique key for this transformation. The key is added to the image request's memory cache key and should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/to-string/","text":"coil-base / coil.transform / GrayscaleTransformation / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/transform/","text":"coil-base / coil.transform / GrayscaleTransformation / transform transform suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input and return the transformed Bitmap . Parameters pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. Return The transformed Bitmap .","title":"Transform"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/transform/#transform","text":"suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input and return the transformed Bitmap .","title":"transform"},{"location":"api/coil-base/coil.transform/-grayscale-transformation/transform/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. Return The transformed Bitmap .","title":"Parameters"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/","text":"coil-base / coil.transform / RoundedCornersTransformation RoundedCornersTransformation class RoundedCornersTransformation : Transformation A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. Parameters topLeft - The radius for the top left corner. topRight - The radius for the top right corner. bottomLeft - The radius for the bottom left corner. bottomRight - The radius for the bottom right corner. Constructors Name Summary init RoundedCornersTransformation(radius: Float ) A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. RoundedCornersTransformation(topLeft: Float = 0f, topRight: Float = 0f, bottomLeft: Float = 0f, bottomRight: Float = 0f) Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int key Return a unique key for this transformation. fun key(): String toString fun toString(): String transform Apply the transformation to input and return the transformed Bitmap . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Home"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/#roundedcornerstransformation","text":"class RoundedCornersTransformation : Transformation A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image.","title":"RoundedCornersTransformation"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/#parameters","text":"topLeft - The radius for the top left corner. topRight - The radius for the top right corner. bottomLeft - The radius for the bottom left corner. bottomRight - The radius for the bottom right corner.","title":"Parameters"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/#constructors","text":"Name Summary init RoundedCornersTransformation(radius: Float ) A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. RoundedCornersTransformation(topLeft: Float = 0f, topRight: Float = 0f, bottomLeft: Float = 0f, bottomRight: Float = 0f)","title":"Constructors"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int key Return a unique key for this transformation. fun key(): String toString fun toString(): String transform Apply the transformation to input and return the transformed Bitmap . suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Functions"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/-init-/","text":"coil-base / coil.transform / RoundedCornersTransformation / init init RoundedCornersTransformation(@Px radius: Float )``RoundedCornersTransformation(@Px topLeft: Float = 0f, @Px topRight: Float = 0f, @Px bottomLeft: Float = 0f, @Px bottomRight: Float = 0f) A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. Parameters topLeft - The radius for the top left corner. topRight - The radius for the top right corner. bottomLeft - The radius for the bottom left corner. bottomRight - The radius for the bottom right corner.","title":" init "},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/-init-/#init","text":"RoundedCornersTransformation(@Px radius: Float )``RoundedCornersTransformation(@Px topLeft: Float = 0f, @Px topRight: Float = 0f, @Px bottomLeft: Float = 0f, @Px bottomRight: Float = 0f) A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/-init-/#parameters","text":"topLeft - The radius for the top left corner. topRight - The radius for the top right corner. bottomLeft - The radius for the bottom left corner. bottomRight - The radius for the bottom right corner.","title":"Parameters"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/equals/","text":"coil-base / coil.transform / RoundedCornersTransformation / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/hash-code/","text":"coil-base / coil.transform / RoundedCornersTransformation / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/key/","text":"coil-base / coil.transform / RoundedCornersTransformation / key key fun key(): String Return a unique key for this transformation. The key is added to the image request's memory cache key and should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/key/#key","text":"fun key(): String Return a unique key for this transformation. The key is added to the image request's memory cache key and should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/to-string/","text":"coil-base / coil.transform / RoundedCornersTransformation / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/transform/","text":"coil-base / coil.transform / RoundedCornersTransformation / transform transform suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input and return the transformed Bitmap . Parameters pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. Return The transformed Bitmap .","title":"Transform"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/transform/#transform","text":"suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input and return the transformed Bitmap .","title":"transform"},{"location":"api/coil-base/coil.transform/-rounded-corners-transformation/transform/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. Return The transformed Bitmap .","title":"Parameters"},{"location":"api/coil-base/coil.transform/-transformation/","text":"coil-base / coil.transform / Transformation Transformation interface Transformation An interface for making transformations to an image's pixel data. NOTE: If DrawableResult.drawable or DecodeResult.drawable is not a BitmapDrawable , it will be converted to one. This will cause animated drawables to only draw the first frame of their animation. See Also ImageRequest.Builder.transformations Functions Name Summary key Return a unique key for this transformation. abstract fun key(): String transform Apply the transformation to input and return the transformed Bitmap . abstract suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Inheritors Name Summary BlurTransformation A Transformation that applies a Gaussian blur to an image. class BlurTransformation : Transformation CircleCropTransformation A Transformation that crops an image using a centered circle as the mask. class CircleCropTransformation : Transformation GrayscaleTransformation A Transformation that converts an image to shades of gray. class GrayscaleTransformation : Transformation RoundedCornersTransformation A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. class RoundedCornersTransformation : Transformation","title":"Home"},{"location":"api/coil-base/coil.transform/-transformation/#transformation","text":"interface Transformation An interface for making transformations to an image's pixel data. NOTE: If DrawableResult.drawable or DecodeResult.drawable is not a BitmapDrawable , it will be converted to one. This will cause animated drawables to only draw the first frame of their animation. See Also ImageRequest.Builder.transformations","title":"Transformation"},{"location":"api/coil-base/coil.transform/-transformation/#functions","text":"Name Summary key Return a unique key for this transformation. abstract fun key(): String transform Apply the transformation to input and return the transformed Bitmap . abstract suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap","title":"Functions"},{"location":"api/coil-base/coil.transform/-transformation/#inheritors","text":"Name Summary BlurTransformation A Transformation that applies a Gaussian blur to an image. class BlurTransformation : Transformation CircleCropTransformation A Transformation that crops an image using a centered circle as the mask. class CircleCropTransformation : Transformation GrayscaleTransformation A Transformation that converts an image to shades of gray. class GrayscaleTransformation : Transformation RoundedCornersTransformation A Transformation that crops the image to fit the target's dimensions and rounds the corners of the image. class RoundedCornersTransformation : Transformation","title":"Inheritors"},{"location":"api/coil-base/coil.transform/-transformation/key/","text":"coil-base / coil.transform / Transformation / key key abstract fun key(): String Return a unique key for this transformation. The key is added to the image request's memory cache key and should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"Key"},{"location":"api/coil-base/coil.transform/-transformation/key/#key","text":"abstract fun key(): String Return a unique key for this transformation. The key is added to the image request's memory cache key and should contain any params that are part of this transformation (e.g. size, scale, color, radius, etc.).","title":"key"},{"location":"api/coil-base/coil.transform/-transformation/transform/","text":"coil-base / coil.transform / Transformation / transform transform abstract suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input and return the transformed Bitmap . Parameters pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. Return The transformed Bitmap .","title":"Transform"},{"location":"api/coil-base/coil.transform/-transformation/transform/#transform","text":"abstract suspend fun transform(pool: BitmapPool , input: Bitmap , size: Size ): Bitmap Apply the transformation to input and return the transformed Bitmap .","title":"transform"},{"location":"api/coil-base/coil.transform/-transformation/transform/#parameters","text":"pool - A BitmapPool which can be used to request Bitmap instances. input - The input Bitmap to transform. Its config will always be Bitmap.Config.ARGB_8888 or Bitmap.Config.RGBA_F16 . size - The size of the image request. Return The transformed Bitmap .","title":"Parameters"},{"location":"api/coil-base/coil.transition/","text":"coil-base / coil.transition Package coil.transition Types Name Summary CrossfadeTransition A Transition that crossfades from the current drawable to a new one. class CrossfadeTransition : Transition Transition A class to animate between a Target 's current drawable and the result of an image request. interface Transition TransitionTarget A Target that supports applying Transition s. interface TransitionTarget : Target","title":"Home"},{"location":"api/coil-base/coil.transition/#package-coiltransition","text":"","title":"Package coil.transition"},{"location":"api/coil-base/coil.transition/#types","text":"Name Summary CrossfadeTransition A Transition that crossfades from the current drawable to a new one. class CrossfadeTransition : Transition Transition A class to animate between a Target 's current drawable and the result of an image request. interface Transition TransitionTarget A Target that supports applying Transition s. interface TransitionTarget : Target","title":"Types"},{"location":"api/coil-base/coil.transition/-crossfade-transition/","text":"coil-base / coil.transition / CrossfadeTransition CrossfadeTransition @ExperimentalCoilApi class CrossfadeTransition : Transition A Transition that crossfades from the current drawable to a new one. Parameters durationMillis - The duration of the animation in milliseconds. preferExactIntrinsicSize - See CrossfadeDrawable.preferExactIntrinsicSize . Constructors Name Summary init CrossfadeTransition() CrossfadeTransition(durationMillis: Int = CrossfadeDrawable.DEFAULT_DURATION) A Transition that crossfades from the current drawable to a new one. CrossfadeTransition(durationMillis: Int = CrossfadeDrawable.DEFAULT_DURATION, preferExactIntrinsicSize: Boolean = false) Properties Name Summary durationMillis The duration of the animation in milliseconds. val durationMillis: Int preferExactIntrinsicSize See CrossfadeDrawable.preferExactIntrinsicSize . val preferExactIntrinsicSize: Boolean Functions Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String transition Start the transition animation and suspend until it completes or is cancelled. suspend fun transition(target: TransitionTarget , result: ImageResult ): Unit","title":"Home"},{"location":"api/coil-base/coil.transition/-crossfade-transition/#crossfadetransition","text":"@ExperimentalCoilApi class CrossfadeTransition : Transition A Transition that crossfades from the current drawable to a new one.","title":"CrossfadeTransition"},{"location":"api/coil-base/coil.transition/-crossfade-transition/#parameters","text":"durationMillis - The duration of the animation in milliseconds. preferExactIntrinsicSize - See CrossfadeDrawable.preferExactIntrinsicSize .","title":"Parameters"},{"location":"api/coil-base/coil.transition/-crossfade-transition/#constructors","text":"Name Summary init CrossfadeTransition() CrossfadeTransition(durationMillis: Int = CrossfadeDrawable.DEFAULT_DURATION) A Transition that crossfades from the current drawable to a new one. CrossfadeTransition(durationMillis: Int = CrossfadeDrawable.DEFAULT_DURATION, preferExactIntrinsicSize: Boolean = false)","title":"Constructors"},{"location":"api/coil-base/coil.transition/-crossfade-transition/#properties","text":"Name Summary durationMillis The duration of the animation in milliseconds. val durationMillis: Int preferExactIntrinsicSize See CrossfadeDrawable.preferExactIntrinsicSize . val preferExactIntrinsicSize: Boolean","title":"Properties"},{"location":"api/coil-base/coil.transition/-crossfade-transition/#functions","text":"Name Summary equals fun equals(other: Any ?): Boolean hashCode fun hashCode(): Int toString fun toString(): String transition Start the transition animation and suspend until it completes or is cancelled. suspend fun transition(target: TransitionTarget , result: ImageResult ): Unit","title":"Functions"},{"location":"api/coil-base/coil.transition/-crossfade-transition/-init-/","text":"coil-base / coil.transition / CrossfadeTransition / init init CrossfadeTransition() CrossfadeTransition(durationMillis: Int = CrossfadeDrawable.DEFAULT_DURATION)``CrossfadeTransition(durationMillis: Int = CrossfadeDrawable.DEFAULT_DURATION, preferExactIntrinsicSize: Boolean = false) A Transition that crossfades from the current drawable to a new one. Parameters durationMillis - The duration of the animation in milliseconds. preferExactIntrinsicSize - See CrossfadeDrawable.preferExactIntrinsicSize .","title":" init "},{"location":"api/coil-base/coil.transition/-crossfade-transition/-init-/#init","text":"CrossfadeTransition() CrossfadeTransition(durationMillis: Int = CrossfadeDrawable.DEFAULT_DURATION)``CrossfadeTransition(durationMillis: Int = CrossfadeDrawable.DEFAULT_DURATION, preferExactIntrinsicSize: Boolean = false) A Transition that crossfades from the current drawable to a new one.","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.transition/-crossfade-transition/-init-/#parameters","text":"durationMillis - The duration of the animation in milliseconds. preferExactIntrinsicSize - See CrossfadeDrawable.preferExactIntrinsicSize .","title":"Parameters"},{"location":"api/coil-base/coil.transition/-crossfade-transition/duration-millis/","text":"coil-base / coil.transition / CrossfadeTransition / durationMillis durationMillis val durationMillis: Int The duration of the animation in milliseconds.","title":"Duration millis"},{"location":"api/coil-base/coil.transition/-crossfade-transition/duration-millis/#durationmillis","text":"val durationMillis: Int The duration of the animation in milliseconds.","title":"durationMillis"},{"location":"api/coil-base/coil.transition/-crossfade-transition/equals/","text":"coil-base / coil.transition / CrossfadeTransition / equals equals fun equals(other: Any ?): Boolean","title":"Equals"},{"location":"api/coil-base/coil.transition/-crossfade-transition/equals/#equals","text":"fun equals(other: Any ?): Boolean","title":"equals"},{"location":"api/coil-base/coil.transition/-crossfade-transition/hash-code/","text":"coil-base / coil.transition / CrossfadeTransition / hashCode hashCode fun hashCode(): Int","title":"Hash code"},{"location":"api/coil-base/coil.transition/-crossfade-transition/hash-code/#hashcode","text":"fun hashCode(): Int","title":"hashCode"},{"location":"api/coil-base/coil.transition/-crossfade-transition/prefer-exact-intrinsic-size/","text":"coil-base / coil.transition / CrossfadeTransition / preferExactIntrinsicSize preferExactIntrinsicSize val preferExactIntrinsicSize: Boolean See CrossfadeDrawable.preferExactIntrinsicSize .","title":"Prefer exact intrinsic size"},{"location":"api/coil-base/coil.transition/-crossfade-transition/prefer-exact-intrinsic-size/#preferexactintrinsicsize","text":"val preferExactIntrinsicSize: Boolean See CrossfadeDrawable.preferExactIntrinsicSize .","title":"preferExactIntrinsicSize"},{"location":"api/coil-base/coil.transition/-crossfade-transition/to-string/","text":"coil-base / coil.transition / CrossfadeTransition / toString toString fun toString(): String","title":"To string"},{"location":"api/coil-base/coil.transition/-crossfade-transition/to-string/#tostring","text":"fun toString(): String","title":"toString"},{"location":"api/coil-base/coil.transition/-crossfade-transition/transition/","text":"coil-base / coil.transition / CrossfadeTransition / transition transition suspend fun transition(target: TransitionTarget , result: ImageResult ): Unit Start the transition animation and suspend until it completes or is cancelled. Failure to suspend until the animation is complete can cause the drawable 's Bitmap (if any) to be pooled while it is still in use. NOTE: Implementations are responsible for calling the correct Target lifecycle callback. See CrossfadeTransition for an example. Parameters target - The target to apply this transition to. result - The result of the image request.","title":"Transition"},{"location":"api/coil-base/coil.transition/-crossfade-transition/transition/#transition","text":"suspend fun transition(target: TransitionTarget , result: ImageResult ): Unit Start the transition animation and suspend until it completes or is cancelled. Failure to suspend until the animation is complete can cause the drawable 's Bitmap (if any) to be pooled while it is still in use. NOTE: Implementations are responsible for calling the correct Target lifecycle callback. See CrossfadeTransition for an example.","title":"transition"},{"location":"api/coil-base/coil.transition/-crossfade-transition/transition/#parameters","text":"target - The target to apply this transition to. result - The result of the image request.","title":"Parameters"},{"location":"api/coil-base/coil.transition/-transition/","text":"coil-base / coil.transition / Transition Transition @ExperimentalCoilApi interface Transition A class to animate between a Target 's current drawable and the result of an image request. NOTE: A Target must implement TransitionTarget to support applying Transition s. If the Target does not implement TransitionTarget , any Transition s will be ignored. Functions Name Summary transition Start the transition animation and suspend until it completes or is cancelled. abstract suspend fun transition(target: TransitionTarget , result: ImageResult ): Unit Companion Object Properties Name Summary NONE val NONE: Transition Inheritors Name Summary CrossfadeTransition A Transition that crossfades from the current drawable to a new one. class CrossfadeTransition : Transition","title":"Home"},{"location":"api/coil-base/coil.transition/-transition/#transition","text":"@ExperimentalCoilApi interface Transition A class to animate between a Target 's current drawable and the result of an image request. NOTE: A Target must implement TransitionTarget to support applying Transition s. If the Target does not implement TransitionTarget , any Transition s will be ignored.","title":"Transition"},{"location":"api/coil-base/coil.transition/-transition/#functions","text":"Name Summary transition Start the transition animation and suspend until it completes or is cancelled. abstract suspend fun transition(target: TransitionTarget , result: ImageResult ): Unit","title":"Functions"},{"location":"api/coil-base/coil.transition/-transition/#companion-object-properties","text":"Name Summary NONE val NONE: Transition","title":"Companion Object Properties"},{"location":"api/coil-base/coil.transition/-transition/#inheritors","text":"Name Summary CrossfadeTransition A Transition that crossfades from the current drawable to a new one. class CrossfadeTransition : Transition","title":"Inheritors"},{"location":"api/coil-base/coil.transition/-transition/-n-o-n-e/","text":"coil-base / coil.transition / Transition / NONE NONE val NONE: Transition","title":" n o n e"},{"location":"api/coil-base/coil.transition/-transition/-n-o-n-e/#none","text":"val NONE: Transition","title":"NONE"},{"location":"api/coil-base/coil.transition/-transition/transition/","text":"coil-base / coil.transition / Transition / transition transition @MainThread abstract suspend fun transition(target: TransitionTarget , result: ImageResult ): Unit Start the transition animation and suspend until it completes or is cancelled. Failure to suspend until the animation is complete can cause the drawable 's Bitmap (if any) to be pooled while it is still in use. NOTE: Implementations are responsible for calling the correct Target lifecycle callback. See CrossfadeTransition for an example. Parameters target - The target to apply this transition to. result - The result of the image request.","title":"Transition"},{"location":"api/coil-base/coil.transition/-transition/transition/#transition","text":"@MainThread abstract suspend fun transition(target: TransitionTarget , result: ImageResult ): Unit Start the transition animation and suspend until it completes or is cancelled. Failure to suspend until the animation is complete can cause the drawable 's Bitmap (if any) to be pooled while it is still in use. NOTE: Implementations are responsible for calling the correct Target lifecycle callback. See CrossfadeTransition for an example.","title":"transition"},{"location":"api/coil-base/coil.transition/-transition/transition/#parameters","text":"target - The target to apply this transition to. result - The result of the image request.","title":"Parameters"},{"location":"api/coil-base/coil.transition/-transition-target/","text":"coil-base / coil.transition / TransitionTarget TransitionTarget @ExperimentalCoilApi interface TransitionTarget : Target A Target that supports applying Transition s. Properties Name Summary drawable The view 's current Drawable . abstract val drawable: Drawable ? view The View used by this Target . abstract val view: View Inheritors Name Summary ImageViewTarget A Target that handles setting images on an ImageView . open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget , DefaultLifecycleObserver","title":"Home"},{"location":"api/coil-base/coil.transition/-transition-target/#transitiontarget","text":"@ExperimentalCoilApi interface TransitionTarget : Target A Target that supports applying Transition s.","title":"TransitionTarget"},{"location":"api/coil-base/coil.transition/-transition-target/#properties","text":"Name Summary drawable The view 's current Drawable . abstract val drawable: Drawable ? view The View used by this Target . abstract val view: View","title":"Properties"},{"location":"api/coil-base/coil.transition/-transition-target/#inheritors","text":"Name Summary ImageViewTarget A Target that handles setting images on an ImageView . open class ImageViewTarget : PoolableViewTarget ImageView , TransitionTarget , DefaultLifecycleObserver","title":"Inheritors"},{"location":"api/coil-base/coil.transition/-transition-target/drawable/","text":"coil-base / coil.transition / TransitionTarget / drawable drawable abstract val drawable: Drawable ? The view 's current Drawable .","title":"Drawable"},{"location":"api/coil-base/coil.transition/-transition-target/drawable/#drawable","text":"abstract val drawable: Drawable ? The view 's current Drawable .","title":"drawable"},{"location":"api/coil-base/coil.transition/-transition-target/view/","text":"coil-base / coil.transition / TransitionTarget / view view abstract val view: View The View used by this Target .","title":"View"},{"location":"api/coil-base/coil.transition/-transition-target/view/#view","text":"abstract val view: View The View used by this Target .","title":"view"},{"location":"api/coil-base/coil.util/","text":"coil-base / coil.util Package coil.util Types Name Summary CoilUtils Public utility methods for Coil. object CoilUtils DebugLogger A Logger implementation that writes to Android's Log . class DebugLogger : Logger Logger Logging interface for ImageLoader s. interface Logger","title":"Home"},{"location":"api/coil-base/coil.util/#package-coilutil","text":"","title":"Package coil.util"},{"location":"api/coil-base/coil.util/#types","text":"Name Summary CoilUtils Public utility methods for Coil. object CoilUtils DebugLogger A Logger implementation that writes to Android's Log . class DebugLogger : Logger Logger Logging interface for ImageLoader s. interface Logger","title":"Types"},{"location":"api/coil-base/coil.util/-coil-utils/","text":"coil-base / coil.util / CoilUtils CoilUtils object CoilUtils Public utility methods for Coil. Functions Name Summary clear Cancel any in progress requests attached to view and clear any associated resources. fun clear(view: View ): Unit createDefaultCache Create an OkHttp disk cache with a reasonable default size and location. fun createDefaultCache(context: Context ): Cache metadata Get the metadata of the successful request attached to this view. fun metadata(view: View ): Metadata?","title":"Home"},{"location":"api/coil-base/coil.util/-coil-utils/#coilutils","text":"object CoilUtils Public utility methods for Coil.","title":"CoilUtils"},{"location":"api/coil-base/coil.util/-coil-utils/#functions","text":"Name Summary clear Cancel any in progress requests attached to view and clear any associated resources. fun clear(view: View ): Unit createDefaultCache Create an OkHttp disk cache with a reasonable default size and location. fun createDefaultCache(context: Context ): Cache metadata Get the metadata of the successful request attached to this view. fun metadata(view: View ): Metadata?","title":"Functions"},{"location":"api/coil-base/coil.util/-coil-utils/clear/","text":"coil-base / coil.util / CoilUtils / clear clear @JvmStatic fun clear(view: View ): Unit Cancel any in progress requests attached to view and clear any associated resources. NOTE: Typically you should use Disposable.dispose to clear any associated resources, however this method is provided for convenience.","title":"Clear"},{"location":"api/coil-base/coil.util/-coil-utils/clear/#clear","text":"@JvmStatic fun clear(view: View ): Unit Cancel any in progress requests attached to view and clear any associated resources. NOTE: Typically you should use Disposable.dispose to clear any associated resources, however this method is provided for convenience.","title":"clear"},{"location":"api/coil-base/coil.util/-coil-utils/create-default-cache/","text":"coil-base / coil.util / CoilUtils / createDefaultCache createDefaultCache @JvmStatic fun createDefaultCache(context: Context ): Cache Create an OkHttp disk cache with a reasonable default size and location.","title":"Create default cache"},{"location":"api/coil-base/coil.util/-coil-utils/create-default-cache/#createdefaultcache","text":"@JvmStatic fun createDefaultCache(context: Context ): Cache Create an OkHttp disk cache with a reasonable default size and location.","title":"createDefaultCache"},{"location":"api/coil-base/coil.util/-coil-utils/metadata/","text":"coil-base / coil.util / CoilUtils / metadata metadata @JvmStatic fun metadata(view: View ): Metadata? Get the metadata of the successful request attached to this view.","title":"Metadata"},{"location":"api/coil-base/coil.util/-coil-utils/metadata/#metadata","text":"@JvmStatic fun metadata(view: View ): Metadata? Get the metadata of the successful request attached to this view.","title":"metadata"},{"location":"api/coil-base/coil.util/-debug-logger/","text":"coil-base / coil.util / DebugLogger DebugLogger class DebugLogger : Logger A Logger implementation that writes to Android's Log . NOTE: You should not enable this in release builds. Adding this to your ImageLoader reduces performance. Additionally, this will log URLs which can contain PII . Constructors Name Summary init A Logger implementation that writes to Android's Log . DebugLogger(level: Int = Log.DEBUG) Properties Name Summary level The minimum level for this logger to log. var level: Int Functions Name Summary log Write message and/or throwable to a logging destination. fun log(tag: String , priority: Int , message: String ?, throwable: Throwable ?): Unit","title":"Home"},{"location":"api/coil-base/coil.util/-debug-logger/#debuglogger","text":"class DebugLogger : Logger A Logger implementation that writes to Android's Log . NOTE: You should not enable this in release builds. Adding this to your ImageLoader reduces performance. Additionally, this will log URLs which can contain PII .","title":"DebugLogger"},{"location":"api/coil-base/coil.util/-debug-logger/#constructors","text":"Name Summary init A Logger implementation that writes to Android's Log . DebugLogger(level: Int = Log.DEBUG)","title":"Constructors"},{"location":"api/coil-base/coil.util/-debug-logger/#properties","text":"Name Summary level The minimum level for this logger to log. var level: Int","title":"Properties"},{"location":"api/coil-base/coil.util/-debug-logger/#functions","text":"Name Summary log Write message and/or throwable to a logging destination. fun log(tag: String , priority: Int , message: String ?, throwable: Throwable ?): Unit","title":"Functions"},{"location":"api/coil-base/coil.util/-debug-logger/-init-/","text":"coil-base / coil.util / DebugLogger / init init DebugLogger(level: Int = Log.DEBUG) A Logger implementation that writes to Android's Log . NOTE: You should not enable this in release builds. Adding this to your ImageLoader reduces performance. Additionally, this will log URLs which can contain PII .","title":" init "},{"location":"api/coil-base/coil.util/-debug-logger/-init-/#init","text":"DebugLogger(level: Int = Log.DEBUG) A Logger implementation that writes to Android's Log . NOTE: You should not enable this in release builds. Adding this to your ImageLoader reduces performance. Additionally, this will log URLs which can contain PII .","title":"&lt;init&gt;"},{"location":"api/coil-base/coil.util/-debug-logger/level/","text":"coil-base / coil.util / DebugLogger / level level var level: Int The minimum level for this logger to log. See Also Log","title":"Level"},{"location":"api/coil-base/coil.util/-debug-logger/level/#level","text":"var level: Int The minimum level for this logger to log. See Also Log","title":"level"},{"location":"api/coil-base/coil.util/-debug-logger/log/","text":"coil-base / coil.util / DebugLogger / log log fun log(tag: String , priority: Int , message: String ?, throwable: Throwable ?): Unit Write message and/or throwable to a logging destination. priority will be greater than or equal to level .","title":"Log"},{"location":"api/coil-base/coil.util/-debug-logger/log/#log","text":"fun log(tag: String , priority: Int , message: String ?, throwable: Throwable ?): Unit Write message and/or throwable to a logging destination. priority will be greater than or equal to level .","title":"log"},{"location":"api/coil-base/coil.util/-logger/","text":"coil-base / coil.util / Logger Logger interface Logger Logging interface for ImageLoader s. See Also ImageLoader.Builder.logger DebugLogger Properties Name Summary level The minimum level for this logger to log. abstract var level: Int Functions Name Summary log Write message and/or throwable to a logging destination. abstract fun log(tag: String , priority: Int , message: String ?, throwable: Throwable ?): Unit Inheritors Name Summary DebugLogger A Logger implementation that writes to Android's Log . class DebugLogger : Logger","title":"Home"},{"location":"api/coil-base/coil.util/-logger/#logger","text":"interface Logger Logging interface for ImageLoader s. See Also ImageLoader.Builder.logger DebugLogger","title":"Logger"},{"location":"api/coil-base/coil.util/-logger/#properties","text":"Name Summary level The minimum level for this logger to log. abstract var level: Int","title":"Properties"},{"location":"api/coil-base/coil.util/-logger/#functions","text":"Name Summary log Write message and/or throwable to a logging destination. abstract fun log(tag: String , priority: Int , message: String ?, throwable: Throwable ?): Unit","title":"Functions"},{"location":"api/coil-base/coil.util/-logger/#inheritors","text":"Name Summary DebugLogger A Logger implementation that writes to Android's Log . class DebugLogger : Logger","title":"Inheritors"},{"location":"api/coil-base/coil.util/-logger/level/","text":"coil-base / coil.util / Logger / level level abstract var level: Int The minimum level for this logger to log. See Also Log","title":"Level"},{"location":"api/coil-base/coil.util/-logger/level/#level","text":"abstract var level: Int The minimum level for this logger to log. See Also Log","title":"level"},{"location":"api/coil-base/coil.util/-logger/log/","text":"coil-base / coil.util / Logger / log log abstract fun log(tag: String , priority: Int , message: String ?, throwable: Throwable ?): Unit Write message and/or throwable to a logging destination. priority will be greater than or equal to level .","title":"Log"},{"location":"api/coil-base/coil.util/-logger/log/#log","text":"abstract fun log(tag: String , priority: Int , message: String ?, throwable: Throwable ?): Unit Write message and/or throwable to a logging destination. priority will be greater than or equal to level .","title":"log"},{"location":"api/coil-gif/","text":"coil-gif Packages Name Summary coil.decode coil.drawable coil.request coil.transform Index All Types","title":"coil-gif"},{"location":"api/coil-gif/#packages","text":"Name Summary coil.decode coil.drawable coil.request coil.transform","title":"Packages"},{"location":"api/coil-gif/#index","text":"All Types","title":"Index"},{"location":"api/coil-gif/alltypes/","text":"All Types Name Summary coil.decode.GifDecoder A Decoder that uses Movie to decode GIFs. | coil.decode.ImageDecoderDecoder A Decoder that uses ImageDecoder to decode GIFs, animated WebPs, and animated HEIFs. | coil.drawable.MovieDrawable A Drawable that supports rendering Movie s (i.e. GIFs). | coil.drawable.ScaleDrawable A Drawable that centers and scales its child to fill its bounds.","title":"Home"},{"location":"api/coil-gif/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/coil-gif/alltypes/#coildecodegifdecoder","text":"A Decoder that uses Movie to decode GIFs. |","title":"coil.decode.GifDecoder"},{"location":"api/coil-gif/alltypes/#coildecodeimagedecoderdecoder","text":"A Decoder that uses ImageDecoder to decode GIFs, animated WebPs, and animated HEIFs. |","title":"coil.decode.ImageDecoderDecoder"},{"location":"api/coil-gif/alltypes/#coildrawablemoviedrawable","text":"A Drawable that supports rendering Movie s (i.e. GIFs). |","title":"coil.drawable.MovieDrawable"},{"location":"api/coil-gif/alltypes/#coildrawablescaledrawable","text":"A Drawable that centers and scales its child to fill its bounds.","title":"coil.drawable.ScaleDrawable"},{"location":"api/coil-gif/coil.decode/","text":"coil-gif / coil.decode Package coil.decode Types Name Summary GifDecoder A Decoder that uses Movie to decode GIFs. class GifDecoder : Decoder ImageDecoderDecoder A Decoder that uses ImageDecoder to decode GIFs, animated WebPs, and animated HEIFs. class ImageDecoderDecoder : Decoder","title":"Home"},{"location":"api/coil-gif/coil.decode/#package-coildecode","text":"","title":"Package coil.decode"},{"location":"api/coil-gif/coil.decode/#types","text":"Name Summary GifDecoder A Decoder that uses Movie to decode GIFs. class GifDecoder : Decoder ImageDecoderDecoder A Decoder that uses ImageDecoder to decode GIFs, animated WebPs, and animated HEIFs. class ImageDecoderDecoder : Decoder","title":"Types"},{"location":"api/coil-gif/coil.decode/-gif-decoder/","text":"coil-gif / coil.decode / GifDecoder GifDecoder class GifDecoder : Decoder A Decoder that uses Movie to decode GIFs. NOTE: Prefer using ImageDecoderDecoder on API 28 and above. Constructors Name Summary init A Decoder that uses Movie to decode GIFs. GifDecoder() Functions Name Summary decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean Companion Object Properties Name Summary ANIMATED_TRANSFORMATION_KEY const val ANIMATED_TRANSFORMATION_KEY: String ANIMATION_END_CALLBACK_KEY const val ANIMATION_END_CALLBACK_KEY: String ANIMATION_START_CALLBACK_KEY const val ANIMATION_START_CALLBACK_KEY: String REPEAT_COUNT_KEY const val REPEAT_COUNT_KEY: String","title":"Home"},{"location":"api/coil-gif/coil.decode/-gif-decoder/#gifdecoder","text":"class GifDecoder : Decoder A Decoder that uses Movie to decode GIFs. NOTE: Prefer using ImageDecoderDecoder on API 28 and above.","title":"GifDecoder"},{"location":"api/coil-gif/coil.decode/-gif-decoder/#constructors","text":"Name Summary init A Decoder that uses Movie to decode GIFs. GifDecoder()","title":"Constructors"},{"location":"api/coil-gif/coil.decode/-gif-decoder/#functions","text":"Name Summary decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Functions"},{"location":"api/coil-gif/coil.decode/-gif-decoder/#companion-object-properties","text":"Name Summary ANIMATED_TRANSFORMATION_KEY const val ANIMATED_TRANSFORMATION_KEY: String ANIMATION_END_CALLBACK_KEY const val ANIMATION_END_CALLBACK_KEY: String ANIMATION_START_CALLBACK_KEY const val ANIMATION_START_CALLBACK_KEY: String REPEAT_COUNT_KEY const val REPEAT_COUNT_KEY: String","title":"Companion Object Properties"},{"location":"api/coil-gif/coil.decode/-gif-decoder/-a-n-i-m-a-t-e-d_-t-r-a-n-s-f-o-r-m-a-t-i-o-n_-k-e-y/","text":"coil-gif / coil.decode / GifDecoder / ANIMATED_TRANSFORMATION_KEY ANIMATED_TRANSFORMATION_KEY const val ANIMATED_TRANSFORMATION_KEY: String","title":" a n i m a t e d  t r a n s f o r m a t i o n  k e y"},{"location":"api/coil-gif/coil.decode/-gif-decoder/-a-n-i-m-a-t-e-d_-t-r-a-n-s-f-o-r-m-a-t-i-o-n_-k-e-y/#animated_transformation_key","text":"const val ANIMATED_TRANSFORMATION_KEY: String","title":"ANIMATED_TRANSFORMATION_KEY"},{"location":"api/coil-gif/coil.decode/-gif-decoder/-a-n-i-m-a-t-i-o-n_-e-n-d_-c-a-l-l-b-a-c-k_-k-e-y/","text":"coil-gif / coil.decode / GifDecoder / ANIMATION_END_CALLBACK_KEY ANIMATION_END_CALLBACK_KEY const val ANIMATION_END_CALLBACK_KEY: String","title":" a n i m a t i o n  e n d  c a l l b a c k  k e y"},{"location":"api/coil-gif/coil.decode/-gif-decoder/-a-n-i-m-a-t-i-o-n_-e-n-d_-c-a-l-l-b-a-c-k_-k-e-y/#animation_end_callback_key","text":"const val ANIMATION_END_CALLBACK_KEY: String","title":"ANIMATION_END_CALLBACK_KEY"},{"location":"api/coil-gif/coil.decode/-gif-decoder/-a-n-i-m-a-t-i-o-n_-s-t-a-r-t_-c-a-l-l-b-a-c-k_-k-e-y/","text":"coil-gif / coil.decode / GifDecoder / ANIMATION_START_CALLBACK_KEY ANIMATION_START_CALLBACK_KEY const val ANIMATION_START_CALLBACK_KEY: String","title":" a n i m a t i o n  s t a r t  c a l l b a c k  k e y"},{"location":"api/coil-gif/coil.decode/-gif-decoder/-a-n-i-m-a-t-i-o-n_-s-t-a-r-t_-c-a-l-l-b-a-c-k_-k-e-y/#animation_start_callback_key","text":"const val ANIMATION_START_CALLBACK_KEY: String","title":"ANIMATION_START_CALLBACK_KEY"},{"location":"api/coil-gif/coil.decode/-gif-decoder/-init-/","text":"coil-gif / coil.decode / GifDecoder / init init GifDecoder() A Decoder that uses Movie to decode GIFs. NOTE: Prefer using ImageDecoderDecoder on API 28 and above.","title":" init "},{"location":"api/coil-gif/coil.decode/-gif-decoder/-init-/#init","text":"GifDecoder() A Decoder that uses Movie to decode GIFs. NOTE: Prefer using ImageDecoderDecoder on API 28 and above.","title":"&lt;init&gt;"},{"location":"api/coil-gif/coil.decode/-gif-decoder/-r-e-p-e-a-t_-c-o-u-n-t_-k-e-y/","text":"coil-gif / coil.decode / GifDecoder / REPEAT_COUNT_KEY REPEAT_COUNT_KEY const val REPEAT_COUNT_KEY: String","title":" r e p e a t  c o u n t  k e y"},{"location":"api/coil-gif/coil.decode/-gif-decoder/-r-e-p-e-a-t_-c-o-u-n-t_-k-e-y/#repeat_count_key","text":"const val REPEAT_COUNT_KEY: String","title":"REPEAT_COUNT_KEY"},{"location":"api/coil-gif/coil.decode/-gif-decoder/decode/","text":"coil-gif / coil.decode / GifDecoder / decode decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult","title":"Decode"},{"location":"api/coil-gif/coil.decode/-gif-decoder/decode/#decode","text":"suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult","title":"decode"},{"location":"api/coil-gif/coil.decode/-gif-decoder/handles/","text":"coil-gif / coil.decode / GifDecoder / handles handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Handles"},{"location":"api/coil-gif/coil.decode/-gif-decoder/handles/#handles","text":"fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"handles"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/","text":"coil-gif / coil.decode / ImageDecoderDecoder ImageDecoderDecoder @RequiresApi(28) class ImageDecoderDecoder : Decoder A Decoder that uses ImageDecoder to decode GIFs, animated WebPs, and animated HEIFs. NOTE: Animated HEIF files are only supported on API 30 and above. Constructors Name Summary init ImageDecoderDecoder(context: Context ) Functions Name Summary decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean Companion Object Properties Name Summary ANIMATED_TRANSFORMATION_KEY const val ANIMATED_TRANSFORMATION_KEY: String ANIMATION_END_CALLBACK_KEY const val ANIMATION_END_CALLBACK_KEY: String ANIMATION_START_CALLBACK_KEY const val ANIMATION_START_CALLBACK_KEY: String REPEAT_COUNT_KEY const val REPEAT_COUNT_KEY: String","title":"Home"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/#imagedecoderdecoder","text":"@RequiresApi(28) class ImageDecoderDecoder : Decoder A Decoder that uses ImageDecoder to decode GIFs, animated WebPs, and animated HEIFs. NOTE: Animated HEIF files are only supported on API 30 and above.","title":"ImageDecoderDecoder"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/#constructors","text":"Name Summary init ImageDecoderDecoder(context: Context )","title":"Constructors"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/#functions","text":"Name Summary decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Functions"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/#companion-object-properties","text":"Name Summary ANIMATED_TRANSFORMATION_KEY const val ANIMATED_TRANSFORMATION_KEY: String ANIMATION_END_CALLBACK_KEY const val ANIMATION_END_CALLBACK_KEY: String ANIMATION_START_CALLBACK_KEY const val ANIMATION_START_CALLBACK_KEY: String REPEAT_COUNT_KEY const val REPEAT_COUNT_KEY: String","title":"Companion Object Properties"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-a-n-i-m-a-t-e-d_-t-r-a-n-s-f-o-r-m-a-t-i-o-n_-k-e-y/","text":"coil-gif / coil.decode / ImageDecoderDecoder / ANIMATED_TRANSFORMATION_KEY ANIMATED_TRANSFORMATION_KEY const val ANIMATED_TRANSFORMATION_KEY: String","title":" a n i m a t e d  t r a n s f o r m a t i o n  k e y"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-a-n-i-m-a-t-e-d_-t-r-a-n-s-f-o-r-m-a-t-i-o-n_-k-e-y/#animated_transformation_key","text":"const val ANIMATED_TRANSFORMATION_KEY: String","title":"ANIMATED_TRANSFORMATION_KEY"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-a-n-i-m-a-t-i-o-n_-e-n-d_-c-a-l-l-b-a-c-k_-k-e-y/","text":"coil-gif / coil.decode / ImageDecoderDecoder / ANIMATION_END_CALLBACK_KEY ANIMATION_END_CALLBACK_KEY const val ANIMATION_END_CALLBACK_KEY: String","title":" a n i m a t i o n  e n d  c a l l b a c k  k e y"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-a-n-i-m-a-t-i-o-n_-e-n-d_-c-a-l-l-b-a-c-k_-k-e-y/#animation_end_callback_key","text":"const val ANIMATION_END_CALLBACK_KEY: String","title":"ANIMATION_END_CALLBACK_KEY"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-a-n-i-m-a-t-i-o-n_-s-t-a-r-t_-c-a-l-l-b-a-c-k_-k-e-y/","text":"coil-gif / coil.decode / ImageDecoderDecoder / ANIMATION_START_CALLBACK_KEY ANIMATION_START_CALLBACK_KEY const val ANIMATION_START_CALLBACK_KEY: String","title":" a n i m a t i o n  s t a r t  c a l l b a c k  k e y"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-a-n-i-m-a-t-i-o-n_-s-t-a-r-t_-c-a-l-l-b-a-c-k_-k-e-y/#animation_start_callback_key","text":"const val ANIMATION_START_CALLBACK_KEY: String","title":"ANIMATION_START_CALLBACK_KEY"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-init-/","text":"coil-gif / coil.decode / ImageDecoderDecoder / init init ImageDecoderDecoder(context: Context )","title":" init "},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-init-/#init","text":"ImageDecoderDecoder(context: Context )","title":"&lt;init&gt;"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-r-e-p-e-a-t_-c-o-u-n-t_-k-e-y/","text":"coil-gif / coil.decode / ImageDecoderDecoder / REPEAT_COUNT_KEY REPEAT_COUNT_KEY const val REPEAT_COUNT_KEY: String","title":" r e p e a t  c o u n t  k e y"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/-r-e-p-e-a-t_-c-o-u-n-t_-k-e-y/#repeat_count_key","text":"const val REPEAT_COUNT_KEY: String","title":"REPEAT_COUNT_KEY"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/decode/","text":"coil-gif / coil.decode / ImageDecoderDecoder / decode decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult","title":"Decode"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/decode/#decode","text":"suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult","title":"decode"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/handles/","text":"coil-gif / coil.decode / ImageDecoderDecoder / handles handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Handles"},{"location":"api/coil-gif/coil.decode/-image-decoder-decoder/handles/#handles","text":"fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"handles"},{"location":"api/coil-gif/coil.drawable/","text":"coil-gif / coil.drawable Package coil.drawable Types Name Summary MovieDrawable A Drawable that supports rendering Movie s (i.e. GIFs). class MovieDrawable : Drawable , Animatable2Compat ScaleDrawable A Drawable that centers and scales its child to fill its bounds. class ScaleDrawable : Drawable , Callback , Animatable","title":"Home"},{"location":"api/coil-gif/coil.drawable/#package-coildrawable","text":"","title":"Package coil.drawable"},{"location":"api/coil-gif/coil.drawable/#types","text":"Name Summary MovieDrawable A Drawable that supports rendering Movie s (i.e. GIFs). class MovieDrawable : Drawable , Animatable2Compat ScaleDrawable A Drawable that centers and scales its child to fill its bounds. class ScaleDrawable : Drawable , Callback , Animatable","title":"Types"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/","text":"coil-gif / coil.drawable / MovieDrawable MovieDrawable class MovieDrawable : Drawable , Animatable2Compat A Drawable that supports rendering Movie s (i.e. GIFs). NOTE: Prefer using ImageDecoderDecoder and AnimatedImageDrawable on API 28 and above. Constructors Name Summary init A Drawable that supports rendering Movie s (i.e. GIFs). MovieDrawable(movie: Movie , pool: BitmapPool = BitmapPool(0), config: Config = Bitmap.Config.ARGB_8888, scale: Scale = Scale.FIT) Properties Name Summary config val config: Config scale val scale: Scale Functions Name Summary clearAnimationCallbacks fun clearAnimationCallbacks(): Unit draw fun draw(canvas: Canvas ): Unit getAnimatedTransformation Get the AnimatedTransformation . fun getAnimatedTransformation(): AnimatedTransformation ? getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int getRepeatCount Get the number of times the animation will repeat. fun getRepeatCount(): Int isRunning fun isRunning(): Boolean registerAnimationCallback fun registerAnimationCallback(callback: AnimationCallback ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setAnimatedTransformation Set the AnimatedTransformation to apply when drawing. fun setAnimatedTransformation(animatedTransformation: AnimatedTransformation ?): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit setRepeatCount Set the number of times to repeat the animation. fun setRepeatCount(repeatCount: Int ): Unit start fun start(): Unit stop fun stop(): Unit unregisterAnimationCallback fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean Companion Object Properties Name Summary REPEAT_INFINITE Pass this to setRepeatCount to repeat infinitely. const val REPEAT_INFINITE: Int","title":"Home"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/#moviedrawable","text":"class MovieDrawable : Drawable , Animatable2Compat A Drawable that supports rendering Movie s (i.e. GIFs). NOTE: Prefer using ImageDecoderDecoder and AnimatedImageDrawable on API 28 and above.","title":"MovieDrawable"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/#constructors","text":"Name Summary init A Drawable that supports rendering Movie s (i.e. GIFs). MovieDrawable(movie: Movie , pool: BitmapPool = BitmapPool(0), config: Config = Bitmap.Config.ARGB_8888, scale: Scale = Scale.FIT)","title":"Constructors"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/#properties","text":"Name Summary config val config: Config scale val scale: Scale","title":"Properties"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/#functions","text":"Name Summary clearAnimationCallbacks fun clearAnimationCallbacks(): Unit draw fun draw(canvas: Canvas ): Unit getAnimatedTransformation Get the AnimatedTransformation . fun getAnimatedTransformation(): AnimatedTransformation ? getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int getRepeatCount Get the number of times the animation will repeat. fun getRepeatCount(): Int isRunning fun isRunning(): Boolean registerAnimationCallback fun registerAnimationCallback(callback: AnimationCallback ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setAnimatedTransformation Set the AnimatedTransformation to apply when drawing. fun setAnimatedTransformation(animatedTransformation: AnimatedTransformation ?): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit setRepeatCount Set the number of times to repeat the animation. fun setRepeatCount(repeatCount: Int ): Unit start fun start(): Unit stop fun stop(): Unit unregisterAnimationCallback fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean","title":"Functions"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/#companion-object-properties","text":"Name Summary REPEAT_INFINITE Pass this to setRepeatCount to repeat infinitely. const val REPEAT_INFINITE: Int","title":"Companion Object Properties"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/-init-/","text":"coil-gif / coil.drawable / MovieDrawable / init init MovieDrawable(movie: Movie , pool: BitmapPool = BitmapPool(0), config: Config = Bitmap.Config.ARGB_8888, scale: Scale = Scale.FIT) A Drawable that supports rendering Movie s (i.e. GIFs). NOTE: Prefer using ImageDecoderDecoder and AnimatedImageDrawable on API 28 and above.","title":" init "},{"location":"api/coil-gif/coil.drawable/-movie-drawable/-init-/#init","text":"MovieDrawable(movie: Movie , pool: BitmapPool = BitmapPool(0), config: Config = Bitmap.Config.ARGB_8888, scale: Scale = Scale.FIT) A Drawable that supports rendering Movie s (i.e. GIFs). NOTE: Prefer using ImageDecoderDecoder and AnimatedImageDrawable on API 28 and above.","title":"&lt;init&gt;"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/-r-e-p-e-a-t_-i-n-f-i-n-i-t-e/","text":"coil-gif / coil.drawable / MovieDrawable / REPEAT_INFINITE REPEAT_INFINITE const val REPEAT_INFINITE: Int Pass this to setRepeatCount to repeat infinitely.","title":" r e p e a t  i n f i n i t e"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/-r-e-p-e-a-t_-i-n-f-i-n-i-t-e/#repeat_infinite","text":"const val REPEAT_INFINITE: Int Pass this to setRepeatCount to repeat infinitely.","title":"REPEAT_INFINITE"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/clear-animation-callbacks/","text":"coil-gif / coil.drawable / MovieDrawable / clearAnimationCallbacks clearAnimationCallbacks fun clearAnimationCallbacks(): Unit","title":"Clear animation callbacks"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/clear-animation-callbacks/#clearanimationcallbacks","text":"fun clearAnimationCallbacks(): Unit","title":"clearAnimationCallbacks"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/config/","text":"coil-gif / coil.drawable / MovieDrawable / config config val config: Config","title":"Config"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/config/#config","text":"val config: Config","title":"config"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/draw/","text":"coil-gif / coil.drawable / MovieDrawable / draw draw fun draw(canvas: Canvas ): Unit","title":"Draw"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/draw/#draw","text":"fun draw(canvas: Canvas ): Unit","title":"draw"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-animated-transformation/","text":"coil-gif / coil.drawable / MovieDrawable / getAnimatedTransformation getAnimatedTransformation fun getAnimatedTransformation(): AnimatedTransformation ? Get the AnimatedTransformation .","title":"Get animated transformation"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-animated-transformation/#getanimatedtransformation","text":"fun getAnimatedTransformation(): AnimatedTransformation ? Get the AnimatedTransformation .","title":"getAnimatedTransformation"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-intrinsic-height/","text":"coil-gif / coil.drawable / MovieDrawable / getIntrinsicHeight getIntrinsicHeight fun getIntrinsicHeight(): Int","title":"Get intrinsic height"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-intrinsic-height/#getintrinsicheight","text":"fun getIntrinsicHeight(): Int","title":"getIntrinsicHeight"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-intrinsic-width/","text":"coil-gif / coil.drawable / MovieDrawable / getIntrinsicWidth getIntrinsicWidth fun getIntrinsicWidth(): Int","title":"Get intrinsic width"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-intrinsic-width/#getintrinsicwidth","text":"fun getIntrinsicWidth(): Int","title":"getIntrinsicWidth"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-opacity/","text":"coil-gif / coil.drawable / MovieDrawable / getOpacity getOpacity fun getOpacity(): Int","title":"Get opacity"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-opacity/#getopacity","text":"fun getOpacity(): Int","title":"getOpacity"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-repeat-count/","text":"coil-gif / coil.drawable / MovieDrawable / getRepeatCount getRepeatCount fun getRepeatCount(): Int Get the number of times the animation will repeat.","title":"Get repeat count"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/get-repeat-count/#getrepeatcount","text":"fun getRepeatCount(): Int Get the number of times the animation will repeat.","title":"getRepeatCount"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/is-running/","text":"coil-gif / coil.drawable / MovieDrawable / isRunning isRunning fun isRunning(): Boolean","title":"Is running"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/is-running/#isrunning","text":"fun isRunning(): Boolean","title":"isRunning"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/register-animation-callback/","text":"coil-gif / coil.drawable / MovieDrawable / registerAnimationCallback registerAnimationCallback fun registerAnimationCallback(callback: AnimationCallback ): Unit","title":"Register animation callback"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/register-animation-callback/#registeranimationcallback","text":"fun registerAnimationCallback(callback: AnimationCallback ): Unit","title":"registerAnimationCallback"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/scale/","text":"coil-gif / coil.drawable / MovieDrawable / scale scale val scale: Scale","title":"Scale"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/scale/#scale","text":"val scale: Scale","title":"scale"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-alpha/","text":"coil-gif / coil.drawable / MovieDrawable / setAlpha setAlpha fun setAlpha(alpha: Int ): Unit","title":"Set alpha"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-alpha/#setalpha","text":"fun setAlpha(alpha: Int ): Unit","title":"setAlpha"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-animated-transformation/","text":"coil-gif / coil.drawable / MovieDrawable / setAnimatedTransformation setAnimatedTransformation fun setAnimatedTransformation(animatedTransformation: AnimatedTransformation ?): Unit Set the AnimatedTransformation to apply when drawing.","title":"Set animated transformation"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-animated-transformation/#setanimatedtransformation","text":"fun setAnimatedTransformation(animatedTransformation: AnimatedTransformation ?): Unit Set the AnimatedTransformation to apply when drawing.","title":"setAnimatedTransformation"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-color-filter/","text":"coil-gif / coil.drawable / MovieDrawable / setColorFilter setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"Set color filter"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-color-filter/#setcolorfilter","text":"fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"setColorFilter"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-repeat-count/","text":"coil-gif / coil.drawable / MovieDrawable / setRepeatCount setRepeatCount fun setRepeatCount(repeatCount: Int ): Unit Set the number of times to repeat the animation. If the animation is already running, any iterations that have already occurred will count towards the new count. NOTE: This method matches the behavior of AnimatedImageDrawable.setRepeatCount . i.e. setting repeatCount to 2 will result in the animation playing 3 times. Setting repeatCount to 0 will result in the animation playing once. Default: REPEAT_INFINITE","title":"Set repeat count"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/set-repeat-count/#setrepeatcount","text":"fun setRepeatCount(repeatCount: Int ): Unit Set the number of times to repeat the animation. If the animation is already running, any iterations that have already occurred will count towards the new count. NOTE: This method matches the behavior of AnimatedImageDrawable.setRepeatCount . i.e. setting repeatCount to 2 will result in the animation playing 3 times. Setting repeatCount to 0 will result in the animation playing once. Default: REPEAT_INFINITE","title":"setRepeatCount"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/start/","text":"coil-gif / coil.drawable / MovieDrawable / start start fun start(): Unit","title":"Start"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/start/#start","text":"fun start(): Unit","title":"start"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/stop/","text":"coil-gif / coil.drawable / MovieDrawable / stop stop fun stop(): Unit","title":"Stop"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/stop/#stop","text":"fun stop(): Unit","title":"stop"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/unregister-animation-callback/","text":"coil-gif / coil.drawable / MovieDrawable / unregisterAnimationCallback unregisterAnimationCallback fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean","title":"Unregister animation callback"},{"location":"api/coil-gif/coil.drawable/-movie-drawable/unregister-animation-callback/#unregisteranimationcallback","text":"fun unregisterAnimationCallback(callback: AnimationCallback ): Boolean","title":"unregisterAnimationCallback"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/","text":"coil-gif / coil.drawable / ScaleDrawable ScaleDrawable class ScaleDrawable : Drawable , Callback , Animatable A Drawable that centers and scales its child to fill its bounds. This allows drawables that only draw within their intrinsic dimensions (e.g. AnimatedImageDrawable ) to fill their entire bounds. Constructors Name Summary init A Drawable that centers and scales its child to fill its bounds. ScaleDrawable(child: Drawable , scale: Scale = Scale.FIT) Properties Name Summary child val child: Drawable Functions Name Summary draw fun draw(canvas: Canvas ): Unit getAlpha fun getAlpha(): Int getColorFilter fun getColorFilter(): ColorFilter ? getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit isRunning fun isRunning(): Boolean onBoundsChange fun onBoundsChange(bounds: Rect ): Unit onLevelChange fun onLevelChange(level: Int ): Boolean onStateChange fun onStateChange(state: IntArray ): Boolean scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit setTint fun setTint(tintColor: Int ): Unit setTintBlendMode fun setTintBlendMode(blendMode: BlendMode ?): Unit setTintList fun setTintList(tint: ColorStateList ?): Unit setTintMode fun setTintMode(tintMode: Mode ?): Unit start fun start(): Unit stop fun stop(): Unit unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"Home"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/#scaledrawable","text":"class ScaleDrawable : Drawable , Callback , Animatable A Drawable that centers and scales its child to fill its bounds. This allows drawables that only draw within their intrinsic dimensions (e.g. AnimatedImageDrawable ) to fill their entire bounds.","title":"ScaleDrawable"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/#constructors","text":"Name Summary init A Drawable that centers and scales its child to fill its bounds. ScaleDrawable(child: Drawable , scale: Scale = Scale.FIT)","title":"Constructors"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/#properties","text":"Name Summary child val child: Drawable","title":"Properties"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/#functions","text":"Name Summary draw fun draw(canvas: Canvas ): Unit getAlpha fun getAlpha(): Int getColorFilter fun getColorFilter(): ColorFilter ? getIntrinsicHeight fun getIntrinsicHeight(): Int getIntrinsicWidth fun getIntrinsicWidth(): Int getOpacity fun getOpacity(): Int invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit isRunning fun isRunning(): Boolean onBoundsChange fun onBoundsChange(bounds: Rect ): Unit onLevelChange fun onLevelChange(level: Int ): Boolean onStateChange fun onStateChange(state: IntArray ): Boolean scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit setAlpha fun setAlpha(alpha: Int ): Unit setColorFilter fun setColorFilter(colorFilter: ColorFilter ?): Unit setTint fun setTint(tintColor: Int ): Unit setTintBlendMode fun setTintBlendMode(blendMode: BlendMode ?): Unit setTintList fun setTintList(tint: ColorStateList ?): Unit setTintMode fun setTintMode(tintMode: Mode ?): Unit start fun start(): Unit stop fun stop(): Unit unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"Functions"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/-init-/","text":"coil-gif / coil.drawable / ScaleDrawable / init init ScaleDrawable(child: Drawable , scale: Scale = Scale.FIT) A Drawable that centers and scales its child to fill its bounds. This allows drawables that only draw within their intrinsic dimensions (e.g. AnimatedImageDrawable ) to fill their entire bounds.","title":" init "},{"location":"api/coil-gif/coil.drawable/-scale-drawable/-init-/#init","text":"ScaleDrawable(child: Drawable , scale: Scale = Scale.FIT) A Drawable that centers and scales its child to fill its bounds. This allows drawables that only draw within their intrinsic dimensions (e.g. AnimatedImageDrawable ) to fill their entire bounds.","title":"&lt;init&gt;"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/child/","text":"coil-gif / coil.drawable / ScaleDrawable / child child val child: Drawable","title":"Child"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/child/#child","text":"val child: Drawable","title":"child"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/draw/","text":"coil-gif / coil.drawable / ScaleDrawable / draw draw fun draw(canvas: Canvas ): Unit","title":"Draw"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/draw/#draw","text":"fun draw(canvas: Canvas ): Unit","title":"draw"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-alpha/","text":"coil-gif / coil.drawable / ScaleDrawable / getAlpha getAlpha @RequiresApi(19) fun getAlpha(): Int","title":"Get alpha"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-alpha/#getalpha","text":"@RequiresApi(19) fun getAlpha(): Int","title":"getAlpha"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-color-filter/","text":"coil-gif / coil.drawable / ScaleDrawable / getColorFilter getColorFilter @RequiresApi(21) fun getColorFilter(): ColorFilter ?","title":"Get color filter"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-color-filter/#getcolorfilter","text":"@RequiresApi(21) fun getColorFilter(): ColorFilter ?","title":"getColorFilter"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-intrinsic-height/","text":"coil-gif / coil.drawable / ScaleDrawable / getIntrinsicHeight getIntrinsicHeight fun getIntrinsicHeight(): Int","title":"Get intrinsic height"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-intrinsic-height/#getintrinsicheight","text":"fun getIntrinsicHeight(): Int","title":"getIntrinsicHeight"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-intrinsic-width/","text":"coil-gif / coil.drawable / ScaleDrawable / getIntrinsicWidth getIntrinsicWidth fun getIntrinsicWidth(): Int","title":"Get intrinsic width"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-intrinsic-width/#getintrinsicwidth","text":"fun getIntrinsicWidth(): Int","title":"getIntrinsicWidth"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-opacity/","text":"coil-gif / coil.drawable / ScaleDrawable / getOpacity getOpacity fun getOpacity(): Int","title":"Get opacity"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/get-opacity/#getopacity","text":"fun getOpacity(): Int","title":"getOpacity"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/invalidate-drawable/","text":"coil-gif / coil.drawable / ScaleDrawable / invalidateDrawable invalidateDrawable fun invalidateDrawable(who: Drawable ): Unit","title":"Invalidate drawable"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/invalidate-drawable/#invalidatedrawable","text":"fun invalidateDrawable(who: Drawable ): Unit","title":"invalidateDrawable"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/is-running/","text":"coil-gif / coil.drawable / ScaleDrawable / isRunning isRunning fun isRunning(): Boolean","title":"Is running"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/is-running/#isrunning","text":"fun isRunning(): Boolean","title":"isRunning"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/on-bounds-change/","text":"coil-gif / coil.drawable / ScaleDrawable / onBoundsChange onBoundsChange protected fun onBoundsChange(bounds: Rect ): Unit","title":"On bounds change"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/on-bounds-change/#onboundschange","text":"protected fun onBoundsChange(bounds: Rect ): Unit","title":"onBoundsChange"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/on-level-change/","text":"coil-gif / coil.drawable / ScaleDrawable / onLevelChange onLevelChange protected fun onLevelChange(level: Int ): Boolean","title":"On level change"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/on-level-change/#onlevelchange","text":"protected fun onLevelChange(level: Int ): Boolean","title":"onLevelChange"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/on-state-change/","text":"coil-gif / coil.drawable / ScaleDrawable / onStateChange onStateChange protected fun onStateChange(state: IntArray ): Boolean","title":"On state change"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/on-state-change/#onstatechange","text":"protected fun onStateChange(state: IntArray ): Boolean","title":"onStateChange"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/schedule-drawable/","text":"coil-gif / coil.drawable / ScaleDrawable / scheduleDrawable scheduleDrawable fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit","title":"Schedule drawable"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/schedule-drawable/#scheduledrawable","text":"fun scheduleDrawable(who: Drawable , what: Runnable , when: Long ): Unit","title":"scheduleDrawable"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-alpha/","text":"coil-gif / coil.drawable / ScaleDrawable / setAlpha setAlpha fun setAlpha(alpha: Int ): Unit","title":"Set alpha"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-alpha/#setalpha","text":"fun setAlpha(alpha: Int ): Unit","title":"setAlpha"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-color-filter/","text":"coil-gif / coil.drawable / ScaleDrawable / setColorFilter setColorFilter @RequiresApi(21) fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"Set color filter"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-color-filter/#setcolorfilter","text":"@RequiresApi(21) fun setColorFilter(colorFilter: ColorFilter ?): Unit","title":"setColorFilter"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint-blend-mode/","text":"coil-gif / coil.drawable / ScaleDrawable / setTintBlendMode setTintBlendMode @RequiresApi(29) fun setTintBlendMode(blendMode: BlendMode ?): Unit","title":"Set tint blend mode"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint-blend-mode/#settintblendmode","text":"@RequiresApi(29) fun setTintBlendMode(blendMode: BlendMode ?): Unit","title":"setTintBlendMode"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint-list/","text":"coil-gif / coil.drawable / ScaleDrawable / setTintList setTintList @RequiresApi(21) fun setTintList(tint: ColorStateList ?): Unit","title":"Set tint list"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint-list/#settintlist","text":"@RequiresApi(21) fun setTintList(tint: ColorStateList ?): Unit","title":"setTintList"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint-mode/","text":"coil-gif / coil.drawable / ScaleDrawable / setTintMode setTintMode @RequiresApi(21) fun setTintMode(tintMode: Mode ?): Unit","title":"Set tint mode"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint-mode/#settintmode","text":"@RequiresApi(21) fun setTintMode(tintMode: Mode ?): Unit","title":"setTintMode"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint/","text":"coil-gif / coil.drawable / ScaleDrawable / setTint setTint @RequiresApi(21) fun setTint(tintColor: Int ): Unit","title":"Set tint"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/set-tint/#settint","text":"@RequiresApi(21) fun setTint(tintColor: Int ): Unit","title":"setTint"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/start/","text":"coil-gif / coil.drawable / ScaleDrawable / start start fun start(): Unit","title":"Start"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/start/#start","text":"fun start(): Unit","title":"start"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/stop/","text":"coil-gif / coil.drawable / ScaleDrawable / stop stop fun stop(): Unit","title":"Stop"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/stop/#stop","text":"fun stop(): Unit","title":"stop"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/unschedule-drawable/","text":"coil-gif / coil.drawable / ScaleDrawable / unscheduleDrawable unscheduleDrawable fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"Unschedule drawable"},{"location":"api/coil-gif/coil.drawable/-scale-drawable/unschedule-drawable/#unscheduledrawable","text":"fun unscheduleDrawable(who: Drawable , what: Runnable ): Unit","title":"unscheduleDrawable"},{"location":"api/coil-gif/coil.request/","text":"coil-gif / coil.request Package coil.request Functions Name Summary animatedTransformation Set the AnimatedTransformation that will be applied to the result if it is an animated Drawable . fun Builder .animatedTransformation(animatedTransformation: AnimatedTransformation ): Builder Get the AnimatedTransformation that will be applied to the result if it is an animated Drawable . fun Parameters .animatedTransformation(): AnimatedTransformation ? animationEndCallback Get the callback to be invoked at the end of the animation if the result is an animated Drawable . fun Parameters .animationEndCallback(): (() - Unit )? animationStartCallback Get the callback to be invoked at the start of the animation if the result is an animated Drawable . fun Parameters .animationStartCallback(): (() - Unit )? onAnimationEnd Set the callback to be invoked at the end of the animation if the result is an animated Drawable . fun Builder .onAnimationEnd(callback: (() - Unit )?): Builder onAnimationStart Set the callback to be invoked at the start of the animation if the result is an animated Drawable . fun Builder .onAnimationStart(callback: (() - Unit )?): Builder repeatCount Set the number of times to repeat the animation if the result is an animated Drawable . fun Builder .repeatCount(repeatCount: Int ): Builder Get the number of times to repeat the animation if the result is an animated Drawable . fun Parameters .repeatCount(): Int ?","title":"Home"},{"location":"api/coil-gif/coil.request/#package-coilrequest","text":"","title":"Package coil.request"},{"location":"api/coil-gif/coil.request/#functions","text":"Name Summary animatedTransformation Set the AnimatedTransformation that will be applied to the result if it is an animated Drawable . fun Builder .animatedTransformation(animatedTransformation: AnimatedTransformation ): Builder Get the AnimatedTransformation that will be applied to the result if it is an animated Drawable . fun Parameters .animatedTransformation(): AnimatedTransformation ? animationEndCallback Get the callback to be invoked at the end of the animation if the result is an animated Drawable . fun Parameters .animationEndCallback(): (() - Unit )? animationStartCallback Get the callback to be invoked at the start of the animation if the result is an animated Drawable . fun Parameters .animationStartCallback(): (() - Unit )? onAnimationEnd Set the callback to be invoked at the end of the animation if the result is an animated Drawable . fun Builder .onAnimationEnd(callback: (() - Unit )?): Builder onAnimationStart Set the callback to be invoked at the start of the animation if the result is an animated Drawable . fun Builder .onAnimationStart(callback: (() - Unit )?): Builder repeatCount Set the number of times to repeat the animation if the result is an animated Drawable . fun Builder .repeatCount(repeatCount: Int ): Builder Get the number of times to repeat the animation if the result is an animated Drawable . fun Parameters .repeatCount(): Int ?","title":"Functions"},{"location":"api/coil-gif/coil.request/animated-transformation/","text":"coil-gif / coil.request / animatedTransformation animatedTransformation @ExperimentalCoilApi fun Builder .animatedTransformation(animatedTransformation: AnimatedTransformation ): Builder Set the AnimatedTransformation that will be applied to the result if it is an animated Drawable . Default: null See Also MovieDrawable.setAnimatedTransformation ImageDecoder.setPostProcessor @ExperimentalCoilApi fun Parameters .animatedTransformation(): AnimatedTransformation ? Get the AnimatedTransformation that will be applied to the result if it is an animated Drawable .","title":"Animated transformation"},{"location":"api/coil-gif/coil.request/animated-transformation/#animatedtransformation","text":"@ExperimentalCoilApi fun Builder .animatedTransformation(animatedTransformation: AnimatedTransformation ): Builder Set the AnimatedTransformation that will be applied to the result if it is an animated Drawable . Default: null See Also MovieDrawable.setAnimatedTransformation ImageDecoder.setPostProcessor @ExperimentalCoilApi fun Parameters .animatedTransformation(): AnimatedTransformation ? Get the AnimatedTransformation that will be applied to the result if it is an animated Drawable .","title":"animatedTransformation"},{"location":"api/coil-gif/coil.request/animation-end-callback/","text":"coil-gif / coil.request / animationEndCallback animationEndCallback fun Parameters .animationEndCallback(): (() - Unit )? Get the callback to be invoked at the end of the animation if the result is an animated Drawable .","title":"Animation end callback"},{"location":"api/coil-gif/coil.request/animation-end-callback/#animationendcallback","text":"fun Parameters .animationEndCallback(): (() - Unit )? Get the callback to be invoked at the end of the animation if the result is an animated Drawable .","title":"animationEndCallback"},{"location":"api/coil-gif/coil.request/animation-start-callback/","text":"coil-gif / coil.request / animationStartCallback animationStartCallback fun Parameters .animationStartCallback(): (() - Unit )? Get the callback to be invoked at the start of the animation if the result is an animated Drawable .","title":"Animation start callback"},{"location":"api/coil-gif/coil.request/animation-start-callback/#animationstartcallback","text":"fun Parameters .animationStartCallback(): (() - Unit )? Get the callback to be invoked at the start of the animation if the result is an animated Drawable .","title":"animationStartCallback"},{"location":"api/coil-gif/coil.request/on-animation-end/","text":"coil-gif / coil.request / onAnimationEnd onAnimationEnd fun Builder .onAnimationEnd(callback: (() - Unit )?): Builder Set the callback to be invoked at the end of the animation if the result is an animated Drawable .","title":"On animation end"},{"location":"api/coil-gif/coil.request/on-animation-end/#onanimationend","text":"fun Builder .onAnimationEnd(callback: (() - Unit )?): Builder Set the callback to be invoked at the end of the animation if the result is an animated Drawable .","title":"onAnimationEnd"},{"location":"api/coil-gif/coil.request/on-animation-start/","text":"coil-gif / coil.request / onAnimationStart onAnimationStart fun Builder .onAnimationStart(callback: (() - Unit )?): Builder Set the callback to be invoked at the start of the animation if the result is an animated Drawable .","title":"On animation start"},{"location":"api/coil-gif/coil.request/on-animation-start/#onanimationstart","text":"fun Builder .onAnimationStart(callback: (() - Unit )?): Builder Set the callback to be invoked at the start of the animation if the result is an animated Drawable .","title":"onAnimationStart"},{"location":"api/coil-gif/coil.request/repeat-count/","text":"coil-gif / coil.request / repeatCount repeatCount fun Builder .repeatCount(repeatCount: Int ): Builder Set the number of times to repeat the animation if the result is an animated Drawable . Default: MovieDrawable.REPEAT_INFINITE See Also MovieDrawable.setRepeatCount AnimatedImageDrawable.setRepeatCount fun Parameters .repeatCount(): Int ? Get the number of times to repeat the animation if the result is an animated Drawable .","title":"Repeat count"},{"location":"api/coil-gif/coil.request/repeat-count/#repeatcount","text":"fun Builder .repeatCount(repeatCount: Int ): Builder Set the number of times to repeat the animation if the result is an animated Drawable . Default: MovieDrawable.REPEAT_INFINITE See Also MovieDrawable.setRepeatCount AnimatedImageDrawable.setRepeatCount fun Parameters .repeatCount(): Int ? Get the number of times to repeat the animation if the result is an animated Drawable .","title":"repeatCount"},{"location":"api/coil-gif/coil.transform/","text":"coil-gif / coil.transform Package coil.transform Functions Name Summary no name provided An interface for making transformations to an animated image's pixel data. fun no name provided (): Unit","title":"Home"},{"location":"api/coil-gif/coil.transform/#package-coiltransform","text":"","title":"Package coil.transform"},{"location":"api/coil-gif/coil.transform/#functions","text":"Name Summary no name provided An interface for making transformations to an animated image's pixel data. fun no name provided (): Unit","title":"Functions"},{"location":"api/coil-gif/coil.transform/-no name provided-/","text":"coil-gif / coil.transform / no name provided no name provided @ExperimentalCoilApi fun no name provided (): Unit An interface for making transformations to an animated image's pixel data.","title":" no name provided "},{"location":"api/coil-gif/coil.transform/-no name provided-/#no-name-provided","text":"@ExperimentalCoilApi fun no name provided (): Unit An interface for making transformations to an animated image's pixel data.","title":"&lt;no name provided&gt;"},{"location":"api/coil-singleton/","text":"coil-singleton Packages Name Summary coil Index All Types","title":"coil"},{"location":"api/coil-singleton/#packages","text":"Name Summary coil","title":"Packages"},{"location":"api/coil-singleton/#index","text":"All Types","title":"Index"},{"location":"api/coil-singleton/alltypes/","text":"All Types Name Summary coil.Coil A class that holds the singleton ImageLoader instance. | (extensions in package coil) android.content.Context | (extensions in package coil) android.widget.ImageView","title":"Home"},{"location":"api/coil-singleton/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/coil-singleton/alltypes/#coilcoil","text":"A class that holds the singleton ImageLoader instance. | (extensions in package coil)","title":"coil.Coil"},{"location":"api/coil-singleton/alltypes/#androidcontentcontext","text":"| (extensions in package coil)","title":"android.content.Context"},{"location":"api/coil-singleton/alltypes/#androidwidgetimageview","text":"","title":"android.widget.ImageView"},{"location":"api/coil-singleton/coil/","text":"coil-singleton / coil Package coil Types Name Summary Coil A class that holds the singleton ImageLoader instance. object Coil Extensions for External Classes Name Summary android.content.Context android.widget.ImageView Functions Name Summary no name provided A factory that creates new ImageLoader instances. fun no name provided (): Unit","title":"Home"},{"location":"api/coil-singleton/coil/#package-coil","text":"","title":"Package coil"},{"location":"api/coil-singleton/coil/#types","text":"Name Summary Coil A class that holds the singleton ImageLoader instance. object Coil","title":"Types"},{"location":"api/coil-singleton/coil/#extensions-for-external-classes","text":"Name Summary android.content.Context android.widget.ImageView","title":"Extensions for External Classes"},{"location":"api/coil-singleton/coil/#functions","text":"Name Summary no name provided A factory that creates new ImageLoader instances. fun no name provided (): Unit","title":"Functions"},{"location":"api/coil-singleton/coil/-no name provided-/","text":"coil-singleton / coil / no name provided no name provided fun no name provided (): Unit A factory that creates new ImageLoader instances. To configure how the singleton ImageLoader is created either : Implement ImageLoaderFactory in your Application . Or call Coil.setImageLoader with your ImageLoaderFactory .","title":" no name provided "},{"location":"api/coil-singleton/coil/-no name provided-/#no-name-provided","text":"fun no name provided (): Unit A factory that creates new ImageLoader instances. To configure how the singleton ImageLoader is created either : Implement ImageLoaderFactory in your Application . Or call Coil.setImageLoader with your ImageLoaderFactory .","title":"&lt;no name provided&gt;"},{"location":"api/coil-singleton/coil/-coil/","text":"coil-singleton / coil / Coil Coil object Coil A class that holds the singleton ImageLoader instance. Functions Name Summary enqueue Convenience function to get the singleton ImageLoader and enqueue the request . fun enqueue(request: ImageRequest ): Disposable execute Convenience function to get the singleton ImageLoader and execute the request . suspend fun execute(request: ImageRequest ): ImageResult imageLoader Get the singleton ImageLoader . Creates a new instance if none has been set. fun imageLoader(context: Context ): ImageLoader setImageLoader Set the singleton ImageLoader . Prefer using setImageLoader(ImageLoaderFactory) to create the ImageLoader lazily. fun setImageLoader(imageLoader: ImageLoader ): Unit Set the ImageLoaderFactory that will be used to create the singleton ImageLoader . The factory is guaranteed to be called at most once. fun setImageLoader(factory: ImageLoaderFactory ): Unit","title":"Home"},{"location":"api/coil-singleton/coil/-coil/#coil","text":"object Coil A class that holds the singleton ImageLoader instance.","title":"Coil"},{"location":"api/coil-singleton/coil/-coil/#functions","text":"Name Summary enqueue Convenience function to get the singleton ImageLoader and enqueue the request . fun enqueue(request: ImageRequest ): Disposable execute Convenience function to get the singleton ImageLoader and execute the request . suspend fun execute(request: ImageRequest ): ImageResult imageLoader Get the singleton ImageLoader . Creates a new instance if none has been set. fun imageLoader(context: Context ): ImageLoader setImageLoader Set the singleton ImageLoader . Prefer using setImageLoader(ImageLoaderFactory) to create the ImageLoader lazily. fun setImageLoader(imageLoader: ImageLoader ): Unit Set the ImageLoaderFactory that will be used to create the singleton ImageLoader . The factory is guaranteed to be called at most once. fun setImageLoader(factory: ImageLoaderFactory ): Unit","title":"Functions"},{"location":"api/coil-singleton/coil/-coil/enqueue/","text":"coil-singleton / coil / Coil / enqueue enqueue @JvmStatic fun enqueue(request: ImageRequest ): Disposable Convenience function to get the singleton ImageLoader and enqueue the request . See Also ImageLoader.enqueue","title":"Enqueue"},{"location":"api/coil-singleton/coil/-coil/enqueue/#enqueue","text":"@JvmStatic fun enqueue(request: ImageRequest ): Disposable Convenience function to get the singleton ImageLoader and enqueue the request . See Also ImageLoader.enqueue","title":"enqueue"},{"location":"api/coil-singleton/coil/-coil/execute/","text":"coil-singleton / coil / Coil / execute execute @JvmStatic suspend fun execute(request: ImageRequest ): ImageResult Convenience function to get the singleton ImageLoader and execute the request . See Also ImageLoader.execute","title":"Execute"},{"location":"api/coil-singleton/coil/-coil/execute/#execute","text":"@JvmStatic suspend fun execute(request: ImageRequest ): ImageResult Convenience function to get the singleton ImageLoader and execute the request . See Also ImageLoader.execute","title":"execute"},{"location":"api/coil-singleton/coil/-coil/image-loader/","text":"coil-singleton / coil / Coil / imageLoader imageLoader @JvmStatic fun imageLoader(context: Context ): ImageLoader Get the singleton ImageLoader . Creates a new instance if none has been set.","title":"Image loader"},{"location":"api/coil-singleton/coil/-coil/image-loader/#imageloader","text":"@JvmStatic fun imageLoader(context: Context ): ImageLoader Get the singleton ImageLoader . Creates a new instance if none has been set.","title":"imageLoader"},{"location":"api/coil-singleton/coil/-coil/set-image-loader/","text":"coil-singleton / coil / Coil / setImageLoader setImageLoader @JvmStatic @Synchronized fun setImageLoader(imageLoader: ImageLoader ): Unit Set the singleton ImageLoader . Prefer using setImageLoader(ImageLoaderFactory) to create the ImageLoader lazily. @JvmStatic @Synchronized fun setImageLoader(factory: ImageLoaderFactory ): Unit Set the ImageLoaderFactory that will be used to create the singleton ImageLoader . The factory is guaranteed to be called at most once. NOTE: factory will take precedence over an Application that implements ImageLoaderFactory .","title":"Set image loader"},{"location":"api/coil-singleton/coil/-coil/set-image-loader/#setimageloader","text":"@JvmStatic @Synchronized fun setImageLoader(imageLoader: ImageLoader ): Unit Set the singleton ImageLoader . Prefer using setImageLoader(ImageLoaderFactory) to create the ImageLoader lazily. @JvmStatic @Synchronized fun setImageLoader(factory: ImageLoaderFactory ): Unit Set the ImageLoaderFactory that will be used to create the singleton ImageLoader . The factory is guaranteed to be called at most once. NOTE: factory will take precedence over an Application that implements ImageLoaderFactory .","title":"setImageLoader"},{"location":"api/coil-singleton/coil/android.content.-context/","text":"coil-singleton / coil / android.content.Context Extensions for android.content.Context Name Summary imageLoader Get the singleton ImageLoader . This is an alias for Coil.imageLoader . val Context .imageLoader: ImageLoader","title":"Home"},{"location":"api/coil-singleton/coil/android.content.-context/#extensions-for-androidcontentcontext","text":"Name Summary imageLoader Get the singleton ImageLoader . This is an alias for Coil.imageLoader . val Context .imageLoader: ImageLoader","title":"Extensions for android.content.Context"},{"location":"api/coil-singleton/coil/android.content.-context/image-loader/","text":"coil-singleton / coil / android.content.Context / imageLoader imageLoader inline val Context .imageLoader: ImageLoader Get the singleton ImageLoader . This is an alias for Coil.imageLoader .","title":"Image loader"},{"location":"api/coil-singleton/coil/android.content.-context/image-loader/#imageloader","text":"inline val Context .imageLoader: ImageLoader Get the singleton ImageLoader . This is an alias for Coil.imageLoader .","title":"imageLoader"},{"location":"api/coil-singleton/coil/android.widget.-image-view/","text":"coil-singleton / coil / android.widget.ImageView Extensions for android.widget.ImageView Name Summary clear Cancel any in progress requests and clear all resources associated with this ImageView . fun ImageView .clear(): Unit load fun ImageView .load(uri: String ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable fun ImageView .load(url: HttpUrl ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable fun ImageView .load(uri: Uri ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable fun ImageView .load(file: File ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable fun ImageView .load(drawableResId: Int , imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable fun ImageView .load(drawable: Drawable ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable fun ImageView .load(bitmap: Bitmap ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable loadAny Load the image referenced by data and set it on this ImageView . fun ImageView .loadAny(data: Any ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable metadata Get the metadata of the successful request attached to this view. val ImageView .metadata: Metadata ?","title":"Home"},{"location":"api/coil-singleton/coil/android.widget.-image-view/#extensions-for-androidwidgetimageview","text":"Name Summary clear Cancel any in progress requests and clear all resources associated with this ImageView . fun ImageView .clear(): Unit load fun ImageView .load(uri: String ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable fun ImageView .load(url: HttpUrl ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable fun ImageView .load(uri: Uri ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable fun ImageView .load(file: File ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable fun ImageView .load(drawableResId: Int , imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable fun ImageView .load(drawable: Drawable ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable fun ImageView .load(bitmap: Bitmap ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable loadAny Load the image referenced by data and set it on this ImageView . fun ImageView .loadAny(data: Any ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable metadata Get the metadata of the successful request attached to this view. val ImageView .metadata: Metadata ?","title":"Extensions for android.widget.ImageView"},{"location":"api/coil-singleton/coil/android.widget.-image-view/clear/","text":"coil-singleton / coil / android.widget.ImageView / clear clear fun ImageView .clear(): Unit Cancel any in progress requests and clear all resources associated with this ImageView .","title":"Clear"},{"location":"api/coil-singleton/coil/android.widget.-image-view/clear/#clear","text":"fun ImageView .clear(): Unit Cancel any in progress requests and clear all resources associated with this ImageView .","title":"clear"},{"location":"api/coil-singleton/coil/android.widget.-image-view/load-any/","text":"coil-singleton / coil / android.widget.ImageView / loadAny loadAny inline fun ImageView .loadAny(data: Any ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable Load the image referenced by data and set it on this ImageView . ImageView.loadAny is the type-unsafe version of ImageView.load . Example: imageView.load( https://www.example.com/image.jpg ) { crossfade(true) transformations(CircleCropTransformation()) } Parameters data - The data to load. imageLoader - The ImageLoader that will be used to enqueue the ImageRequest . builder - An optional lambda to configure the request before it is enqueued.","title":"Load any"},{"location":"api/coil-singleton/coil/android.widget.-image-view/load-any/#loadany","text":"inline fun ImageView .loadAny(data: Any ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable Load the image referenced by data and set it on this ImageView . ImageView.loadAny is the type-unsafe version of ImageView.load . Example: imageView.load( https://www.example.com/image.jpg ) { crossfade(true) transformations(CircleCropTransformation()) }","title":"loadAny"},{"location":"api/coil-singleton/coil/android.widget.-image-view/load-any/#parameters","text":"data - The data to load. imageLoader - The ImageLoader that will be used to enqueue the ImageRequest . builder - An optional lambda to configure the request before it is enqueued.","title":"Parameters"},{"location":"api/coil-singleton/coil/android.widget.-image-view/load/","text":"coil-singleton / coil / android.widget.ImageView / load load inline fun ImageView .load(uri: String ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable inline fun ImageView .load(url: HttpUrl ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable inline fun ImageView .load(uri: Uri ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable inline fun ImageView .load(file: File ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable inline fun ImageView .load(@DrawableRes drawableResId: Int , imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable inline fun ImageView .load(drawable: Drawable ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable inline fun ImageView .load(bitmap: Bitmap ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable See Also ImageView.loadAny","title":"Load"},{"location":"api/coil-singleton/coil/android.widget.-image-view/load/#load","text":"inline fun ImageView .load(uri: String ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable inline fun ImageView .load(url: HttpUrl ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable inline fun ImageView .load(uri: Uri ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable inline fun ImageView .load(file: File ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable inline fun ImageView .load(@DrawableRes drawableResId: Int , imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable inline fun ImageView .load(drawable: Drawable ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable inline fun ImageView .load(bitmap: Bitmap ?, imageLoader: ImageLoader = context.imageLoader, builder: Builder .() - Unit = {}): Disposable See Also ImageView.loadAny","title":"load"},{"location":"api/coil-singleton/coil/android.widget.-image-view/metadata/","text":"coil-singleton / coil / android.widget.ImageView / metadata metadata val ImageView .metadata: Metadata ? Get the metadata of the successful request attached to this view.","title":"Metadata"},{"location":"api/coil-singleton/coil/android.widget.-image-view/metadata/#metadata","text":"val ImageView .metadata: Metadata ? Get the metadata of the successful request attached to this view.","title":"metadata"},{"location":"api/coil-svg/","text":"coil-svg Packages Name Summary coil.decode Index All Types","title":"coil-svg"},{"location":"api/coil-svg/#packages","text":"Name Summary coil.decode","title":"Packages"},{"location":"api/coil-svg/#index","text":"All Types","title":"Index"},{"location":"api/coil-svg/alltypes/","text":"All Types Name Summary coil.decode.SvgDecoder A Decoder that uses AndroidSVG to decode SVG files.","title":"Home"},{"location":"api/coil-svg/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/coil-svg/alltypes/#coildecodesvgdecoder","text":"A Decoder that uses AndroidSVG to decode SVG files.","title":"coil.decode.SvgDecoder"},{"location":"api/coil-svg/coil.decode/","text":"coil-svg / coil.decode Package coil.decode Types Name Summary SvgDecoder A Decoder that uses AndroidSVG to decode SVG files. class SvgDecoder : Decoder","title":"Home"},{"location":"api/coil-svg/coil.decode/#package-coildecode","text":"","title":"Package coil.decode"},{"location":"api/coil-svg/coil.decode/#types","text":"Name Summary SvgDecoder A Decoder that uses AndroidSVG to decode SVG files. class SvgDecoder : Decoder","title":"Types"},{"location":"api/coil-svg/coil.decode/-svg-decoder/","text":"coil-svg / coil.decode / SvgDecoder SvgDecoder class SvgDecoder : Decoder A Decoder that uses AndroidSVG to decode SVG files. Parameters context - A Context used to create the Drawable . useViewBoundsAsIntrinsicSize - If true, uses the SVG's view bounds as the intrinsic size for the SVG. If false, uses the SVG's width/height as the intrinsic size for the SVG. Constructors Name Summary init A Decoder that uses AndroidSVG to decode SVG files. SvgDecoder(context: Context , useViewBoundsAsIntrinsicSize: Boolean = true) Functions Name Summary decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Home"},{"location":"api/coil-svg/coil.decode/-svg-decoder/#svgdecoder","text":"class SvgDecoder : Decoder A Decoder that uses AndroidSVG to decode SVG files.","title":"SvgDecoder"},{"location":"api/coil-svg/coil.decode/-svg-decoder/#parameters","text":"context - A Context used to create the Drawable . useViewBoundsAsIntrinsicSize - If true, uses the SVG's view bounds as the intrinsic size for the SVG. If false, uses the SVG's width/height as the intrinsic size for the SVG.","title":"Parameters"},{"location":"api/coil-svg/coil.decode/-svg-decoder/#constructors","text":"Name Summary init A Decoder that uses AndroidSVG to decode SVG files. SvgDecoder(context: Context , useViewBoundsAsIntrinsicSize: Boolean = true)","title":"Constructors"},{"location":"api/coil-svg/coil.decode/-svg-decoder/#functions","text":"Name Summary decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Functions"},{"location":"api/coil-svg/coil.decode/-svg-decoder/-init-/","text":"coil-svg / coil.decode / SvgDecoder / init init SvgDecoder(context: Context , useViewBoundsAsIntrinsicSize: Boolean = true) A Decoder that uses AndroidSVG to decode SVG files. Parameters context - A Context used to create the Drawable . useViewBoundsAsIntrinsicSize - If true, uses the SVG's view bounds as the intrinsic size for the SVG. If false, uses the SVG's width/height as the intrinsic size for the SVG.","title":" init "},{"location":"api/coil-svg/coil.decode/-svg-decoder/-init-/#init","text":"SvgDecoder(context: Context , useViewBoundsAsIntrinsicSize: Boolean = true) A Decoder that uses AndroidSVG to decode SVG files.","title":"&lt;init&gt;"},{"location":"api/coil-svg/coil.decode/-svg-decoder/-init-/#parameters","text":"context - A Context used to create the Drawable . useViewBoundsAsIntrinsicSize - If true, uses the SVG's view bounds as the intrinsic size for the SVG. If false, uses the SVG's width/height as the intrinsic size for the SVG.","title":"Parameters"},{"location":"api/coil-svg/coil.decode/-svg-decoder/decode/","text":"coil-svg / coil.decode / SvgDecoder / decode decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult","title":"Decode"},{"location":"api/coil-svg/coil.decode/-svg-decoder/decode/#decode","text":"suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult","title":"decode"},{"location":"api/coil-svg/coil.decode/-svg-decoder/handles/","text":"coil-svg / coil.decode / SvgDecoder / handles handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Handles"},{"location":"api/coil-svg/coil.decode/-svg-decoder/handles/#handles","text":"fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"handles"},{"location":"api/coil-video/","text":"coil-video Packages Name Summary coil.decode coil.fetch coil.request Index All Types","title":"coil-video"},{"location":"api/coil-video/#packages","text":"Name Summary coil.decode coil.fetch coil.request","title":"Packages"},{"location":"api/coil-video/#index","text":"All Types","title":"Index"},{"location":"api/coil-video/alltypes/","text":"All Types Name Summary coil.decode.VideoFrameDecoder A Decoder that uses MediaMetadataRetriever to fetch and decode a frame from a video. | coil.fetch.VideoFrameFileFetcher A VideoFrameFetcher that supports fetching and decoding a video frame from a File . | coil.fetch.VideoFrameUriFetcher A VideoFrameFetcher that supports fetching and decoding a video frame from a Uri .","title":"Home"},{"location":"api/coil-video/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"api/coil-video/alltypes/#coildecodevideoframedecoder","text":"A Decoder that uses MediaMetadataRetriever to fetch and decode a frame from a video. |","title":"coil.decode.VideoFrameDecoder"},{"location":"api/coil-video/alltypes/#coilfetchvideoframefilefetcher","text":"A VideoFrameFetcher that supports fetching and decoding a video frame from a File . |","title":"coil.fetch.VideoFrameFileFetcher"},{"location":"api/coil-video/alltypes/#coilfetchvideoframeurifetcher","text":"A VideoFrameFetcher that supports fetching and decoding a video frame from a Uri .","title":"coil.fetch.VideoFrameUriFetcher"},{"location":"api/coil-video/coil.decode/","text":"coil-video / coil.decode Package coil.decode Types Name Summary VideoFrameDecoder A Decoder that uses MediaMetadataRetriever to fetch and decode a frame from a video. class VideoFrameDecoder : Decoder","title":"Home"},{"location":"api/coil-video/coil.decode/#package-coildecode","text":"","title":"Package coil.decode"},{"location":"api/coil-video/coil.decode/#types","text":"Name Summary VideoFrameDecoder A Decoder that uses MediaMetadataRetriever to fetch and decode a frame from a video. class VideoFrameDecoder : Decoder","title":"Types"},{"location":"api/coil-video/coil.decode/-video-frame-decoder/","text":"coil-video / coil.decode / VideoFrameDecoder VideoFrameDecoder class VideoFrameDecoder : Decoder A Decoder that uses MediaMetadataRetriever to fetch and decode a frame from a video. NOTE: VideoFrameDecoder creates a temporary copy of the video on the file system. This may cause the decode process to fail if the video being decoded is very large and/or the device is very low on disk space. Constructors Name Summary init A Decoder that uses MediaMetadataRetriever to fetch and decode a frame from a video. VideoFrameDecoder(context: Context ) Functions Name Summary decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean Companion Object Properties Name Summary VIDEO_FRAME_MICROS_KEY const val VIDEO_FRAME_MICROS_KEY: String VIDEO_FRAME_OPTION_KEY const val VIDEO_FRAME_OPTION_KEY: String","title":"Home"},{"location":"api/coil-video/coil.decode/-video-frame-decoder/#videoframedecoder","text":"class VideoFrameDecoder : Decoder A Decoder that uses MediaMetadataRetriever to fetch and decode a frame from a video. NOTE: VideoFrameDecoder creates a temporary copy of the video on the file system. This may cause the decode process to fail if the video being decoded is very large and/or the device is very low on disk space.","title":"VideoFrameDecoder"},{"location":"api/coil-video/coil.decode/-video-frame-decoder/#constructors","text":"Name Summary init A Decoder that uses MediaMetadataRetriever to fetch and decode a frame from a video. VideoFrameDecoder(context: Context )","title":"Constructors"},{"location":"api/coil-video/coil.decode/-video-frame-decoder/#functions","text":"Name Summary decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Functions"},{"location":"api/coil-video/coil.decode/-video-frame-decoder/#companion-object-properties","text":"Name Summary VIDEO_FRAME_MICROS_KEY const val VIDEO_FRAME_MICROS_KEY: String VIDEO_FRAME_OPTION_KEY const val VIDEO_FRAME_OPTION_KEY: String","title":"Companion Object Properties"},{"location":"api/coil-video/coil.decode/-video-frame-decoder/-init-/","text":"coil-video / coil.decode / VideoFrameDecoder / init init VideoFrameDecoder(context: Context ) A Decoder that uses MediaMetadataRetriever to fetch and decode a frame from a video. NOTE: VideoFrameDecoder creates a temporary copy of the video on the file system. This may cause the decode process to fail if the video being decoded is very large and/or the device is very low on disk space.","title":" init "},{"location":"api/coil-video/coil.decode/-video-frame-decoder/-init-/#init","text":"VideoFrameDecoder(context: Context ) A Decoder that uses MediaMetadataRetriever to fetch and decode a frame from a video. NOTE: VideoFrameDecoder creates a temporary copy of the video on the file system. This may cause the decode process to fail if the video being decoded is very large and/or the device is very low on disk space.","title":"&lt;init&gt;"},{"location":"api/coil-video/coil.decode/-video-frame-decoder/-v-i-d-e-o_-f-r-a-m-e_-m-i-c-r-o-s_-k-e-y/","text":"coil-video / coil.decode / VideoFrameDecoder / VIDEO_FRAME_MICROS_KEY VIDEO_FRAME_MICROS_KEY const val VIDEO_FRAME_MICROS_KEY: String","title":" v i d e o  f r a m e  m i c r o s  k e y"},{"location":"api/coil-video/coil.decode/-video-frame-decoder/-v-i-d-e-o_-f-r-a-m-e_-m-i-c-r-o-s_-k-e-y/#video_frame_micros_key","text":"const val VIDEO_FRAME_MICROS_KEY: String","title":"VIDEO_FRAME_MICROS_KEY"},{"location":"api/coil-video/coil.decode/-video-frame-decoder/-v-i-d-e-o_-f-r-a-m-e_-o-p-t-i-o-n_-k-e-y/","text":"coil-video / coil.decode / VideoFrameDecoder / VIDEO_FRAME_OPTION_KEY VIDEO_FRAME_OPTION_KEY const val VIDEO_FRAME_OPTION_KEY: String","title":" v i d e o  f r a m e  o p t i o n  k e y"},{"location":"api/coil-video/coil.decode/-video-frame-decoder/-v-i-d-e-o_-f-r-a-m-e_-o-p-t-i-o-n_-k-e-y/#video_frame_option_key","text":"const val VIDEO_FRAME_OPTION_KEY: String","title":"VIDEO_FRAME_OPTION_KEY"},{"location":"api/coil-video/coil.decode/-video-frame-decoder/decode/","text":"coil-video / coil.decode / VideoFrameDecoder / decode decode suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult","title":"Decode"},{"location":"api/coil-video/coil.decode/-video-frame-decoder/decode/#decode","text":"suspend fun decode(pool: BitmapPool , source: BufferedSource , size: Size , options: Options ): DecodeResult","title":"decode"},{"location":"api/coil-video/coil.decode/-video-frame-decoder/handles/","text":"coil-video / coil.decode / VideoFrameDecoder / handles handles fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"Handles"},{"location":"api/coil-video/coil.decode/-video-frame-decoder/handles/#handles","text":"fun handles(source: BufferedSource , mimeType: String ?): Boolean","title":"handles"},{"location":"api/coil-video/coil.fetch/","text":"coil-video / coil.fetch Package coil.fetch Types Name Summary VideoFrameFileFetcher A VideoFrameFetcher that supports fetching and decoding a video frame from a File . class VideoFrameFileFetcher : VideoFrameFetcher File VideoFrameUriFetcher A VideoFrameFetcher that supports fetching and decoding a video frame from a Uri . class VideoFrameUriFetcher : VideoFrameFetcher Uri","title":"Home"},{"location":"api/coil-video/coil.fetch/#package-coilfetch","text":"","title":"Package coil.fetch"},{"location":"api/coil-video/coil.fetch/#types","text":"Name Summary VideoFrameFileFetcher A VideoFrameFetcher that supports fetching and decoding a video frame from a File . class VideoFrameFileFetcher : VideoFrameFetcher File VideoFrameUriFetcher A VideoFrameFetcher that supports fetching and decoding a video frame from a Uri . class VideoFrameUriFetcher : VideoFrameFetcher Uri","title":"Types"},{"location":"api/coil-video/coil.fetch/-video-frame-file-fetcher/","text":"coil-video / coil.fetch / VideoFrameFileFetcher VideoFrameFileFetcher class VideoFrameFileFetcher : VideoFrameFetcher File A VideoFrameFetcher that supports fetching and decoding a video frame from a File . Constructors Name Summary init A VideoFrameFetcher that supports fetching and decoding a video frame from a File . VideoFrameFileFetcher(context: Context ) Functions Name Summary handles fun handles(data: File ): Boolean key fun key(data: File ): String setDataSource fun MediaMetadataRetriever .setDataSource(data: File ): Unit","title":"Home"},{"location":"api/coil-video/coil.fetch/-video-frame-file-fetcher/#videoframefilefetcher","text":"class VideoFrameFileFetcher : VideoFrameFetcher File A VideoFrameFetcher that supports fetching and decoding a video frame from a File .","title":"VideoFrameFileFetcher"},{"location":"api/coil-video/coil.fetch/-video-frame-file-fetcher/#constructors","text":"Name Summary init A VideoFrameFetcher that supports fetching and decoding a video frame from a File . VideoFrameFileFetcher(context: Context )","title":"Constructors"},{"location":"api/coil-video/coil.fetch/-video-frame-file-fetcher/#functions","text":"Name Summary handles fun handles(data: File ): Boolean key fun key(data: File ): String setDataSource fun MediaMetadataRetriever .setDataSource(data: File ): Unit","title":"Functions"},{"location":"api/coil-video/coil.fetch/-video-frame-file-fetcher/-init-/","text":"coil-video / coil.fetch / VideoFrameFileFetcher / init init VideoFrameFileFetcher(context: Context ) A VideoFrameFetcher that supports fetching and decoding a video frame from a File .","title":" init "},{"location":"api/coil-video/coil.fetch/-video-frame-file-fetcher/-init-/#init","text":"VideoFrameFileFetcher(context: Context ) A VideoFrameFetcher that supports fetching and decoding a video frame from a File .","title":"&lt;init&gt;"},{"location":"api/coil-video/coil.fetch/-video-frame-file-fetcher/handles/","text":"coil-video / coil.fetch / VideoFrameFileFetcher / handles handles fun handles(data: File ): Boolean","title":"Handles"},{"location":"api/coil-video/coil.fetch/-video-frame-file-fetcher/handles/#handles","text":"fun handles(data: File ): Boolean","title":"handles"},{"location":"api/coil-video/coil.fetch/-video-frame-file-fetcher/key/","text":"coil-video / coil.fetch / VideoFrameFileFetcher / key key fun key(data: File ): String","title":"Key"},{"location":"api/coil-video/coil.fetch/-video-frame-file-fetcher/key/#key","text":"fun key(data: File ): String","title":"key"},{"location":"api/coil-video/coil.fetch/-video-frame-file-fetcher/set-data-source/","text":"coil-video / coil.fetch / VideoFrameFileFetcher / setDataSource setDataSource protected fun MediaMetadataRetriever .setDataSource(data: File ): Unit","title":"Set data source"},{"location":"api/coil-video/coil.fetch/-video-frame-file-fetcher/set-data-source/#setdatasource","text":"protected fun MediaMetadataRetriever .setDataSource(data: File ): Unit","title":"setDataSource"},{"location":"api/coil-video/coil.fetch/-video-frame-uri-fetcher/","text":"coil-video / coil.fetch / VideoFrameUriFetcher VideoFrameUriFetcher class VideoFrameUriFetcher : VideoFrameFetcher Uri A VideoFrameFetcher that supports fetching and decoding a video frame from a Uri . Constructors Name Summary init A VideoFrameFetcher that supports fetching and decoding a video frame from a Uri . VideoFrameUriFetcher(context: Context ) Functions Name Summary handles fun handles(data: Uri ): Boolean key fun key(data: Uri ): String setDataSource fun MediaMetadataRetriever .setDataSource(data: Uri ): Unit","title":"Home"},{"location":"api/coil-video/coil.fetch/-video-frame-uri-fetcher/#videoframeurifetcher","text":"class VideoFrameUriFetcher : VideoFrameFetcher Uri A VideoFrameFetcher that supports fetching and decoding a video frame from a Uri .","title":"VideoFrameUriFetcher"},{"location":"api/coil-video/coil.fetch/-video-frame-uri-fetcher/#constructors","text":"Name Summary init A VideoFrameFetcher that supports fetching and decoding a video frame from a Uri . VideoFrameUriFetcher(context: Context )","title":"Constructors"},{"location":"api/coil-video/coil.fetch/-video-frame-uri-fetcher/#functions","text":"Name Summary handles fun handles(data: Uri ): Boolean key fun key(data: Uri ): String setDataSource fun MediaMetadataRetriever .setDataSource(data: Uri ): Unit","title":"Functions"},{"location":"api/coil-video/coil.fetch/-video-frame-uri-fetcher/-init-/","text":"coil-video / coil.fetch / VideoFrameUriFetcher / init init VideoFrameUriFetcher(context: Context ) A VideoFrameFetcher that supports fetching and decoding a video frame from a Uri .","title":" init "},{"location":"api/coil-video/coil.fetch/-video-frame-uri-fetcher/-init-/#init","text":"VideoFrameUriFetcher(context: Context ) A VideoFrameFetcher that supports fetching and decoding a video frame from a Uri .","title":"&lt;init&gt;"},{"location":"api/coil-video/coil.fetch/-video-frame-uri-fetcher/handles/","text":"coil-video / coil.fetch / VideoFrameUriFetcher / handles handles fun handles(data: Uri ): Boolean","title":"Handles"},{"location":"api/coil-video/coil.fetch/-video-frame-uri-fetcher/handles/#handles","text":"fun handles(data: Uri ): Boolean","title":"handles"},{"location":"api/coil-video/coil.fetch/-video-frame-uri-fetcher/key/","text":"coil-video / coil.fetch / VideoFrameUriFetcher / key key fun key(data: Uri ): String","title":"Key"},{"location":"api/coil-video/coil.fetch/-video-frame-uri-fetcher/key/#key","text":"fun key(data: Uri ): String","title":"key"},{"location":"api/coil-video/coil.fetch/-video-frame-uri-fetcher/set-data-source/","text":"coil-video / coil.fetch / VideoFrameUriFetcher / setDataSource setDataSource protected fun MediaMetadataRetriever .setDataSource(data: Uri ): Unit","title":"Set data source"},{"location":"api/coil-video/coil.fetch/-video-frame-uri-fetcher/set-data-source/#setdatasource","text":"protected fun MediaMetadataRetriever .setDataSource(data: Uri ): Unit","title":"setDataSource"},{"location":"api/coil-video/coil.request/","text":"coil-video / coil.request Package coil.request Functions Name Summary videoFrameMicros Set the time in microseconds of the frame to extract from a video. fun Builder .videoFrameMicros(frameMicros: Long ): Builder Get the time in microseconds of the frame to extract from a video. fun Parameters .videoFrameMicros(): Long ? videoFrameMillis Set the time in milliseconds of the frame to extract from a video. fun Builder .videoFrameMillis(frameMillis: Long ): Builder videoFrameOption Set the option for how to decode the video frame. fun Builder .videoFrameOption(option: Int ): Builder Get the option for how to decode the video frame. fun Parameters .videoFrameOption(): Int ?","title":"Home"},{"location":"api/coil-video/coil.request/#package-coilrequest","text":"","title":"Package coil.request"},{"location":"api/coil-video/coil.request/#functions","text":"Name Summary videoFrameMicros Set the time in microseconds of the frame to extract from a video. fun Builder .videoFrameMicros(frameMicros: Long ): Builder Get the time in microseconds of the frame to extract from a video. fun Parameters .videoFrameMicros(): Long ? videoFrameMillis Set the time in milliseconds of the frame to extract from a video. fun Builder .videoFrameMillis(frameMillis: Long ): Builder videoFrameOption Set the option for how to decode the video frame. fun Builder .videoFrameOption(option: Int ): Builder Get the option for how to decode the video frame. fun Parameters .videoFrameOption(): Int ?","title":"Functions"},{"location":"api/coil-video/coil.request/video-frame-micros/","text":"coil-video / coil.request / videoFrameMicros videoFrameMicros fun Builder .videoFrameMicros(frameMicros: Long ): Builder Set the time in microseconds of the frame to extract from a video. Default: 0 See Also VideoFrameDecoder VideoFrameFetcher fun Parameters .videoFrameMicros(): Long ? Get the time in microseconds of the frame to extract from a video. See Also VideoFrameFetcher","title":"Video frame micros"},{"location":"api/coil-video/coil.request/video-frame-micros/#videoframemicros","text":"fun Builder .videoFrameMicros(frameMicros: Long ): Builder Set the time in microseconds of the frame to extract from a video. Default: 0 See Also VideoFrameDecoder VideoFrameFetcher fun Parameters .videoFrameMicros(): Long ? Get the time in microseconds of the frame to extract from a video. See Also VideoFrameFetcher","title":"videoFrameMicros"},{"location":"api/coil-video/coil.request/video-frame-millis/","text":"coil-video / coil.request / videoFrameMillis videoFrameMillis fun Builder .videoFrameMillis(frameMillis: Long ): Builder Set the time in milliseconds of the frame to extract from a video. Default: 0 See Also VideoFrameDecoder VideoFrameFetcher","title":"Video frame millis"},{"location":"api/coil-video/coil.request/video-frame-millis/#videoframemillis","text":"fun Builder .videoFrameMillis(frameMillis: Long ): Builder Set the time in milliseconds of the frame to extract from a video. Default: 0 See Also VideoFrameDecoder VideoFrameFetcher","title":"videoFrameMillis"},{"location":"api/coil-video/coil.request/video-frame-option/","text":"coil-video / coil.request / videoFrameOption videoFrameOption fun Builder .videoFrameOption(option: Int ): Builder Set the option for how to decode the video frame. Must be one of OPTION_PREVIOUS_SYNC , OPTION_NEXT_SYNC , OPTION_CLOSEST_SYNC , OPTION_CLOSEST . Default: OPTION_CLOSEST_SYNC See Also MediaMetadataRetriever VideoFrameDecoder VideoFrameFetcher fun Parameters .videoFrameOption(): Int ? Get the option for how to decode the video frame. See Also VideoFrameFetcher","title":"Video frame option"},{"location":"api/coil-video/coil.request/video-frame-option/#videoframeoption","text":"fun Builder .videoFrameOption(option: Int ): Builder Set the option for how to decode the video frame. Must be one of OPTION_PREVIOUS_SYNC , OPTION_NEXT_SYNC , OPTION_CLOSEST_SYNC , OPTION_CLOSEST . Default: OPTION_CLOSEST_SYNC See Also MediaMetadataRetriever VideoFrameDecoder VideoFrameFetcher fun Parameters .videoFrameOption(): Int ? Get the option for how to decode the video frame. See Also VideoFrameFetcher","title":"videoFrameOption"}]}